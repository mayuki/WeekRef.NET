<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<id>/</id>
	<title>WeekRef.NET</title>
	<author>
		<name>Mayuki Sawatari</name>
	</author>
	<link rel="self" href="/" />
	<rights>Copyright © Mayuki Sawatari &lt;mayuki@misuzilla.org&gt;</rights>
	<updated>2022-10-25T10:09:46Z</updated>
	<logo>/img/logo.png</logo>
	<subtitle>.NET 関連の情報をほぼ週刊配信</subtitle>
	<entry>
		<id>/2022/10/25/updates</id>
		<title>2022-10-25: .NET MAUI support for .NET 7 RC 2, OpenSilver 1.1, Windows Dev Kit 2023</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2022/10/25/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2022-10-25T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="announcing.net-maui-support-for.net-7-release-candidate-2.net-blog"&gt;Announcing .NET MAUI support for .NET 7 Release Candidate 2 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-maui-rc2/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-maui-rc2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 RC 2 向けの .NET MAUI サポートがリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは iOS 16 に対応した Xcode 14 のサポートが行われており、Visual Studio 17.4 Preview 4 で利用可能となる。またこのバージョンはプロダクション環境での利用がサポート対象となる。&lt;/p&gt;
&lt;h3 id="opensilver-1.1-released"&gt;OpenSilver 1.1 Released!&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.opensilver.net/announcements/opensilver1-1.aspx"&gt;https://www.opensilver.net/announcements/opensilver1-1.aspx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Silverlight の互換を目指す、WebAssembly 上で動作するオープンソース実装 OpenSilver の 1.1 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは100を超える Silverlight の機能のサポートの追加、Telerik UI をはじめとした様々なサードパーティーライブラリーのサポートの追加、最大3倍のパフォーマンス向上といった改善が行われている。&lt;/p&gt;
&lt;p&gt;また、来年初頭にリリースを予定している 2.0 では VB.NET のサポートを追加するとのこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://visualstudiomagazine.com/articles/2022/10/17/opensilver-1-1.aspx"&gt;OpenSilver Gets Closer to Open Source Parity with Long-Dead Microsoft Silverlight -- Visual Studio Magazine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.infoq.com/news/2022/10/opensilver-1-1-silverlight/"&gt;OpenSilver 1.1 Promises 99% of Code Compatibility with Silverlight Applications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="available-today-windows-dev-kit-2023-aka-project-volterra-windows-developer-blog"&gt;Available today: Windows Dev Kit 2023 aka Project Volterra - Windows Developer Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blogs.windows.com/windowsdeveloper/2022/10/24/available-today-windows-dev-kit-2023-aka-project-volterra/"&gt;https://blogs.windows.com/windowsdeveloper/2022/10/24/available-today-windows-dev-kit-2023-aka-project-volterra/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Arm アーキテクチャー向け Windows の開発キットが Windows Dev Kit 2023 という名前で販売開始となった。&lt;/p&gt;
&lt;p&gt;Windows Dev Kit 2023 は Build 2022 で Project Volterra という名前で発表された開発者向けのキットで、Snapdragon 8cx Gen 3 と 32GB の RAM、512GB の NVMe SSD を備えている。&lt;/p&gt;
&lt;p&gt;オーストラリア、カナダ、中国、フランス、ドイツ、日本、英国、米国で今日から注文が可能となっている。日本では 99,880円 (税込) となる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.microsoft.com/ja-jp/d/windows-%E9%96%8B%E7%99%BA%E3%82%AD%E3%83%83%E3%83%88-2023/94k0p67w7581"&gt;Windows 開発キット 2023 を購入 Arm アプリ開発者向けデスクトップ PC - Microsoft Store&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="release-diagnostics-release-v6.0.351802-dotnetdiagnostics"&gt;Release Diagnostics Release - v6.0.351802 · dotnet/diagnostics&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/diagnostics/releases/tag/v6.0.351802"&gt;https://github.com/dotnet/diagnostics/releases/tag/v6.0.351802&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;dotnet-{dump,monitor,trace} (Diagnostics) の 6.0.351802 がリリースされた。&lt;/p&gt;
&lt;p&gt;dotnet-dump では Linux/macOS での SOS コマンドの拡充をはじめ、いくつかの不具合と改善が含まれている。dotnet-monitor と dotnet-trace では不具合の修正が行われている。&lt;/p&gt;
&lt;h3 id="support-reminder-for-older-versions-of-visual-studio-visual-studio-blog"&gt;Support reminder for older versions of Visual Studio - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/support-reminder-for-older-versions-of-visual-studio/"&gt;https://devblogs.microsoft.com/visualstudio/support-reminder-for-older-versions-of-visual-studio/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;サポートが終了となる Visual Studio についてのリマインダー。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Visual Studio 2012: 2023年1月10日に延長サポートが終了&lt;/li&gt;
&lt;li&gt;Visual Studio 2013: 2024年4月9日に延長サポートが終了&lt;/li&gt;
&lt;li&gt;Visual Studio 2015: 2025年10月14日に延長サポートが終了&lt;/li&gt;
&lt;li&gt;Visual Studio 2017: 2022年4月12日にメインストリームサポートが終了、2027年4月13日に延長サポートが終了 (15.9)&lt;/li&gt;
&lt;li&gt;Visual Studio 2019 (16.9): 2022年10月11日にサポートが終了。引き続き 2019 のサポートを受ける場合には 16.11 への移行が推奨される&lt;/li&gt;
&lt;li&gt;Visual Studio 2019 Preview: 更新終了のため、リリースチャンネルへの移行または 2022 の Preview チャンネルへの移行が推奨される&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;記事では管理者による更新プログラムの管理やサポート終了となったコンポーネントの削除方法といった点についても触れている。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="hello.net-atomicjar"&gt;Hello .NET! - AtomicJar&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.atomicjar.com/2022/10/hello-dotnet/"&gt;https://www.atomicjar.com/2022/10/hello-dotnet/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Testcontainers の .NET 向け実装のメンテナー (AtomicJar 社の人) の Testcontainers の紹介。&lt;/p&gt;
&lt;p&gt;Testcontainers の .NET 向けの実装を行った経緯やリポジトリの成長、xUnit.net との連携例といったものを紹介している。&lt;/p&gt;
&lt;h3 id="dotnet-monitor-enabling-a-diagnostics-sidecar-in-aks"&gt;dotnet-monitor: Enabling a diagnostics sidecar in AKS&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.poppastring.com/blog/dotnetmonitor-enabling-a-diagnostics-sidecar-in-aks"&gt;https://www.poppastring.com/blog/dotnetmonitor-enabling-a-diagnostics-sidecar-in-aks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;dotnet-monitor を AKS (Azure Kubernetes Serivce) の Pod のサイドカーとして動かす方法についての動画。&lt;/p&gt;
&lt;h3 id="net-systems-programming-learned-the-hard-way.pptx"&gt;NET Systems Programming Learned the Hard Way.pptx&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.slideshare.net/petabridge/net-systems-programming-learned-the-hard-waypptx"&gt;https://www.slideshare.net/petabridge/net-systems-programming-learned-the-hard-waypptx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Akka.NET 開発者による .NET の低レベルなコンポーネントに関しての解説スライド。&lt;/p&gt;
&lt;!-- https://twitter.com/aaronontheweb/status/1582836426185486336?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;.NET Systems Programming Learned the Hard Way&lt;br&gt;&lt;br&gt;Recording: &lt;a href="https://t.co/WvVzjp98Ip"&gt;https://t.co/WvVzjp98Ip&lt;/a&gt;&lt;br&gt;Slides: &lt;a href="https://t.co/34ohASQ69w"&gt;https://t.co/34ohASQ69w&lt;/a&gt;&lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/performance?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#performance&lt;/a&gt;&lt;/p&gt;&amp;mdash; Aaron Stannard (&amp;#64;Aaronontheweb) &lt;a href="https://twitter.com/Aaronontheweb/status/1582836426185486336?ref_src=twsrc%5Etfw"&gt;October 19, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="cmemorypack1-spacekey.dev"&gt;[C#]MemoryPackを使ってみたい1 - 基本 | spacekey.dev&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://spacekey.dev/memorypack-1"&gt;https://spacekey.dev/memorypack-1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;バイナリーシリアライザー MemoryPack を使用してみるというシリーズ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://spacekey.dev/memorypack-2"&gt;[C#]MemoryPackを使ってみたい2 - ASP.NET Coreで使う | spacekey.dev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://spacekey.dev/memorypack-3"&gt;[C#]MemoryPackを使ってみたい3 - TypeScriptで使う | spacekey.dev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://spacekey.dev/memorypack-4"&gt;[C#]MemoryPackを使ってみたい4 - MemoryPackableの色々 | spacekey.dev&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="clr-events-go-for-the-nettrace-file-format"&gt;CLR events: go for the nettrace file format!&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://chnasarre.medium.com/clr-events-go-for-the-nettrace-file-format-6b363364c2a3"&gt;https://chnasarre.medium.com/clr-events-go-for-the-nettrace-file-format-6b363364c2a3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CLR から診断イベントを nettrace バイナリーストリームで受け取る方法についての記事。&lt;/p&gt;
&lt;h3 id="wslriderasp.net-kubernetes-1"&gt;WSLとRiderによるASP.NET / Kubernetes開発 (1)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/dynamitecoolguy/articles/4530e1134bcbac"&gt;https://zenn.dev/dynamitecoolguy/articles/4530e1134bcbac&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WSL 上で Rider を実行して ASP.NET Core と Kubernetes を使用した開発をする準備手順を紹介している記事。&lt;/p&gt;
&lt;h3 id="implementing-graphql-api-gateway-in.net-6-hot-chocolate-v12-redis"&gt;Implementing GraphQL API Gateway in .NET 6 + Hot Chocolate v12 + Redis&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dianper.medium.com/implementing-graphql-api-gateway-in-net-6-hot-chocolate-v12-redis-1a0ac12f340c"&gt;https://dianper.medium.com/implementing-graphql-api-gateway-in-net-6-hot-chocolate-v12-redis-1a0ac12f340c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;フェデレーションスキーマを使用した GraphQL API ゲートウェイを .NET 6 と Hot Chocolate v12、Redis を使用して実現する方法についての記事。&lt;/p&gt;
&lt;h3 id="write-your-own-code-coverage-script-for-your.net-projects"&gt;Write your own code coverage script for your .NET projects&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;stefanacimovicMEng/write-your-own-code-coverage-script-for-your-net-projects-e26b621aa0dc"&gt;https://medium.com/&amp;#64;stefanacimovicMEng/write-your-own-code-coverage-script-for-your-net-projects-e26b621aa0dc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET プロジェクトのコードカバレッジを取得してレポートを出力する一連の手順を自作する方法についての記事。&lt;/p&gt;
&lt;h3 id="custom-scaffold-templates-in-asp.net-core-dotnetthoughts"&gt;Custom scaffold templates in ASP.NET Core | dotnetthoughts&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dotnetthoughts.net/custom-scaffold-templates-in-asp-net-core/"&gt;https://dotnetthoughts.net/custom-scaffold-templates-in-asp-net-core/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core MVC のテンプレートをプロジェクトレベルでカスタマイズする方法についての記事。&lt;/p&gt;
&lt;h3 id="samapi-gatewayawsserverlessfunction-qiita"&gt;SAMを使ってAPI-Gateway経由でAWS&lt;span&gt;Serverless&lt;/span&gt;Functionから画像をダウンロードする - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/karuakun/items/e61007864364ab164774"&gt;https://qiita.com/karuakun/items/e61007864364ab164774&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AWS Serverless Application Model を使用してアプリケーションを作成した場合に API Gateway を介したバイナリデータを取り扱う方法についての記事。&lt;/p&gt;
&lt;h3 id="visual-studio-2022-themes-you-should-try-free-themes"&gt;10 Visual Studio 2022 Themes you Should Try (Free Themes!)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.dotnetsafer.com/best-visual-studio-2022-themes/"&gt;https://blog.dotnetsafer.com/best-visual-studio-2022-themes/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 に追加できる10種類のテーマの紹介。&lt;/p&gt;
&lt;h3 id="build-your-own-reverse-proxy"&gt;Build your Own Reverse proxy&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://satish1v.medium.com/build-your-own-reverse-proxy-bf3232e7e5f3"&gt;https://satish1v.medium.com/build-your-own-reverse-proxy-bf3232e7e5f3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;YARP で簡単にリバースプロキシーサーバーを作ってみるという記事。&lt;/p&gt;
&lt;h3 id="error-handling-in-the-field-ayende-rahien"&gt;Error handling in the field - Ayende &amp;#64; Rahien&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ayende.com/blog/198369-A/error-handling-in-the-field"&gt;https://ayende.com/blog/198369-A/error-handling-in-the-field&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;アプリケーションのクラッシュレポート(UnhandledException)を収集するようにしていたところ、最近の Windows Update で WPF の挙動が変わって内部でエラーが出るようになったので無視するようにしたものの微妙という話。&lt;/p&gt;
&lt;h3 id="how-to-send-emails-at-scale-in.net-with-the-azure-communication-service"&gt;How to send emails at scale in .NET with the Azure Communication Service&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/medialesson/how-to-send-emails-at-scale-in-net-with-the-azure-communication-service-14565d84147f"&gt;https://medium.com/medialesson/how-to-send-emails-at-scale-in-net-with-the-azure-communication-service-14565d84147f&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure Communication Service を使用してメール送信を行う方法についての記事。&lt;/p&gt;
&lt;h3 id="net-7-asp.net-core-blazor"&gt;.NET 7 の ASP.NET Core Blazor の新機能試してみよう&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/okazuki/articles/blazor-dotnet7"&gt;https://zenn.dev/okazuki/articles/blazor-dotnet7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 の ASP.NET Core Blazor の新機能を紹介している記事。&lt;/p&gt;
&lt;p&gt;WebAssembly のローディング、bind の修飾子、仮想化の改善、ナビゲーションの改善について触れている。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="sergio0694polysharp-polysharp-provides-generated-source-only-polyfills-for-c-language-features-to-easily-use-all-runtime-agnostic-features-downlevel.add-a-reference-set-your-c-version-to-latest-and-have-fun"&gt;Sergio0694/PolySharp: PolySharp provides generated, source-only polyfills for C# language features, to easily use all runtime-agnostic features downlevel. Add a reference, set your C# version to latest and have fun! 🚀&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/Sergio0694/PolySharp"&gt;https://github.com/Sergio0694/PolySharp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# の言語機能として必要となる属性(&lt;code&gt;CallerArgumentExpression&lt;/code&gt;等)や構造体(&lt;code&gt;Range&lt;/code&gt;等)の型が含まれていないターゲットフレームワーク向けにソースジェネレーターで型を追加生成することで新しい言語機能を利用できるようにするという Polyfill。&lt;/p&gt;
&lt;!-- https://twitter.com/SergioPedri/status/1584482651271856128 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;New weekend project: PolySharp! It includes smart, source-generated polyfills for all C# language features: just reference it, enable C# 11, and enjoy all the new features downlevel, including on .NET Framework, UWP and more! Try it out! 🚀&lt;a href="https://twitter.com/hashtag/csharp?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#csharp&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt;&lt;a href="https://t.co/mPhXuJ8Ns0"&gt;https://t.co/mPhXuJ8Ns0&lt;/a&gt; &lt;a href="https://t.co/juZuMi91dv"&gt;pic.twitter.com/juZuMi91dv&lt;/a&gt;&lt;/p&gt;&amp;mdash; Sergio Pedri (&amp;#64;SergioPedri) &lt;a href="https://twitter.com/SergioPedri/status/1584482651271856128?ref_src=twsrc%5Etfw"&gt;October 24, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="xt0rteddotnet-startup-projects-a-dotnet-tool-to-manage-multiple-visual-studio-startup-projects-for-a-solution"&gt;xt0rted/dotnet-startup-projects: A dotnet tool to manage multiple Visual Studio startup projects for a solution&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/xt0rted/dotnet-startup-projects"&gt;https://github.com/xt0rted/dotnet-startup-projects&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ソリューションで起動する Visual Studio のバージョンを変更するツール。&lt;/p&gt;
&lt;!-- https://twitter.com/xt0rted/status/1581880780745109505?s=12&amp;t=nWJI9WhjD8PixDRVN--Rlw --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Just published a &lt;a href="https://twitter.com/dotnet?ref_src=twsrc%5Etfw"&gt;&amp;#64;dotnet&lt;/a&gt; tool to help manage solutions with multiple &lt;a href="https://twitter.com/VisualStudio?ref_src=twsrc%5Etfw"&gt;&amp;#64;VisualStudio&lt;/a&gt; startup projects.&lt;br&gt;&lt;br&gt;Add a property to each startup project, then run &amp;quot;startup-projects set --vs 2022&amp;quot; against the sln. It&amp;#39;ll create a new .suo file with the right settings.&lt;a href="https://t.co/tBybU6eyR1"&gt;https://t.co/tBybU6eyR1&lt;/a&gt;&lt;/p&gt;&amp;mdash; Brian Surowiec (&amp;#64;xt0rted) &lt;a href="https://twitter.com/xt0rted/status/1581880780745109505?ref_src=twsrc%5Etfw"&gt;October 17, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="networking-telemetry-in.net.net-microsoft-learn"&gt;Networking Telemetry in .NET - .NET | Microsoft Learn&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://learn.microsoft.com/en-us/dotnet/fundamentals/networking/networking-telemetry"&gt;https://learn.microsoft.com/en-us/dotnet/fundamentals/networking/networking-telemetry&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET のネットワーク関連のカウンターなどのテレメトリー情報についてまとめているドキュメント。&lt;/p&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/davidfowl/status/1582955638736695296?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;We&amp;#39;re working on making &lt;a href="https://t.co/4PmXMR5h75"&gt;https://t.co/4PmXMR5h75&lt;/a&gt; Core and EntityFramework work with trimming and ahead of time compilation (.NET NativeAOT). One of the big challenges is moving away from dynamic runtime code generation. Let&amp;#39;s talk about what that means👇🏾 &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/aspnetcore?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#aspnetcore&lt;/a&gt;&lt;/p&gt;&amp;mdash; David Fowler 🇧🇧🇺🇸 (&amp;#64;davidfowl) &lt;a href="https://twitter.com/davidfowl/status/1582955638736695296?ref_src=twsrc%5Etfw"&gt;October 20, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;ASP.NET Core と Entity Framework Core を NativeAOT に対応させるために取り組んでいるが、コード生成の課題についての話。&lt;/p&gt;
&lt;!-- https://twitter.com/xoofx/status/1582696587360624640?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="und" dir="ltr"&gt;TIL 😍 &lt;a href="https://t.co/q65eZqb8Za"&gt;https://t.co/q65eZqb8Za&lt;/a&gt; &lt;a href="https://t.co/2cSgDSs71n"&gt;pic.twitter.com/2cSgDSs71n&lt;/a&gt;&lt;/p&gt;&amp;mdash; Alexandre Mutel (&amp;#64;xoofx) &lt;a href="https://twitter.com/xoofx/status/1582696587360624640?ref_src=twsrc%5Etfw"&gt;October 19, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;ソリューションエクスプローラーの「すべてのファイルを表示」すると、SDK などで読み込んでいる targets や props 等を確認できるという小技。&lt;/p&gt;
&lt;!-- https://twitter.com/dsymetweets/status/1582438640143069184?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;On delivering a 3GB file via multiple nuget packages that stitch together on restore:&lt;br&gt;&lt;br&gt;&amp;quot;It&amp;#39;s the greatest hack of my life. The one I want written up in the great book of hacks that gets read in hack heaven. Alongside all the other times a large file hack has been played...  1/2&lt;/p&gt;&amp;mdash; Don Syme (&amp;#64;dsymetweets) &lt;a href="https://twitter.com/dsymetweets/status/1582438640143069184?ref_src=twsrc%5Etfw"&gt;October 18, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;&lt;a href="https://www.nuget.org/packages/libtorch-cuda-11.3-linux-x64#dependencies-body-tab"&gt;分割されたトータル 3GB の NuGet パッケージの話。&lt;/a&gt;&lt;/p&gt;
&lt;!-- https://twitter.com/jbevain/status/1583877491273650176?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;If there&amp;#39;s one thing I don&amp;#39;t like, it&amp;#39;s exceptions that are caught but are hiding another issue (or could be avoided in favor of a simpler check). The Mono debugging API make it incredibly easy to programmatically monitor your Unity Game/Editor: &lt;a href="https://t.co/K5yU8SDIcG"&gt;https://t.co/K5yU8SDIcG&lt;/a&gt; &lt;a href="https://t.co/AXTmbZ5XIB"&gt;pic.twitter.com/AXTmbZ5XIB&lt;/a&gt;&lt;/p&gt;&amp;mdash; Jb Evain (&amp;#64;jbevain) &lt;a href="https://twitter.com/jbevain/status/1583877491273650176?ref_src=twsrc%5Etfw"&gt;October 22, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="introduce-system.runtime.tieredpgo-knob-by-egorbo-pull-request-26350-dotnetsdk"&gt;Introduce System.Runtime.TieredPGO knob by EgorBo · Pull Request #26350 · dotnet/sdk&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/sdk/pull/26350"&gt;https://github.com/dotnet/sdk/pull/26350&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TieredPGO&lt;/code&gt; という環境変数や MSBuild プロパティで階層化 PGO を有効化できるオプションが .NET 7 で追加されたという PR。&lt;/p&gt;
&lt;h3 id="the-compiler-should-report-an-error-about-references-to-out-of-scope-stack-memory-generated-by-unscopedref-and-defensively-copied-struct.issue-64776-dotnetroslyn"&gt;The compiler should report an error about references to out-of-scope stack memory generated by &lt;code&gt;[UnscopedRef]&lt;/code&gt; and defensively copied struct. · Issue #64776 · dotnet/roslyn&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/roslyn/issues/64776"&gt;https://github.com/dotnet/roslyn/issues/64776&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;スタック上に防衛的コピーされた値の参照を返して本来できないはずのアクセスができてしまうコードが書けるというコンパイラーのバグ。&lt;/p&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2022/10/17/updates</id>
		<title>2022-10-17: .NET 7 Release Candidate 2, .NET MAUI support for Xcode 14 and iOS 16, .NET 6.0.10 and .NET Core 3.1.30</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2022/10/17/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2022-10-17T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="announcing.net-7-release-candidate-2.net-blog"&gt;Announcing .NET 7 Release Candidate 2 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-dotnet-7-rc-2/"&gt;https://devblogs.microsoft.com/dotnet/announcing-dotnet-7-rc-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 RC2 がリリースされた。&lt;/p&gt;
&lt;p&gt;記事では過去の .NET 7 に関する新機能の記事へのリンクのほか、いくつかの変更について紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;System.Text.Json のソース生成時のリフレクションフォールバックの再有効化方法&lt;/li&gt;
&lt;li&gt;API を正しく使用するための新しいアナライザー
&lt;ul&gt;
&lt;li&gt;Generic Math インターフェースを正しく実装するためのアナライザー&lt;/li&gt;
&lt;li&gt;IntPtr と UIntPtr の組み込みオペレーターの挙動の変更を防止するためのアナライザー&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="announcing-entity-framework-core-7-rc2-json-columns.net-blog"&gt;Announcing Entity Framework Core 7 RC2: JSON Columns - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-ef7-release-candidate-2/"&gt;https://devblogs.microsoft.com/dotnet/announcing-ef7-release-candidate-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core 7 RC2 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは GA に含まれる機能のすべてが含まれ、RC1 から80以上の問題の修正が行われている。&lt;/p&gt;
&lt;p&gt;記事では Entity Framework Core 7 の新機能の JSON カラムへのマッピングについて、定義方法やクエリーなど詳しく紹介している。&lt;/p&gt;
&lt;h3 id="asp.net-core-updates-in.net-7-release-candidate-2.net-blog"&gt;ASP.NET Core updates in .NET 7 Release Candidate 2 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-7-rc-2/"&gt;https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-7-rc-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 RC2 での ASP.NET Core の更新についての記事。&lt;/p&gt;
&lt;p&gt;このリリースでは次の新機能が含まれており、記事ではそれぞれについて解説している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;出力キャッシュの改善&lt;/li&gt;
&lt;li&gt;msal.js (MSAL) を使用した動的な認証要求&lt;/li&gt;
&lt;li&gt;Blazor WebAssembly での認証の診断の改善&lt;/li&gt;
&lt;li&gt;WebAssembly でのマルチスレッディング (試験的)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="announcing.net-maui-support-for-xcode-14-and-ios-16.net-blog"&gt;Announcing .NET MAUI support for Xcode 14 and iOS 16 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-maui-xcode14/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-maui-xcode14/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI が Xcode 14 および iOS 16 をサポートした。&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 と .NET 6 で Xcode 14 と iOS 16 のサポートする .NET MAUI の6番目となるサービスリリース。Visual Studio 2022 17.3 または 17.4 Preview 3 、Visual Studio for Mac は 17.4 Preview 3 での対応。&lt;/p&gt;
&lt;p&gt;なお .NET 7 の MAUI での Xcode 14 サポートは後日(一週間後)となっているため、この時点では .NET 7 の MAUI は RC1 が最新となる。&lt;/p&gt;
&lt;p&gt;記事では Windows デバイスから Mac に接続して iOS のアプリケーションを開発できることを紹介している。&lt;/p&gt;
&lt;h3 id="whats-new-in-system.text.json-in.net-7.net-blog"&gt;What's new in System.Text.Json in .NET 7 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/system-text-json-in-dotnet-7/"&gt;https://devblogs.microsoft.com/dotnet/system-text-json-in-dotnet-7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 の System.Text.Json の新機能についての紹介記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;コントラクトのカスタマイズ
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IJsonTypeInfoResolver&lt;/code&gt; や &lt;code&gt;Modifiers&lt;/code&gt; を使ったシリアライズ/デシリアライズ処理のカスタマイズ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;型階層
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JsonDerivedType&lt;/code&gt; 属性を使用した継承型のシリアライズ/デシリアライズ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JsonPolymorphic&lt;/code&gt; 属性や &lt;code&gt;JsonTypeInfo&lt;/code&gt; を操作することによるポリモーフィズムのカスタマイズ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;必須メンバー (&lt;code&gt;required&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JsonSerializerOptions.Default&lt;/code&gt; の追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Utf8JsonReader.CopyString&lt;/code&gt; の追加&lt;/li&gt;
&lt;li&gt;ソース生成改善
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IAsyncEnumerable&amp;lt;T&amp;gt;&lt;/code&gt; のサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JsonDocument&lt;/code&gt; のサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DateOnly&lt;/code&gt;, &lt;code&gt;TimeOnly&lt;/code&gt; のサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;パフォーマンス改善&lt;/li&gt;
&lt;li&gt;破壊的変更&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="net-october-2022-updates.net-6.0.10-and.net-core-3.1.30.net-blog"&gt;.NET October 2022 Updates – .NET 6.0.10 and .NET Core 3.1.30 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/october-2022-updates/"&gt;https://devblogs.microsoft.com/dotnet/october-2022-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6.0.10 と .NET Core 3.1.30 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースではいくつかの不具合の修正と改善のほか、NuGet に関する脆弱性に対応するセキュリティー修正が含まれている。&lt;/p&gt;
&lt;h3 id="net-framework-october-2022-security-and-quality-rollup.net-blog"&gt;.NET Framework October 2022 Security and Quality Rollup - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-framework-october-2022-security-and-quality-rollup/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-framework-october-2022-security-and-quality-rollup/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework の2022年10月のセキュリティーと累積アップデートがリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースではいくつかの問題の修正と信頼性の向上が含まれている。新しいセキュリティー修正は含まれない。&lt;/p&gt;
&lt;h3 id="azure-static-web-apps-extended-support-for.net-core-3.1-ends-on-3-december-2022-azure-updates-microsoft-azure"&gt;Azure Static Web Apps extended support for .NET Core 3.1 ends on 3 December 2022 | Azure updates | Microsoft Azure&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://azure.microsoft.com/en-us/updates/staticwebappsdotnet3deprecation/"&gt;https://azure.microsoft.com/en-us/updates/staticwebappsdotnet3deprecation/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure Static Web Apps の .NET Core 3.1 の拡張サポートが2022年12月3日に終了する。&lt;/p&gt;
&lt;p&gt;Azure Static Web Apps の関数は Azure Functions 上で動作するため、引き続きサポートとセキュリティー更新を受け取るためには .NET 6 を使用するランタイム v4 への移行が必要となる。&lt;/p&gt;
&lt;h3 id="in-development-day-0-support-for.net-7-azure-updates-microsoft-azure"&gt;In development: Day 0 support for .NET 7 | Azure updates | Microsoft Azure&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://azure.microsoft.com/en-us/updates/in-development-day-0-support-for-net-7/"&gt;https://azure.microsoft.com/en-us/updates/in-development-day-0-support-for-net-7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure App Service での .NET 7 の Day 0 サポート予定のアナウンス。&lt;/p&gt;
&lt;h3 id="cake-v2.3.0-released"&gt;Cake v2.3.0 released&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://cakebuildnet.medium.com/cake-v2-3-0-released-b60746a00555"&gt;https://cakebuildnet.medium.com/cake-v2-3-0-released-b60746a00555&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Cake v2.3 がリリースされた。&lt;/p&gt;
&lt;p&gt;グローバルスクリプトキャッシュの改善やコマンドのエイリアスといった改善が含まれている。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="creadline-qiita"&gt;【C#】コンソールアプリで入力された文字を非表示にしてReadLineする - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/admiralhetare/items/2de677d90c5ce0ab2659"&gt;https://qiita.com/admiralhetare/items/2de677d90c5ce0ab2659&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;パスワード入力のようなエコーバックしない1行入力 (ReadLine) を実現する方法についての記事。&lt;/p&gt;
&lt;h3 id="adding-validation-to-strongly-typed-configuration-objects-using-fluentvalidation"&gt;Adding validation to strongly typed configuration objects using FluentValidation&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/adding-validation-to-strongly-typed-configuration-objects-using-flentvalidation/"&gt;https://andrewlock.net/adding-validation-to-strongly-typed-configuration-objects-using-flentvalidation/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core のような Microsoft.Extensions.Configuration を使用した設定で型付き設定を行う際に FluentValidation で設定値を検証する方法についてのの記事。&lt;/p&gt;
&lt;h3 id="end-to-end-test-a-blazor-app-with-playwright-part-1"&gt;End-to-End test a Blazor App with Playwright [Part 1]&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/younited-tech-blog/end-to-end-test-a-blazor-app-with-playwright-part-1-224e8894c0f3"&gt;https://medium.com/younited-tech-blog/end-to-end-test-a-blazor-app-with-playwright-part-1-224e8894c0f3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor アプリケーションを Playwright で End-to-End テストを行う方法についての記事シリーズ。&lt;/p&gt;
&lt;h3 id="list-in-c-implementation-and-features"&gt;List in C#: implementation and features&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://pvs-studio.com/en/blog/posts/csharp/0995/"&gt;https://pvs-studio.com/en/blog/posts/csharp/0995/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET の &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt; がどのような実装となっていてどのような機能を提供するのかを解説している記事。&lt;/p&gt;
&lt;h3 id="net-6-aws-ssm-parameter-storegeneric-host"&gt;[.NET 6] AWS SSM Parameter StoreをGeneric Hostに登録して使う&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/shimat/articles/affbb2ece0ace8"&gt;https://zenn.dev/shimat/articles/affbb2ece0ace8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AWS Systems Manager Parameter Store にある値を ASP.NET Core のような Generic Host アプリケーションから利用する方法についての記事。&lt;/p&gt;
&lt;h3 id="entity-framework-core-7-strongly-typed-ids-together-with-auto-increment-columns"&gt;Entity Framework Core 7: Strongly Typed Ids Together With Auto-Increment Columns&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://david-masters.medium.com/entity-framework-core-7-strongly-typed-ids-together-with-auto-increment-columns-fd9715e331f3"&gt;https://david-masters.medium.com/entity-framework-core-7-strongly-typed-ids-together-with-auto-increment-columns-fd9715e331f3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core 7 で対応するオートインクリメントなカラムに対する厳密な型を持つ ID を使用することについての記事。&lt;/p&gt;
&lt;h3 id="blazor-life-cycle-events-oversimplified"&gt;Blazor Life Cycle Events: Oversimplified&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://betterprogramming.pub/blazor-life-cycle-events-oversimplified-4b8e1bd5fa4b"&gt;https://betterprogramming.pub/blazor-life-cycle-events-oversimplified-4b8e1bd5fa4b&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor のライフサイクルイベントについて解説している記事。&lt;/p&gt;
&lt;h3 id="developing-asp.net-core-apps-in-docker-live-recompilation"&gt;Developing ASP.NET Core apps in Docker - Live Recompilation&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://tymisko.hashnode.dev/developing-aspnet-core-apps-in-docker-live-recompilation"&gt;https://tymisko.hashnode.dev/developing-aspnet-core-apps-in-docker-live-recompilation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Docker (Docker Compose) で ASP.NET Core アプリケーションを開発する手順についての記事。&lt;/p&gt;
&lt;p&gt;ローカルのソースコードをマウントしてコンテナー内でビルドと実行を行う方法を紹介している。&lt;/p&gt;
&lt;h3 id="asp.net-core-6-record"&gt;[ASP.NET Core 6] モデルバインドでrecordを使うときの注意点&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/shimat/articles/ef69b034cd0499"&gt;https://zenn.dev/shimat/articles/ef69b034cd0499&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 の ASP.NET Core で &lt;code&gt;record&lt;/code&gt; 型をモデルバインドする際に設定する属性(&lt;code&gt;FromForm&lt;/code&gt;, &lt;code&gt;JsonPropertyName&lt;/code&gt; など)で注意すべき点をまとめた記事。&lt;/p&gt;
&lt;h3 id="lessons-learned-on-optimizing.net-on-aws-lambda"&gt;Lessons Learned on Optimizing .NET on AWS Lambda&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/lambdasharp/lessons-learned-on-optimizing-net-on-aws-lambda-2n5m"&gt;https://dev.to/lambdasharp/lessons-learned-on-optimizing-net-on-aws-lambda-2n5m&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AWS Lambda で .NET アプリケーションを実行する際の最適化ポイントのまとめ。&lt;/p&gt;
&lt;h3 id="stripe-payment-gateway-implementation-in-asp.net-core-web-api"&gt;Stripe Payment Gateway Implementation in ASP .NET Core Web API&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://juldhais.net/stripe-payment-gateway-implementation-in-asp-net-core-web-api-359ad44e2b47"&gt;https://juldhais.net/stripe-payment-gateway-implementation-in-asp-net-core-web-api-359ad44e2b47&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core Web API から Stripe の API を使用する方法まとめ。&lt;/p&gt;
&lt;h2 id="section-2"&gt;プレゼンテーション&lt;/h2&gt;
&lt;h3 id="victor-nicollet-ilpack-saving-assemblies-to-disk-dotnetos-conference-2022-youtube"&gt;Victor Nicollet - ILPack: saving assemblies to disk (Dotnetos Conference 2022) - YouTube&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=t_kBLD5D3_4"&gt;https://www.youtube.com/watch?v=t_kBLD5D3_4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Core 以降で動的にアセンブリを保存するためのライブラリー ILPack についての発表。&lt;/p&gt;
&lt;h3 id="kevin-gosse-pushing-c-to-new-places-with-nativeaot-dotnetos-conference-2022-youtube"&gt;Kevin Gosse - Pushing C# to new places with NativeAOT (Dotnetos Conference 2022) - YouTube&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=eE0AbO5_XSw"&gt;https://www.youtube.com/watch?v=eE0AbO5_XSw&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET の NativeAOT でネイティブライブラリーを作ることでいろいろなことができる(.NET プロファイラーや LLDB 拡張、.NET の GC など)という発表。&lt;/p&gt;
&lt;h3 id="krzysztof-stolarz-road-to.net-6-migration-story-of-hope-and-despair-dotnetos-conference-2022-youtube"&gt;Krzysztof Stolarz - Road to .NET 6: migration story of hope and despair (Dotnetos Conference 2022) - YouTube&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=ttsowlY55KM"&gt;https://www.youtube.com/watch?v=ttsowlY55KM&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;高負荷リアルタイムな .NET Framework によるサーバーアプリケーションを .NET に移行した事例についての発表。&lt;/p&gt;
&lt;h2 id="section-3"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="chrisnaswin-pprof-windows.pprof-viewer"&gt;chrisnas/Win-pprof: Windows .pprof viewer&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/chrisnas/Win-pprof"&gt;https://github.com/chrisnas/Win-pprof&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.pprof ファイルを表示するための Windows のビューアー。&lt;/p&gt;
&lt;!-- https://twitter.com/chnasarre/status/1579920371192860672?s=12&amp;t=hC3atrI-NJ1e261jEZ6dEA --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;If you have to look into .pprof files, &lt;a href="https://t.co/LktSgqheaP"&gt;https://t.co/LktSgqheaP&lt;/a&gt; could help: &lt;br&gt;- dotnet-pprof: CLI to dump .pprof files&lt;br&gt;- win-pprof: GUI to navigate into .pprof; focusing on samples, values, labels and call stacks.&lt;br&gt;&lt;br&gt;I&amp;#39;m sharing the tools I&amp;#39;m using everyday to check our profiles. &lt;a href="https://t.co/FPlpRFsCtn"&gt;pic.twitter.com/FPlpRFsCtn&lt;/a&gt;&lt;/p&gt;&amp;mdash; Christophe Nasarre (&amp;#64;chnasarre) &lt;a href="https://twitter.com/chnasarre/status/1579920371192860672?ref_src=twsrc%5Etfw"&gt;October 11, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="section-4"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-5"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/egorbo/status/1579828358627479552?s=12&amp;t=4j3EARsK3is33HPAds3gTg --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Here is roughly how Tiered Compilation works in .NET. Now guess why I added two extra instructions to the call-counting stub (size regression!) and detected benefits from that in web apps? 🙃 HINT: all calls to B() hit the same location of memory to decrement call-counter for B() &lt;a href="https://t.co/iCIpyF8OMw"&gt;pic.twitter.com/iCIpyF8OMw&lt;/a&gt;&lt;/p&gt;&amp;mdash; Egor Bogatov (&amp;#64;EgorBo) &lt;a href="https://twitter.com/EgorBo/status/1579828358627479552?ref_src=twsrc%5Etfw"&gt;October 11, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;.NET の階層化コンパイルがどのようになっているかの大雑把な図で、何故2つの呼び出しが追加されていて Web アプリにはどういうメリットがあるのかという話。異なるスレッドで同じメソッドを実行するパターン、つまり異なるコア(あるいは NUMA)から同じメモリー位置にアクセスする場合にキャッシュスラッシングを減らすためらしい。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="jit-implement-tail-merging-by-andyayersms-pull-request-77103-dotnetruntime"&gt;JIT: implement tail merging by AndyAyersMS · Pull Request #77103 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/77103"&gt;https://github.com/dotnet/runtime/pull/77103&lt;/a&gt;&lt;/p&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2022/10/11/updates</id>
		<title>2022-10-11: Console.ReadKey improvements, Bing Ads Campaign Platform – Journey to .NET 6</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2022/10/11/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2022-10-11T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="console.readkey-improvements-in.net-7.net-blog"&gt;Console.ReadKey improvements in .NET 7 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/console-readkey-improvements-in-net-7/"&gt;https://devblogs.microsoft.com/dotnet/console-readkey-improvements-in-net-7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unix/Linux での &lt;code&gt;Console.ReadKey&lt;/code&gt; の挙動をより良いものにするために .NET 7 で書き直したこととその変更の解説記事。&lt;/p&gt;
&lt;p&gt;以前から Unix/Linux での &lt;code&gt;Console.ReadKey&lt;/code&gt; の挙動には入力されたキーの組み合わせや修飾キーの取り扱いでバグとなる挙動がいくつも確認されてきていた。.NET 7 ではコードを新たに書き換えこの問題に対処している。&lt;/p&gt;
&lt;p&gt;記事では書き換えの前に自動テストカバレッジを増やすために取った手法、内部でのシステムコールの呼び出し、古い実装と新しい実装について書かれている。&lt;/p&gt;
&lt;p&gt;また .NET 6 互換の挙動に戻す runtimeconfig.json と環境変数の設定も紹介している。これらの互換動作は .NET 8 で削除される予定。&lt;/p&gt;
&lt;h3 id="bing-ads-campaign-platform-journey-to.net-6.net-blog"&gt;Bing Ads Campaign Platform – Journey to .NET 6 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/bing-ads-campaign-platform-journey-to-dotnet-6/"&gt;https://devblogs.microsoft.com/dotnet/bing-ads-campaign-platform-journey-to-dotnet-6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Bing の検索広告のキャンペーンプラットフォームを .NET 6 (+ AKS) へと移行した事例紹介。&lt;/p&gt;
&lt;p&gt;プラットフォームは秒間数千のリクエストを 100ms 未満で処理する数十の分散サービスで構築されている。コードベースでは .cspro は600を超え、500を超える NuGet パッケージの依存を持つという規模感であり、元々の実行環境は .NET Framework 4.6 と(単に&amp;quot;リフト&amp;quot;した) Windows 仮想マシンでホストする WCF による SOAP サービスだったとのこと。&lt;/p&gt;
&lt;p&gt;記事では新しい .NET に移行する理由と移行プロセス、課題、移行の結果についてそれぞれ紹介している。&lt;/p&gt;
&lt;p&gt;.NET に移行する理由は大きく次の5つをあげている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;コンテナーを使うようなクロスプラットフォーム化&lt;/li&gt;
&lt;li&gt;ハイパフォーマンスや言語の機能、.NET Framework 進化の停止といった面からの .NET 開発の未来&lt;/li&gt;
&lt;li&gt;改善のイテレーションが高速であることによるイノベーションの摩擦の軽減&lt;/li&gt;
&lt;li&gt;オープンソース&lt;/li&gt;
&lt;li&gt;CLI ツールや SDK スタイルプロジェクト、バインディングリダイレクトの廃止のような優れたツーリング&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;移行プロセスはライブラリーは &amp;quot;.NET Framework 4.6 → .NET Framework 4.7 → .NET Standard 2.0&amp;quot;、アプリケーションは .NET Framework 4.6 → .NET Framework 4.7 → .NET Core 3.1 → .NET 5 → .NET 6&amp;quot; という順番で移行していった。.NET Framework 4.6 は .NET Standard を完全にサポートしておらず .NET Standard への移行は簡単ではなかったとのこと。&lt;/p&gt;
&lt;p&gt;移行する中での課題とその解決について幾つか紹介している。&lt;/p&gt;
&lt;p&gt;まず、プロジェクトは数多くの NuGet パッケージに依存しているためパッケージの更新や古いライブラリーからの置き換えが発生すること。互換性のないパッケージは再パッケージして .NET Standard をサポートした形で社内パッケージフィードに公開したり、ソースの存在しないパッケージであっても逆コンパイルしてパッチすることで .NET Standard 互換として解決した。&lt;/p&gt;
&lt;p&gt;バインディングリダイレクトの問題は PackageReference 方式へと移行したことでダイアモンド依存問題を解決した。大量の .csproj があるため SDK スタイルに変換するツールを使用して移行を達成した。その後 .NET チームからは try-convert と呼ばれる同様のツールがリリースされた。また、パッケージ依存の複雑性を下げるためにパッケージのバージョン管理を一元化するようにしたとのこと。(記事でリンクされている &lt;a href="https://github.com/Microsoft/MSBuildSdks/tree/main/src/CentralPackageVersions"&gt;Microsoft.Build.CentralPackageVersions&lt;/a&gt; は&lt;a href="https://devblogs.microsoft.com/nuget/introducing-central-package-management/"&gt;NuGet の Central Package Management&lt;/a&gt; の前身と思われる)&lt;/p&gt;
&lt;p&gt;最後に WCF への依存について。サービスは WCF による SOAP サービスで構築されていて、利用者に公開している都合 gRPC のような物への移行はできないので最終的には WCF のサブセットである CoreWCF 作成し、移行をしたとのこと。以降の過程では .NET Framework と .NET のコードが共存することもあり、マルチターゲット化するなどの苦労はある程度あった様子。&lt;/p&gt;
&lt;p&gt;.NET への移行の結果としてレイテンシーは大きく改善され、WCF から CoreWCF に移行した結果メモリーの使用量を40-50%ほど削減するといった大きな効果があった。&lt;/p&gt;
&lt;p&gt;まとめとして .NET 6 への移行は大規模で痛みを伴うものではあったが価値があったと評価し、大規模なコードベースからの移行の教訓として次のポイントをあげている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.NET Framework 4.7 か .NET Framework 4.8 に移行する&lt;/li&gt;
&lt;li&gt;何事を始める前にすべてのプロジェクトを SDK スタイルに変換し、PackageReference を使用するようにする&lt;/li&gt;
&lt;li&gt;.NET Standard を使用して .NET Framework と .NET の両方のプロジェクトでコードを共有できるようにする&lt;/li&gt;
&lt;li&gt;パッケージの一元管理を使用して新しい NuGet パッケージへの移行を簡単にする&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="comparing-files-in-visual-studio-visual-studio-blog"&gt;Comparing files in Visual Studio - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/comparing-files-in-visual-studio/"&gt;https://devblogs.microsoft.com/visualstudio/comparing-files-in-visual-studio/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio にファイル比較機能を実装することを検討していることについて。&lt;/p&gt;
&lt;p&gt;Visual Studio では従来任意のファイルを選択してのファイル比較を行う機能を提供して来なかったが検討を始めた。まずは File Differ という機能拡張から機能の実験開始していて記事ではその拡張の機能を紹介している。&lt;/p&gt;
&lt;p&gt;興味がある場合はフィードバックや投票を行ってほしいとのこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=MadsKristensen.FileDiffer"&gt;File Differ - Visual Studio Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developercommunity.visualstudio.com/t/is-there-a-way-to-compare-two-files-from-solution/619706"&gt;[NEW] Is there a way to compare two files from solution explorer? - Visual Studio Feedback&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="authentication-for.net-maui-apps-with-msal.net.net-blog"&gt;Authentication for .NET MAUI Apps with MSAL.NET - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/authentication-in-dotnet-maui-apps-msal/"&gt;https://devblogs.microsoft.com/dotnet/authentication-in-dotnet-maui-apps-msal/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoft Identity.Client 4.47.0 (MSAL.NET) で .NET MAUI をサポートしたというアナウンス。&lt;/p&gt;
&lt;h3 id="announcing-the.net-maui-community-toolkit-v1.3.net-blog"&gt;Announcing the .NET MAUI Community Toolkit v1.3 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-the-dotnet-maui-community-toolkit-v13/"&gt;https://devblogs.microsoft.com/dotnet/announcing-the-dotnet-maui-community-toolkit-v13/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI Community Toolkit v1.3 がリリースされた。&lt;/p&gt;
&lt;p&gt;ステータスバーのスタイリング、Gravatar イメージソース、アニメーションの強化、ソースリンクの対応といったものが含まれている。&lt;/p&gt;
&lt;h3 id="release-11.0.0-preview-2-avaloniauiavalonia"&gt;Release 11.0.0 Preview 2 · AvaloniaUI/Avalonia&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/AvaloniaUI/Avalonia/releases/tag/11.0.0-preview2"&gt;https://github.com/AvaloniaUI/Avalonia/releases/tag/11.0.0-preview2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Avalonia 11.0.0 Preview 2 がリリースされた。&lt;/p&gt;
&lt;p&gt;いくつかの安定性の向上や様々な修正などが含まれている。&lt;/p&gt;
&lt;h3 id="rider-2022.3-eap-2-new-ui-improved-unit-testing-better-dynamic-program-analysis-and-more.the.net-tools-blog"&gt;Rider 2022.3 EAP 2: New UI, Improved Unit Testing, Better Dynamic Program Analysis and More. | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/10/07/rider-2022-3-eap-2/"&gt;https://blog.jetbrains.com/dotnet/2022/10/07/rider-2022-3-eap-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider 2022.3 EAP 2 がリリースされた。&lt;/p&gt;
&lt;p&gt;新しい IntelliJ ベース IDE の UI、Search Everywhere やツールウィンドウ、ソリューションエクスプローラーの改善、Rider 組み込みの dotMemory の Linux, macOS への対応、C# 11 への対応、ユニットテストエクスプローラーの改善、デバッガーのパフォーマンス改善、.NET MAUI サポート、IIS での起動対応、動的プログラム解析 (データベースアクセス)など。&lt;/p&gt;
&lt;h3 id="announcing-nuget-packagereference-support-for-ccli-msbuild-projects-targeting.net-core-and.net-5-or-higher-c-team-blog"&gt;Announcing NuGet PackageReference support for C++/CLI MSBuild projects targeting .NET Core and .NET 5 or higher - C++ Team Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/cppblog/announcing-nuget-packagereference-support-for-c-cli-msbuild-projects-targeting-net-core/"&gt;https://devblogs.microsoft.com/cppblog/announcing-nuget-packagereference-support-for-c-cli-msbuild-projects-targeting-net-core/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 version 17.3 以降の .NET Core または .NET 5 以降をターゲットとする C++/CLI MSBuild プロジェクトでは NuGet パッケージの参照が可能になったというアナウンス。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="xamarin.forms-maui"&gt;Xamarin.Formsライブラリを MAUIに移植した話&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://speakerdeck.com/muak/xamarin-dot-formsraiburariwo-mauiniyi-zhi-sitahua"&gt;https://speakerdeck.com/muak/xamarin-dot-formsraiburariwo-mauiniyi-zhi-sitahua&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Xamarin.Forms 向けのライブラリーを .NET MAUI に移植した話のスライド。&lt;/p&gt;
&lt;p&gt;Xamarin.Forms と .NET MAUI の実装方法の違いや Tips 等を紹介している。&lt;/p&gt;
&lt;h3 id="maui"&gt;MAUI の現状と進化ポイント | ドクセル&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.docswell.com/s/hiro128_777/KW79X5-2022-09-30-184910"&gt;https://www.docswell.com/s/hiro128_777/KW79X5-2022-09-30-184910&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI の Xamarin.Forms とのアーキテクチャーの違いや、現状の各種ツーリングのサポート状態などをまとめたスライド。&lt;/p&gt;
&lt;h3 id="net-annotated-monthly-october-2022-the.net-tools-blog"&gt;.NET Annotated Monthly | October 2022 | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/10/06/net-annotated-monthly-october-2022/"&gt;https://blog.jetbrains.com/dotnet/2022/10/06/net-annotated-monthly-october-2022/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JetBrains による2022年10月の .NET 関連情報まとめ記事。&lt;/p&gt;
&lt;h3 id="c.net-namedpipe-ipc-wpf-qiita"&gt;[C#] .NET で NamedPipe を使ってプロセス間通信 (IPC) を行う (WPFサンプル) - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/kobayashi_stmn/items/7de42805eba009deebaa"&gt;https://qiita.com/kobayashi_stmn/items/7de42805eba009deebaa&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 の WPF アプリケーションで NamedPipe を使用してプロセス間通信を行う方法についての記事。&lt;/p&gt;
&lt;h3 id="visual-studios-azure-marketplace-images-now-support-microsoft-dev-box-visual-studio-blog"&gt;Visual Studio’s Azure Marketplace images now support Microsoft Dev Box - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studios-azure-marketplace-images-now-support-microsoft-dev-box/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studios-azure-marketplace-images-now-support-microsoft-dev-box/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure Marketplace の Visual Studio イメージが Microsoft Dev Box でサポートされたというアナウンス。&lt;/p&gt;
&lt;h3 id="adding-validation-to-strongly-typed-configuration-objects-in.net-6"&gt;Adding validation to strongly typed configuration objects in .NET 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/adding-validation-to-strongly-typed-configuration-objects-in-dotnet-6/"&gt;https://andrewlock.net/adding-validation-to-strongly-typed-configuration-objects-in-dotnet-6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 の Microsoft.Extensions.Configuration で厳密に型指定された構成オブジェクトに検証を追加する方法についての記事。&lt;/p&gt;
&lt;h3 id="opentelemetry.net-8-azure-service-bus"&gt;OpenTelemetry .NETを理解する (8) 手動でのトレースの接続例: Azure Service Busを経由したアプリ間でトレースをつなげる - 銀の光と碧い空&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://tech.tanaka733.net/entry/2022/10/opentelemetry-dotnet-08"&gt;https://tech.tanaka733.net/entry/2022/10/opentelemetry-dotnet-08&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure Service Bus を使用したサービス間でのリクエストのトレースを繋げる方法についての記事。&lt;/p&gt;
&lt;h3 id="using.net-7s-blazor-custom-elements-to-render-dynamic-content"&gt;Using .NET 7's Blazor Custom Elements to render dynamic content&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://jonhilton.net/blazor-custom-elements/"&gt;https://jonhilton.net/blazor-custom-elements/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Custom Elements を使用して Blazor で動的な要素を構築する方法についての記事。&lt;/p&gt;
&lt;h3 id="how-we-achieved-5x-faster-pipeline-execution-by-removing-closure-allocations"&gt;How we achieved 5X faster pipeline execution by removing closure allocations&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://particular.net/blog/pipeline-and-closure-allocations"&gt;https://particular.net/blog/pipeline-and-closure-allocations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NServiceBus でラムダのキャプチャー(アロケーション)を削減することでパフォーマンスを改善したという記事。&lt;/p&gt;
&lt;h3 id="net-mauiandroid"&gt;.NET MAUIだってキーボード開きたい！(Android)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/test_myname/articles/d982b67cf0615f"&gt;https://zenn.dev/test_myname/articles/d982b67cf0615f&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI で Android のスクリーンキーボードを表示/非表示にする方法についての記事。&lt;/p&gt;
&lt;h3 id="blazor-wasm-custom-404-page-on-gh-pages"&gt;Blazor WASM Custom 404 Page on GH Pages&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/dotnet/blazor-wasm-custom-404-page-on-gh-pages-1o99"&gt;https://dev.to/dotnet/blazor-wasm-custom-404-page-on-gh-pages-1o99&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor WebAssembly を GitHub Pages でホストしたときに存在しないページへのアクセス時にカスタムのエラーページを表示する方法についての記事。&lt;/p&gt;
&lt;h3 id="from-junior-to-genius-an-optimization-story-by-israel-lot-oct-2022-itnext"&gt;From Junior to Genius: an optimization story | by Israel Lot | Oct, 2022 | ITNEXT&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://itnext.io/from-junior-to-genius-an-optimization-story-ab20afc8159d"&gt;https://itnext.io/from-junior-to-genius-an-optimization-story-ab20afc8159d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;32bit チェックサムを計算するコードを元に様々な段階を追ってチューニングしていくという記事。&lt;/p&gt;
&lt;p&gt;記事では素朴な実装から unsafe な実装へ、トリッキーな実装やシンプルな実装、SIMD を使用した実装へと進んで最終的に85倍の高速化を行っている。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="github-xoofxantlr4ast-antlr4ast-is-a.net-library-that-provides-a-parser-and-abstract-syntax-tree-ast-for-antlr4g4-files"&gt;GitHub - xoofx/Antlr4Ast: Antlr4Ast is a .NET library that provides a parser and abstract syntax tree (AST) for ANTLR4/g4 files.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/xoofx/Antlr4Ast"&gt;https://github.com/xoofx/Antlr4Ast&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ANTLR4/g4 ファイルのパースを行って AST を作るライブラリー。&lt;/p&gt;
&lt;!-- https://twitter.com/xoofx/status/1579135102885715969?s=12&amp;t=sNYyiHhZFM_OqXNzHAwD7A --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Hey .NET folks, it&amp;#39;s a rainy Sunday here so I just released a new .NET library &lt;a href="https://t.co/3tlFpUlJnt"&gt;https://t.co/3tlFpUlJnt&lt;/a&gt; to parse ANTLR4/g4 files into a lightweight AST useful for codegen scenarios.&lt;br&gt;I&amp;#39;ll use this library for &lt;a href="https://twitter.com/hashtag/starklang?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#starklang&lt;/a&gt; to generate the data oriented syntax from an ANTLR g4 spec! 🏎️&lt;/p&gt;&amp;mdash; Alexandre Mutel (&amp;#64;xoofx) &lt;a href="https://twitter.com/xoofx/status/1579135102885715969?ref_src=twsrc%5Etfw"&gt;October 9, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="disruptor-netdisruptor-net-port-of-lmax-disruptor-to.net"&gt;disruptor-net/Disruptor-net: Port of LMAX Disruptor to .NET&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/disruptor-net/Disruptor-net"&gt;https://github.com/disruptor-net/Disruptor-net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ハイパフォーマンスなスレッド間のメッセージパッシングフレームワークライブラリー。&lt;/p&gt;
&lt;h3 id="bchavezbogus-a-simple-fake-data-generator-for-c-f-and-vb.net.based-on-and-ported-from-the-famed-faker.js"&gt;bchavez/Bogus: A simple fake data generator for C#, F#, and VB.NET. Based on and ported from the famed faker.js.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/bchavez/Bogus"&gt;https://github.com/bchavez/Bogus&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;faker.js を移植した疑似データ生成ライブラリー。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://juldhais.net/generating-random-dummy-data-using-bogus-e1f57eecf90b"&gt;Generating Random Dummy Data using Bogus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/linqpad/status/1576879508078366720?s=12&amp;t=HKDKQV9LxTi47JU-CPxyEg --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Performance-testing with the industrial-grade &lt;a href="https://twitter.com/hashtag/BenchmarkDotNet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#BenchmarkDotNet&lt;/a&gt; in LINQPad is now as simple as selecting your code and pressing Ctrl+Shift+B. Full integration, with customizable real-time output! &lt;a href="https://t.co/5mvykpZBX2"&gt;https://t.co/5mvykpZBX2&lt;/a&gt; &lt;a href="https://t.co/PaleWcQBUd"&gt;pic.twitter.com/PaleWcQBUd&lt;/a&gt;&lt;/p&gt;&amp;mdash; LINQPad·Joe Albahari (&amp;#64;linqpad) &lt;a href="https://twitter.com/linqpad/status/1576879508078366720?ref_src=twsrc%5Etfw"&gt;October 3, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;LINQPad 上で Ctrl+Shift+B を押すことで BenchmarkDotNet で即ベンチマークを取れるという統合機能が導入されるという話。&lt;/p&gt;
&lt;!-- https://twitter.com/egorbo/status/1579474949152313347?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Some pieces of FOH (Frozen Object Heap) were already merged to .NET 8.0. In this example we bake a direct reference to typeof(x) object in jit codegen and omit the write-barrier 🥳 &lt;a href="https://t.co/qNArNRxhYC"&gt;pic.twitter.com/qNArNRxhYC&lt;/a&gt;&lt;/p&gt;&amp;mdash; Egor Bogatov (&amp;#64;EgorBo) &lt;a href="https://twitter.com/EgorBo/status/1579474949152313347?ref_src=twsrc%5Etfw"&gt;October 10, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;FOH (Frozen Object Heap) のいくつの部分が .NET 8 にマージされ、&lt;code&gt;typeof(x)&lt;/code&gt; のようなものは JIT のコード生成時にライトバリアなしに直接参照を扱えるようになれるという話。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="initial-green-thread-prototype-by-davidwrighton-pull-request-2002-dotnetruntimelab"&gt;Initial green thread prototype by davidwrighton · Pull Request #2002 · dotnet/runtimelab&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtimelab/pull/2002"&gt;https://github.com/dotnet/runtimelab/pull/2002&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;runtimelab におけるグリーンスレッドのプロトタイプ実装の PR。&lt;/p&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2022/10/03/updates</id>
		<title>2022-10-03: Experimental WebTransport over HTTP/3 support, .NET 6 Migration Journeys</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2022/10/03/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2022-10-03T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="experimental-webtransport-over-http3-support-in-kestrel.net-blog"&gt;Experimental WebTransport over HTTP/3 support in Kestrel - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/experimental-webtransport-over-http-3-support-in-kestrel/"&gt;https://devblogs.microsoft.com/dotnet/experimental-webtransport-over-http-3-support-in-kestrel/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Kestrel での WebTransport over HTTP/3 の実験的サポートについての記事。&lt;/p&gt;
&lt;p&gt;.NET 7 RC 1 の Kestrel で WebTransport over HTTP/3 の実験的サポートが導入された。WebTransport は UDP を使用する QUIC と HTTP/3 に基づいたストリーミング接続で、従来までの HTTP/2 での一つの接続による WebSocket の複数ストリームと異なり、あるストリームがパケットドロップ等の理由でブロックされた場合でも他のストリームがブロックされるといったことを避けられるといったメリットがある。&lt;/p&gt;
&lt;p&gt;WebTransport を有効にするにはプロジェクトファイル (.csproj) で実験的機能の設定を有効化と、WebHost で HTTP/3 をリッスンする必要がある。&lt;/p&gt;
&lt;h3 id="microsoft-teams-infrastructure-and-azure-communication-services-journey-to.net-6.net-blog"&gt;Microsoft Teams’ Infrastructure and Azure Communication Services’ Journey to .NET 6 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/microsoft-teams-infrastructure-and-azure-communication-services-journey-to-dotnet-6/"&gt;https://devblogs.microsoft.com/dotnet/microsoft-teams-infrastructure-and-azure-communication-services-journey-to-dotnet-6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoft Teams と Intelligent Conversation and Communications Cloud (IC3) と呼ばれるリアルタイム通信会話の基盤を .NET Framework から .NET 6 へと移行した事例の紹介。&lt;/p&gt;
&lt;p&gt;動機として Azure のコスト削減、パフォーマンス向上、サービスとネットワークのモダナイゼーション、エンジニアリングの生産性の向上をあげている。&lt;/p&gt;
&lt;p&gt;IC3 は200を超えるマイクロサービスで構成され、現在は1/3以上のサービスが .NET 6 で実行されている。以降のアプローチとして2つのマイクロサービスでアプローチの構築と検証、基盤のサポートとライブラリーの更新を行い、前提と移行手順を検証したのち、残りのサービスに展開した。&lt;/p&gt;
&lt;p&gt;その際効率の向上の測定のため Q-Factor 分析を行ったとのこと。Q-Factor とは &lt;code&gt;Q=(合計作業量)/(合計使用率)&lt;/code&gt; で導き出される値で、インスタンスが一定期間の使用率あたりに可能な仕事量を表すもので、ここでは CPU を使用率として、リクエスト数を作業量として定義して計測している(つまり 1,000 reqs を CPU 50% で処理した場合は Q = 2,000 で、2,000 reqs を CPU 50% で処理できれば Q = 4,000 となる、といった形で比較できる)。&lt;/p&gt;
&lt;p&gt;記事ではマイクロサービスのいくつかのドメインでの結果を紹介している。&lt;/p&gt;
&lt;p&gt;メッセージングドメインの API サービスを .NET 6 に移行した際の結果としては大きくは CPU 使用率の削減、Azure の支出の削減、Azure のコンピューティングのコストの削減の効果があった。現在 Dynamic PGO を適用してさらなるコスト削減を目指しているところ。&lt;/p&gt;
&lt;p&gt;次に通話ドメインのブローカーサービスを .NET 6 に移行した結果の紹介で同様に CPU コアの削減と Azure の支出の削減、API レイテンシーの向上の効果があった。CPU 使用率の削減は当初は .NET Core 3.1 と .NET Framework でのベンチマークの結果、.NET Core のほうが高かったがいくつかの最適化を行うことで .NET Core でより良いパフォーマンスが得られ、.NET 6 へ移行しボトルネックを特定できる仕組みなどを用意した結果、最終的に大幅な改善が得られた。レイテンシーは API によっては 10ms 前後から 5ms 前後へと平均 55% の改善が得られたとのこと。&lt;/p&gt;
&lt;p&gt;最後は会議ドメインについて。会議仮想アシスタントと会議自動応答サービスが .NET 6 へと移行され、会議自動応答サービスでの結果を紹介している。ここでも CPU コアの大きな削減 (98%) や Azure の支出の削減、CPU 使用率の削減や応答時間の短縮といった効果があったとのこと。&lt;/p&gt;
&lt;h3 id="microsoft-commerces.net-6-migration-journey.net-blog"&gt;Microsoft Commerce's .NET 6 Migration Journey - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/microsoft-commerce-dotnet-6-migration-journey/"&gt;https://devblogs.microsoft.com/dotnet/microsoft-commerce-dotnet-6-migration-journey/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoft Commerce という製品やサービスのカタログからライセンス情報の保持、税額の計算などビジネス、コンシューマー問わず Microsoft の取引にかかわるサービスのセットで .NET 6 の移行を行った事例紹介。&lt;/p&gt;
&lt;p&gt;記事では Microsoft Commerce のグローバルルックアップサービス (GLS)と呼ばれる、サービスを分割し、ユーザーのデータの場所を近さに応じてマッピングするサービスを移行した例を紹介している。&lt;/p&gt;
&lt;p&gt;移行には .NET Framework から .NET Core に加え、実行プラットフォームを Windows から Linux (Kubernetes) へ移す必要になった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows から Linux&lt;/li&gt;
&lt;li&gt;.NET Framework から .NET Core (3.1 あるいは .NET 5、現在は .NET 6)&lt;/li&gt;
&lt;li&gt;コンテナーと Kubernetes へのプラットフォームシフト (VM からの脱却)&lt;/li&gt;
&lt;li&gt;ビルドとリリースシステムの変更によりセキュリティーおよびコンプライアンスの向上、コンテナー化されたアプリケーションをサポート&lt;/li&gt;
&lt;li&gt;移行に伴うプラットフォームと .NET の拡張と改善の利用とパートナーの依存関係を含むメリットの享受&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;移行の結果として大きなコストの削減と CPU コアの削減といったコストの削減があったが、.NET 以外の様々な変更も含むため、より具体的な .NET Framework から .NET Core への移行による効果例を探した結果、サービスの待ち時間の大幅な短縮といった効果が見られたとしている。&lt;/p&gt;
&lt;p&gt;さらに .NET 5 から 6 への移行も行われ、スレッドプールの改善、接続管理の改善、ランタイム内部の例外の削減といった効果が見られたとのこと。&lt;/p&gt;
&lt;p&gt;記事では移行に関する知見がいくつか紹介されている。&lt;/p&gt;
&lt;p&gt;依存関係のマッピングと移行経路の評価(.NET 機能への置き換え、新しい依存関係への置き換え、依存関係を使用しての移行、独自の実装への置き換え)には広範囲の作業が必要となり時間をかけている。&lt;/p&gt;
&lt;p&gt;また移行時に独自ソリューションを .NET のベストプラクティスへの置き換えを試みたこと。例えばオブジェクトプーリングの機構は ObjectPool クラスを使用する、RecyclableMemoryStream ライブラリーを使用するといった形で独自実装からの置き換えを、APM ベースの非同期モデルは TAP へと変換するといった形での対応を行った。&lt;/p&gt;
&lt;p&gt;サービスは .NET Core へと移行して、Windows から Linux に移行することで Linux で動作させるために必要な対応が必要となった。&amp;quot;Windows 前提&amp;quot; であることはビルド、ツール、監視やトラブルシューティングといった部分でもぐりこむことがある。例えばフォルダーのスラッシュ(&lt;code&gt;/&lt;/code&gt; と &lt;code&gt;\&lt;/code&gt;) や COM の依存、Windows API の使用といった様々であり、これらはプラットフォーム依存しない形に変更する必要がある。サービスを複数のプラットフォームで End-to-End で早期にテストすることで見つけ出すことが重要であること。&lt;/p&gt;
&lt;p&gt;HTTP.sys から Kestrel への移行により Linux と Kubernetes での動作とクリーンなコードへと代わり、インメモリーキャッシュのために Win32 ファイル API を使用してファイルシステムへの読み書きを行っていたコードを UnmanagedMemoryStream へと置き換えるといったことをしている。&lt;/p&gt;
&lt;p&gt;最後にクロスプラットフォームによるツーリングについて。使い慣れた Windows のデバッグや調査のためのツールが .NET Core や Linux でも動作するわけではないことから、 .NET の標準ツール (&lt;code&gt;dotnet counters&lt;/code&gt;, &lt;code&gt;dotnet dump&lt;/code&gt;, &lt;code&gt;dotnet trace&lt;/code&gt; など) に関する知識を溜めたとのこと。新しく使えるようになったツールとして .NET メトリクスサイドカーがあり、.NET 6 移行の &lt;code&gt;dotnet monitor&lt;/code&gt; を Docker イメージに含めサイドカーとして動作させることで稼働中のプロセスのメトリクスやダンプ、トレースの取得が可能となった。&lt;/p&gt;
&lt;h3 id="fall-2022-updates-for-xamarin-hello-ios-16-and-android-13-xamarin-blog"&gt;Fall 2022 Updates for Xamarin, Hello iOS 16 and Android 13 - Xamarin Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/xamarin/xamarin-ios-16-android-13-updates/"&gt;https://devblogs.microsoft.com/xamarin/xamarin-ios-16-android-13-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Xamarin の2022年秋のアップデートのアナウンス。&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.3.5 と Visual Studio for Mac 2022 17.3.6 で Xamarin が iOS 16 と Android 13 に対応した。&lt;/p&gt;
&lt;p&gt;Xamarin SDK は2024年5月1日までのサポートとなり、最終的なプラットフォームバージョンは iOS 16 と Android 13 となる。これ以降のバージョンについては .NET の一部として提供されるため移行が必要となる。&lt;/p&gt;
&lt;p&gt;記事では .NET 6 へのアップグレードについてとロードマップを改めて紹介している。&lt;/p&gt;
&lt;h3 id="visual-studio-for-mac-17.4-preview-2.1-is-now-available-visual-studio-blog"&gt;Visual Studio for Mac 17.4 Preview 2.1 is now available - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-for-mac-17-4-preview-2-1-is-now-available/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-for-mac-17-4-preview-2-1-is-now-available/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio for Mac 17.4 Preview 2.1 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースではデバッグ中のワンクリックでのリスタート、エディターのドラッグアンドドロップによるサイドバイサイドのようなシェル体験の改善、エディターの C# 11 に関する機能のサポートやハイライティング、行間設定といった改善のほか、Apple Silicon 環境へのインストールに Rosetta が不要となった。&lt;/p&gt;
&lt;h3 id="use.net-from-any-javascript-app-in.net-7.net-blog"&gt;Use .NET from any JavaScript app in .NET 7 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/use-net-7-from-any-javascript-app-in-net-7/"&gt;https://devblogs.microsoft.com/dotnet/use-net-7-from-any-javascript-app-in-net-7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 で対応する JavaScript ベースのアプリケーションから .NET を WebAssembly のアプリケーションとして利用できるようになる仕組みについての記事。&lt;/p&gt;
&lt;p&gt;記事では JavaScript のサンプルプロジェクト TodoMVC に .NET WebAssembly で一部実装を置き換えるという例を紹介している。&lt;/p&gt;
&lt;h3 id="rider-2022.3-early-access-program-is-now-open-the.net-tools-blog"&gt;Rider 2022.3 Early Access Program Is Now Open | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/09/26/rider-2022-3-early-access-program/"&gt;https://blog.jetbrains.com/dotnet/2022/09/26/rider-2022-3-early-access-program/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider 2022.3 EAP が公開された。&lt;/p&gt;
&lt;p&gt;このリリースでは起動パフォーマンスの改善や C# での Language Injection のサポートの強化、NuGet Central Package Management のサポートやホットリロードの改善、IL Viewer や UI/UX の改善などが含まれる。&lt;/p&gt;
&lt;h3 id="resharper-2022.3-early-access-program-is-open-the.net-tools-blog"&gt;ReSharper 2022.3 Early Access Program Is Open! | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/09/26/resharper-2022-3-early-access-program/"&gt;https://blog.jetbrains.com/dotnet/2022/09/26/resharper-2022-3-early-access-program/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper 2022.3 EAP が公開された。&lt;/p&gt;
&lt;p&gt;このリリースでは C# 11 の Raw String リテラル無いの Language Injection のサポートなどが追加されている。&lt;/p&gt;
&lt;h3 id="release-v12.0.0-automapperautomapper"&gt;Release v12.0.0 · AutoMapper/AutoMapper&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/AutoMapper/AutoMapper/releases/tag/v12.0.0"&gt;https://github.com/AutoMapper/AutoMapper/releases/tag/v12.0.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AutoMapper v12.0.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;いくつかの不具合の修正と改善が行われている。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="nuget-season-of-giving-the-nuget-blog"&gt;NuGet Season of Giving - The NuGet Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/nuget/nuget-season-of-giving/"&gt;https://devblogs.microsoft.com/nuget/nuget-season-of-giving/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NuGet リポジトリーに貢献を待っているという記事。&lt;/p&gt;
&lt;p&gt;10月は Hacktoberfest が開催され、NuGet も参加しているためコミュニティーからの貢献を呼び掛けている。&lt;/p&gt;
&lt;h3 id="net-core-3.1-windows-update-at-se"&gt;.NET Core 3.1 以降を Windows Update の更新対象とする at SE の雑記&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.engineer-memo.com/2022/09/28/net-core-3-1-%E4%BB%A5%E9%99%8D%E3%82%92-windows-update-%E3%81%AE%E6%9B%B4%E6%96%B0%E5%AF%BE%E8%B1%A1%E3%81%A8%E3%81%99%E3%82%8B/"&gt;https://blog.engineer-memo.com/2022/09/28/net-core-3-1-%e4%bb%a5%e9%99%8d%e3%82%92-windows-update-%e3%81%ae%e6%9b%b4%e6%96%b0%e5%af%be%e8%b1%a1%e3%81%a8%e3%81%99%e3%82%8b/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows Server で .NET Core 3.1 または .NET 5 以降の更新を Windows Update から受け取る設定についての記事。&lt;/p&gt;
&lt;h3 id="netcore-qiita"&gt;.NETCoreでマルチプラットフォームを対象にした画像処理 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/karuakun/items/319b78a41cd0e9fa5f07"&gt;https://qiita.com/karuakun/items/319b78a41cd0e9fa5f07&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Core 以降で画像処理を行うためのライブラリーを紹介している記事。&lt;/p&gt;
&lt;p&gt;記事では System.Drawing.Common, ImageSharp, SkiaSharp の3つを紹介している。&lt;/p&gt;
&lt;h3 id="migrating-from-asp.net-to-asp.net-core-part-4.net-blog"&gt;Migrating from ASP.NET to ASP.NET Core (Part 4) - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/migrating-from-asp-net-to-asp-net-core-part-4/"&gt;https://devblogs.microsoft.com/dotnet/migrating-from-asp-net-to-asp-net-core-part-4/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET を ASP.NET Core に移行するシリーズの Part 4 記事。&lt;/p&gt;
&lt;p&gt;記事では Visual Studio のプロジェクト移行拡張ツールの更新についてと System.Web アダプターの更新について触れている。&lt;/p&gt;
&lt;h3 id="net6-enityframework-chocolategraphql"&gt;.NET6 + EnityFramework + ChocolateでGraphQLサーバーを作る&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/noripi10/articles/2db7fb619f588d"&gt;https://zenn.dev/noripi10/articles/2db7fb619f588d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 と Enity Framework Core、Chocolate GraphQL を組み合わせて GraphQL を作ってみるという記事。&lt;/p&gt;
&lt;h3 id="advanced-signalr-configuration-fine-tuning-the-server-side-hub-and-all-supported-client-types"&gt;Advanced SignalR configuration: fine-tuning the server-side hub and all supported client types&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;f.sazanavets/advanced-signalr-configuration-fine-tuning-the-server-side-hub-and-all-supported-client-types-a3de4858fc71"&gt;https://medium.com/&amp;#64;f.sazanavets/advanced-signalr-configuration-fine-tuning-the-server-side-hub-and-all-supported-client-types-a3de4858fc71&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SignalR のサーバーサイドとクライアントと様々な設定について解説している記事。&lt;/p&gt;
&lt;h3 id="c-qiita"&gt;C#でクラス新規作成時のテンプレートを編集する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/alicial/items/1bc992e8787c8211d91d"&gt;https://qiita.com/alicial/items/1bc992e8787c8211d91d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio で C# の新しいクラスを作成するときのテンプレートをカスタマイズする方法についての記事。&lt;/p&gt;
&lt;h3 id="sorting-in-c-orderby.orderby-or-orderby.thenby-whats-more-effective-and-why"&gt;Sorting in C#: OrderBy.OrderBy or OrderBy.ThenBy? What’s more effective and why?&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/c-sharp-progarmming/sorting-in-c-orderby-orderby-or-orderby-thenby-whats-more-effective-and-why-f9545ee2265f"&gt;https://medium.com/c-sharp-progarmming/sorting-in-c-orderby-orderby-or-orderby-thenby-whats-more-effective-and-why-f9545ee2265f&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;二つの並び替え軸がある場合に OrderBy.OrderBy と OrderBy.ThenBy のそれぞれでの処理の違いを内部についても含めて解説している記事。&lt;/p&gt;
&lt;h3 id="streaming-in-signalr-scientific-programmer"&gt;Streaming in SignalR - Scientific Programmer&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://scientificprogrammer.net/2022/09/26/streaming-in-signalr/"&gt;https://scientificprogrammer.net/2022/09/26/streaming-in-signalr/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SignalR でメッセージのストリーミングを行う方法についての記事。&lt;/p&gt;
&lt;h3 id="asp.net-core-rate-limiting-middleware-in.net-7-maarten-balliauw" blog=""&gt;ASP.NET Core rate limiting middleware in .NET 7 - Maarten Balliauw&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.maartenballiauw.be/post/2022/09/26/aspnet-core-rate-limiting-middleware.html"&gt;https://blog.maartenballiauw.be/post/2022/09/26/aspnet-core-rate-limiting-middleware.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 の ASP.NET Core のレートリミットミドルウェアの使い方についての記事。&lt;/p&gt;
&lt;p&gt;記事ではレート制限時の挙動のカスタマイズやポリシーの構成、YARP との組み合わせといったものを説明している。&lt;/p&gt;
&lt;h3 id="understanding-identity-in.net"&gt;Understanding identity in .NET&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/pbouillon/understanding-identity-in-net-2169"&gt;https://dev.to/pbouillon/understanding-identity-in-net-2169&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET のアイデンティティ (Claim) についての基礎を解説している記事。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="nifanfamoos-c-x64-operating-system-programming-with-the.net-native-ahead-of-time-compilation-technology"&gt;nifanfa/MOOS: C# x64 operating system programming with the .NET native ahead-of-time compilation technology.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/nifanfa/MOOS"&gt;https://github.com/nifanfa/MOOS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 の NativeAOT を使用して C# で OS を作るというプロジェクト。&lt;/p&gt;
&lt;h3 id="pg-itodotnet_ffi-invoke-c-managed-code-from-php"&gt;pg-ito/dotnet_ffi: invoke C# managed code from php&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/pg-ito/dotnet_ffi"&gt;https://github.com/pg-ito/dotnet_ffi&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PHP の拡張で .NET ランタイムをホストして C# のライブラリーを呼び出せるようにする仕組み。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/pgito/phpkarac-number-noraiburariwohu-beruyounisitadotnet-ffiwoqu-wei-detukututemita"&gt;PHPからC#のライブラリを呼べるようにしたdotnet_ffiを趣味でつくってみた&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="mathnetmathnet-numerics-math.net-numerics"&gt;mathnet/mathnet-numerics: Math.NET Numerics&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/mathnet/mathnet-numerics"&gt;https://github.com/mathnet/mathnet-numerics&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;数値計算ライブラリー。特殊関数、線形代数、確率モデル、乱数、統計、補間、積分、回帰、曲線フィッティング、積分変換 (FFT) などが含まれる。&lt;/p&gt;
&lt;p&gt;-&lt;a href="https://qiita.com/higege-amdeker/items/f424267279bb078ec435"&gt;「ちょっと午後までに標準偏差表示しといて」～C# での最速標準偏差～ - Qiita&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="cysharpmemorypack-zero-encoding-extreme-performance-binary-serializer-for-c"&gt;Cysharp/MemoryPack: Zero encoding extreme performance binary serializer for C#.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/Cysharp/MemoryPack"&gt;https://github.com/Cysharp/MemoryPack&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# / .NET に特化したバイナリー形式(メモリー表現のまま)のシリアライズを行うハイパフォーマンスなシリアライザー。&lt;/p&gt;
&lt;p&gt;.NET 7 を前提とした実装と Incremental Source Generator による事前コード生成などの特徴を持っている。&lt;/p&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="asp.net-core-in-action-version-3-is-now-available"&gt;ASP.NET Core in Action, version 3, is now available&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/asp-dotnet-core-in-action-version-3-is-now-available/"&gt;https://andrewlock.net/asp-dotnet-core-in-action-version-3-is-now-available/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core in Action 第3版が Early Access で発売された。&lt;/p&gt;
&lt;p&gt;この新版では Minimal APIs を含む .NET 7 に対応した形に更新されているとのこと。記事では10月13日まで40%オフで入手できるクーポンを公開している。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="linq-usage-survey-issue-76205-dotnetruntime"&gt;LINQ Usage Survey · Issue #76205 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/issues/76205"&gt;https://github.com/dotnet/runtime/issues/76205&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LINQ の利用調査。メソッド構文かクエリー式か、どのようなケースで使用するか、どのようなケースで避けているか。&lt;/p&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2022/09/26/updates</id>
		<title>2022-09-26: .NET 7 Release Candidate 1, Visual Studio 2022 17.4 Preview 2, Uno Platform 4.5</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2022/09/26/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2022-09-26T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="announcing.net-7-release-candidate-1.net-blog"&gt;Announcing .NET 7 Release Candidate 1 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-dotnet-7-rc-1/"&gt;https://devblogs.microsoft.com/dotnet/announcing-dotnet-7-rc-1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 RC 1 がリリースされた。&lt;/p&gt;
&lt;p&gt;.NET 7 の運用環境での利用がサポートされた初めてのリリース候補となっている(10月に RC 2 がリリース予定)。Preview からの変更点は不具合や継続的な改善が主となる。Visual Studio を使用する場合には Preview Channel での利用が推奨される。&lt;/p&gt;
&lt;p&gt;記事では今までの Preview での改善などについての記事へのリンクやコントリビューターにスポットライトを当てて紹介している。&lt;/p&gt;
&lt;h3 id="announcing-entity-framework-7-release-candidate-1.net-blog"&gt;Announcing Entity Framework 7 Release Candidate 1 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-ef7-rc1/"&gt;https://devblogs.microsoft.com/dotnet/announcing-ef7-rc1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework 7 RC 1 がリリースされた。&lt;/p&gt;
&lt;p&gt;各種修正や改善、API の変更 (Trigger の API の移動や Raw SQL の FormattableString の受け取りなど)の確定といったものが含まれている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/efcore/issues?q=milestone%3A7.0.0-rc1"&gt;milestone:7.0.0-rc1 - Issues · dotnet/efcore&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asp.net-core-updates-in.net-7-release-candidate-1.net-blog"&gt;ASP.NET Core updates in .NET 7 Release Candidate 1 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-7-rc-1/"&gt;https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-7-rc-1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 RC 1 での ASP.NET Core のアップデートについての記事。&lt;/p&gt;
&lt;p&gt;RC 1 では次の新機能や改善が含まれていることを紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Blazor WebAssembly でのダイナミックな認証リクエスト&lt;/li&gt;
&lt;li&gt;location の変更イベントのハンドリング&lt;/li&gt;
&lt;li&gt;Blazor WebAssembly のデバッグ改善&lt;/li&gt;
&lt;li&gt;.NET 6 プロジェクトのための .NET WebAssembly ビルドツール&lt;/li&gt;
&lt;li&gt;WebAssembly 上の .NET JavaScript 相互運用&lt;/li&gt;
&lt;li&gt;Kestrel のフル証明書チェインの改善&lt;/li&gt;
&lt;li&gt;HTTP/2 アップロードの高速化&lt;/li&gt;
&lt;li&gt;HTTP/3 の改善&lt;/li&gt;
&lt;li&gt;Kestrel での WebTransport over HTTP/3 の実験的サポート&lt;/li&gt;
&lt;li&gt;gRPC JSON トランスコーディングの OpenAPI 実験的サポート&lt;/li&gt;
&lt;li&gt;レートリミットミドルウェアの改善&lt;/li&gt;
&lt;li&gt;macOS の開発証明書の改善&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="visual-studio-2022-17.4-preview-2-visual-studio-blog"&gt;Visual Studio 2022 17.4 Preview 2 - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2022-17-4-preview-2/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-2022-17-4-preview-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.4 Preview 2 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースではエンタープライズ向けのサポートとして Windows Update for Business を使用した AAD 参加型デバイスでのセキュリティー更新の受け取り、ARM64 開発での Visual Studio 拡張機能開発と C++ ゲーム開発、JavaScript 開発のサポートの追加、マルチリポジトリーの操作の改善、ブランチ切り替えパフォーマンスの向上、Microsoft Teams ツールキットの追加、Markdown 編集サポートの追加など。&lt;/p&gt;
&lt;p&gt;.NET 開発では .NET 7 RC 1 と MAUI のサポート、インラインリネーム機能の追加などが行われている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/visualstudio/releases/2022/release-notes-preview#1740-pre20--visual-studio-2022-version-174-preview-2"&gt;Visual Studio 2022 17.4 Preview 2 - Visual Studio 2022 Preview Release Notes | Microsoft Learn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="net-maui-in.net-7-release-candidate-1.net-blog"&gt;.NET MAUI in .NET 7 Release Candidate 1 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-maui-in-dotnet-7-rc1/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-maui-in-dotnet-7-rc1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 RC 1 での .NET MAUI のアップデートについての記事。&lt;/p&gt;
&lt;p&gt;このリリースでは Map コントロールの追加 (Windows は WinUI 3 が Map を持たないため未サポート)、コンテキストメニューやツールチップ、ジェスチャー、ウィンドウサイズと位置といったデスクトップ向けの改善が含まれている。&lt;/p&gt;
&lt;h3 id="rider-2022.3-roadmap-the.net-tools-blog"&gt;Rider 2022.3 Roadmap | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/09/15/rider-2022-3-roadmap/"&gt;https://blog.jetbrains.com/dotnet/2022/09/15/rider-2022-3-roadmap/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider 2022.3 のロードマップについての記事。&lt;/p&gt;
&lt;p&gt;C# 11 のサポートや起動パフォーマンスの向上、日本語を含むローカライズ、各種 UI の改善、WSL サポートや Linux の ARM64 サポート、Unity の Input System 対応、Blazor と Razor のホットリロードやフォーマッターの再実装など。&lt;/p&gt;
&lt;h3 id="resharper-2022.3-roadmap-the.net-tools-blog"&gt;ReSharper 2022.3 Roadmap | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/09/15/resharper-2022-3-roadmap/"&gt;https://blog.jetbrains.com/dotnet/2022/09/15/resharper-2022-3-roadmap/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper 2022.3 のロードマップについての記事。&lt;/p&gt;
&lt;p&gt;C# 11 のサポートや Razor のフォーマッターの再実装、コードのハイライトのオーバーホール、Out-of-Process 移行など。&lt;/p&gt;
&lt;h3 id="uno-platform-4.5-uno-islands-4-new-controls-linux-framebuffer-and-much-more"&gt;Uno Platform 4.5: Uno Islands, 4 New Controls, Linux Framebuffer and MUCH more&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://platform.uno/blog/uno-platform-4-5-uno-islands-4-new-controls-linux-framebuffer-and-much-more/"&gt;https://platform.uno/blog/uno-platform-4-5-uno-islands-4-new-controls-linux-framebuffer-and-much-more/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Uno Platform 4.5 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは WPF 上に Uno (WinUI) をホストする Uno Island が導入され、Breadcrumb や PipsPager、Pull to Refresh といった新しいコントロールの追加、Linux のフレームバッファー DPI とスケーリング、16-bit モードのサポートが追加されている。Uno Toolkit にはセーフエリアやステータスバー、入力を扱う機能が追加された。&lt;/p&gt;
&lt;p&gt;その他 Uno.Extensions の機能追加や iOS 16 の対応、Android でのパフォーマンスの向上などの対応も行われている。&lt;/p&gt;
&lt;h3 id="build-skills-that-open-doorswith-microsoft-learn"&gt;Build skills that open doors—with Microsoft Learn&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://techcommunity.microsoft.com/t5/microsoft-learn-blog/build-skills-that-open-doors-with-microsoft-learn/ba-p/3614011"&gt;https://techcommunity.microsoft.com/t5/microsoft-learn-blog/build-skills-that-open-doors-with-microsoft-learn/ba-p/3614011&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoft の技術系のリソースが Microsoft Learn ファミリーに統合されるというアナウンス。&lt;/p&gt;
&lt;p&gt;これに伴いドキュメンテーションである docs.microsoft.com も learn.microsoft.com へと移行され、リダイレクトされるようになっている。&lt;/p&gt;
&lt;h3 id="now-introducing-arm64-support-for-vs-extensions"&gt;Now Introducing Arm64 Support for VS Extensions!&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/now-introducing-arm64-support-for-vs-extensions/"&gt;https://devblogs.microsoft.com/visualstudio/now-introducing-arm64-support-for-vs-extensions/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 の ARM64 版向けの拡張機能がサポートされたというアナウンス。&lt;/p&gt;
&lt;p&gt;記事では拡張機能を ARM64 対応にする方法と、Marketplace へのアップロードについて触れている。&lt;/p&gt;
&lt;h3 id="net-framework-september-2022-cumulative-update-preview"&gt;.NET Framework September 2022 Cumulative Update Preview&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-framework-september-2022-cumulative-update-preview/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-framework-september-2022-cumulative-update-preview/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework の2022年9月の累積アップデートのプレビューがリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは新しいセキュリティー更新はなく、WPF や WinForms、Workflow、ランタイムとネットワーキングに関する修正が含まれている。&lt;/p&gt;
&lt;h3 id="release-2.2.0-beta.1-mysql-netmysqlconnector"&gt;Release 2.2.0-beta.1 · mysql-net/MySqlConnector&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/mysql-net/MySqlConnector/releases/tag/2.2.0-beta.1"&gt;https://github.com/mysql-net/MySqlConnector/releases/tag/2.2.0-beta.1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Async MySqlConnector 2.2.0-beta.1 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは .NET 7 への対応や DNS チェックの間隔指定の追加されている。&lt;/p&gt;
&lt;p&gt;また破壊的変更となる可能性として接続文字列ビルダーでのキーの並び順の正規化により接続文字列が変わる可能性や .NET 4.5 のサポート削除などがあるとしている。&lt;/p&gt;
&lt;h3 id="microsoft-teams-assignments-services-journey-to.net-6"&gt;Microsoft Teams Assignments Service's Journey to .NET 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/microsoft-teams-assignments-service-dotnet-6-journey/"&gt;https://devblogs.microsoft.com/dotnet/microsoft-teams-assignments-service-dotnet-6-journey/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoft Teams Assignments Service を .NET Framework 4.7.2 (ASP.NET Web API) から .NET 6 へ移行した事例。&lt;/p&gt;
&lt;p&gt;移行は依存のライブラリーから更新、移植を行い、その後 ASP.NET から ASP.NET Core に移行した。その結果として CPU や待機時間といったものが改善されたが、特に一貫して改善されたのがメモリー使用量だったとのこと。&lt;/p&gt;
&lt;p&gt;記事では具体的なワークロードに対するレイテンシーとメモリー使用量の変化を紹介している。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="austin-wise-the-threadpool-in.net-7-nativeaot-uses-the-windows-thread-pool"&gt;Austin Wise - The ThreadPool in .NET 7 NativeAOT uses the Windows thread pool&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.awise.us/2022/09/18/dotnet-nativeaot-windows-threadpool.html"&gt;https://www.awise.us/2022/09/18/dotnet-nativeaot-windows-threadpool.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 でスレッドプールが C# によるマネージド実装へと変わったが、.NET 7 時点では Windows 上の NativeAOT ビルドでは OS のスレッドプールが使われることについての記事。&lt;/p&gt;
&lt;p&gt;ただしこれは現時点でそうなっているだけ(.NET 7 の時点では検討する時間がなかった)であって将来的にどうなるかはまたわからないとのこと。&lt;/p&gt;
&lt;!-- https://twitter.com/MStrehovsky/status/1571741674438787073 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;The common C# implementation was originally written for NativeAOT on Unix (&lt;a href="https://t.co/bxNNQEcOrC"&gt;https://t.co/bxNNQEcOrC&lt;/a&gt;). At that time NativeAOT already had the OS-provided Win32 threadpool implementation. Nobody is bothered by it too much because it&amp;#39;s not C code we need to maintain - the OS does it&lt;/p&gt;&amp;mdash; Michal Strehovský (&amp;#64;MStrehovsky) &lt;a href="https://twitter.com/MStrehovsky/status/1571741674438787073?ref_src=twsrc%5Etfw"&gt;September 19, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="counting-the-leading-zeroes-in-a-binary-number-with-c"&gt;Counting the leading zeroes in a binary number with C#&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/counting-the-leading-zeroes-in-a-binary-number/"&gt;https://andrewlock.net/counting-the-leading-zeroes-in-a-binary-number/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;指定した数値をビットで見た時、先頭から続く 0 の数をカウントする方法についての記事。&lt;/p&gt;
&lt;p&gt;.NET Core 3.0 以降であれば &lt;code&gt;BitOperations.LeadingZeroCount&lt;/code&gt; メソッドを利用でき、常に最速であるが、それ以前のランタイムをサポートする必要がある場合は自前で実装する必要があるのでそれを実装するという話。&lt;/p&gt;
&lt;h3 id="c-obsolete"&gt;(C#) Obsolete によるコンパイルエラーを無視する - ネコのために鐘は鳴る&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ikorin2.hatenablog.jp/entry/2022/09/19/130307"&gt;https://ikorin2.hatenablog.jp/entry/2022/09/19/130307&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Obsolete&lt;/code&gt; 属性の第二引数 &lt;code&gt;error&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; となっている場合でもコンパイルエラーにせず呼び出す方法についての記事。&lt;/p&gt;
&lt;h3 id="unity2020.1-rider-qiita"&gt;Unity2020.1~ と Rider を使うとこういう罠を踏むかも - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/divideby_zero/items/1aa3c7bedf30e742cdc1"&gt;https://qiita.com/divideby_zero/items/1aa3c7bedf30e742cdc1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unity 2020.1 以降では &lt;code&gt; Suppress Common Warnings&lt;/code&gt; というよくある警告を抑制する機能があり、その結果未初期化のプライベート変数に関する警告が抑制され、Rider で &lt;code&gt;Initialize field from constructor&lt;/code&gt; クイックアクションがうまく発動できないという話。&lt;/p&gt;
&lt;h3 id="roslyn"&gt;Roslyn とその活用法&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://speakerdeck.com/nenonaninu/roslyn-tosonohuo-yong-fa"&gt;https://speakerdeck.com/nenonaninu/roslyn-tosonohuo-yong-fa&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Roslyn の役割の説明と Roslyn を使用して C# から TypeScript の型定義ファイルを生成するツール (Source Generator) を作ったというスライド。&lt;/p&gt;
&lt;h3 id="net-security-code-scan"&gt;.NET で静的セキュリティコード検査 (Security Code Scan 編)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/masakura/articles/5d8525f9ffcf3e"&gt;https://zenn.dev/masakura/articles/5d8525f9ffcf3e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Security Code Scan というオープンソースの静的コード脆弱性診断ツールで C# のコードをスキャンしたり、カスタマイズしたりする方法についての記事。&lt;/p&gt;
&lt;h3 id="blazorbindings.maui-preview-9"&gt;BlazorBindings.Maui - Preview 9&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/dreamescaper/blazorbindingsmaui-preview-9-4iob"&gt;https://dev.to/dreamescaper/blazorbindingsmaui-preview-9-4iob&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MobileBlazorBindings を元にした MAUI 向けの Blazor の形でアプリケーションを実装する BlazorBindings.Maui の Preview 9 がリリースされた。&lt;/p&gt;
&lt;p&gt;サードパーティーのコントロールからコードを生成する Component Generator 、影やジェスチャーのサポートの追加が行われている。&lt;/p&gt;
&lt;h3 id="c-using-gc.keepalive-in-async-methods"&gt;[C#] Using GC.KeepAlive in async methods&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://minidump.net/c-using-gc-keepalive-in-async-methods-8d20fd79f0a0"&gt;https://minidump.net/c-using-gc-keepalive-in-async-methods-8d20fd79f0a0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;非同期メソッドで &lt;code&gt;GC.KeepAlive&lt;/code&gt; を使用しても GC に改修されてしまうケースがあることについての記事。&lt;/p&gt;
&lt;p&gt;非同期メソッドはステートマシンに変換されるが、デリゲートをネイティブメソッドに渡している場合にネイティブメソッドの呼び出し中に GC が発生するとオブジェクトが回収されてしまうパターンがある。&lt;code&gt;GC.KeepAlive&lt;/code&gt; を呼び出していてもコード的にはわかれてしまうので防げず、これを防ぐには &lt;code&gt;GCHandle.Alloc&lt;/code&gt; で保持する必要がある。&lt;/p&gt;
&lt;h3 id="c1"&gt;C#におけるベクトル的データ構造のパフォーマンス比較①&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/ysaki51/articles/45d180e3755410"&gt;https://zenn.dev/ysaki51/articles/45d180e3755410&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# (.NET) でのベクトル演算を行ういくつかの方法についてパフォーマンスを比較している記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/ysaki51/articles/47122564898e5d"&gt;C#におけるベクトル的データ構造のパフォーマンス比較②&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="realtime-database-with-firebase-in.net-maui"&gt;Realtime Database with Firebase in .NET MAUI&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://cedricgabrang.medium.com/realtime-database-with-firebase-in-net-maui-60323460ef7e"&gt;https://cedricgabrang.medium.com/realtime-database-with-firebase-in-net-maui-60323460ef7e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Firebase Realtime Database を .NET MAUI で使用する方法についての記事。&lt;/p&gt;
&lt;h3 id="moq-vs-nsubstitute-syntax-cheat-sheet"&gt;Moq vs NSubstitute: syntax cheat sheet&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/bellonedavide/moq-vs-nsubstitute-syntax-cheat-sheet-kkf"&gt;https://dev.to/bellonedavide/moq-vs-nsubstitute-syntax-cheat-sheet-kkf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;モックライブラリの Moq と NSubstitute で実現したいことごとにそれぞれのライブラリーでの記述を紹介している記事。&lt;/p&gt;
&lt;h3 id="netwin32apidllimporttextout-qiita"&gt;.NETの環境でwin32apiのdllimportを使用して、非スムージングなテキストレンダリングのTextOutを実装する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/belre/items/9c6fb4f4c0340296f451"&gt;https://qiita.com/belre/items/9c6fb4f4c0340296f451&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;昔ながらのアンチエイリアスのかかっていないテキストを GDI でレンダリングするという記事。&lt;/p&gt;
&lt;h3 id="asp.net-core-blazor"&gt;ASP.NET Core Blazor のイベント ハンドリングをカスタマイズする&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/okazuki/articles/customize-eventhandlelogic-on-blazor"&gt;https://zenn.dev/okazuki/articles/customize-eventhandlelogic-on-blazor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor のイベントハンドリング処理をカスタマイズする方法についての記事。&lt;/p&gt;
&lt;h3 id="join-us-for-jetbrains.net-days-gamedev-day-online-2022-the.net-tools-blog"&gt;Join us for JetBrains .NET Days + GameDev Day Online 2022 | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/09/19/join-us-for-dotnet-days-and-gamedev-day-online-2022/"&gt;https://blog.jetbrains.com/dotnet/2022/09/19/join-us-for-dotnet-days-and-gamedev-day-online-2022/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;10/25-27 で JetBrains が .NET とゲーム開発に関するオンラインイベントを行うというアナウンス。&lt;/p&gt;
&lt;p&gt;10/25, 26 が .NET Days、10/27 が GameDev Day となっている。&lt;/p&gt;
&lt;h3 id="net-diagnostic-ipc-protocol-the-c-way"&gt;.NET Diagnostic IPC protocol: the C++ way&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://chnasarre.medium.com/net-diagnostic-ipc-protocol-the-c-way-ea5b8024d8d0"&gt;https://chnasarre.medium.com/net-diagnostic-ipc-protocol-the-c-way-ea5b8024d8d0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET の診断 IPC プロトコルを C++ から扱うという記事。&lt;/p&gt;
&lt;p&gt;記事では通信方法やプロトコルの内容について触れている。&lt;/p&gt;
&lt;h3 id="clearscript-f-interactive-javascript-qiita"&gt;[ClearScript] F# Interactive から JavaScript を扱う - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/Mt_SQ/items/d41f8625565a8841bd68"&gt;https://qiita.com/Mt_SQ/items/d41f8625565a8841bd68&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;F# Interactive から ClearScript (JavaScript エンジンブリッジ) を使用して JavaScript を扱うことについての記事。&lt;/p&gt;
&lt;h3 id="firebase-push-notifications-in.net-maui-ios"&gt;Firebase Push Notifications in .NET MAUI (iOS)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://cedricgabrang.medium.com/firebase-push-notifications-in-net-maui-ios-2f4388bf1ac"&gt;https://cedricgabrang.medium.com/firebase-push-notifications-in-net-maui-ios-2f4388bf1ac&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;iOS 上の .NET MAUI アプリケーションで Firebase Push Notifications を扱うことについての記事。&lt;/p&gt;
&lt;h3 id="net-7.net-javascript-interop-on-webassembly-qiita"&gt;.NET 7の.NET JavaScript interop on WebAssemblyを試す - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/yamachu/items/f070ef516c6792ac7e67"&gt;https://qiita.com/yamachu/items/f070ef516c6792ac7e67&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 で導入される .NET JavaScript interop on WebAssembly という WebAssembly のみを使用する (Non-ブラウザー; 非 Blazor) 仕組みについての記事。&lt;/p&gt;
&lt;p&gt;記事では導入とビルドの方法、実際に C# から JavaScript と JavaScript から C# のコードを呼び出す例を Node.js で実行している。&lt;/p&gt;
&lt;h3 id="c-scripting-engine-part-1-introduction-kah-wei-tng"&gt;C# Scripting Engine Part 1 – Introduction – Kah Wei, Tng&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://kahwei.xyz/2022/05/07/c-scripting-engine-part-1-introduction/"&gt;https://kahwei.xyz/2022/05/07/c-scripting-engine-part-1-introduction/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET をホストして C# で実装できるゲームエンジンを作っていくという記事シリーズ。&lt;/p&gt;
&lt;h3 id="architecture-of-a.net-application-case-studies-ndepend"&gt;Architecture of a .NET Application: Case Studies - NDepend&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.ndepend.com/architecture-of-a-net-application-case-studies"&gt;https://blog.ndepend.com/architecture-of-a-net-application-case-studies&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NDepend でいくつかのライブラリーやプロダクトから実際に依存関係を出してみたという記事。&lt;/p&gt;
&lt;h3 id="datatable-visualizer-improvements"&gt;DataTable Visualizer Improvements&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/datatable-visualizer-improvements/"&gt;https://devblogs.microsoft.com/visualstudio/datatable-visualizer-improvements/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.4 Preview 2 での DataTable ビジュアライザーの改善について。&lt;/p&gt;
&lt;p&gt;IEnumerable ビジュアライザー同様に並べ替えやフィルター、エクスポートとテーマ設定をサポートしている。&lt;/p&gt;
&lt;h3 id="its-finally-here.bicep-is-in-visual-studio"&gt;It’s finally here. Bicep is in Visual Studio!&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/bicepforvs/"&gt;https://devblogs.microsoft.com/visualstudio/bicepforvs/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio で Bicep をサポートしたというアナウンス。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-azuretools.visualstudiobicep"&gt;Bicep for Visual Studio - Visual Studio Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="jsuarezruizfigma-to-maui-graphics-figmasharp.maui.graphics-turns-your-figma-design-into.net-maui-graphics-code"&gt;jsuarezruiz/figma-to-maui-graphics: FigmaSharp.Maui.Graphics turns your Figma design into .NET MAUI Graphics code&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/jsuarezruiz/figma-to-maui-graphics"&gt;https://github.com/jsuarezruiz/figma-to-maui-graphics&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Figma のデザインを .NET MAUI のコードに変換するツール。&lt;/p&gt;
&lt;h3 id="testcontainerstestcontainers-dotnet-a-library-to-support-tests-with-throwaway-instances-of-docker-containers-for-all-compatible.net-standard-versions"&gt;testcontainers/testcontainers-dotnet: 🐋 A library to support tests with throwaway instances of Docker containers for all compatible .NET Standard versions.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/testcontainers/testcontainers-dotnet"&gt;https://github.com/testcontainers/testcontainers-dotnet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;テスト実行用の使い捨てコンテナー (データベースや Redis など) を取り扱う TestContainers の .NET 向けライブラリー。&lt;/p&gt;
&lt;p&gt;README の下記のような形で一時的なコンテナーを作り、そこにアクセスするといったことが簡単にできるようになる。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var testcontainersBuilder = new TestcontainersBuilder&amp;lt;TestcontainersContainer&amp;gt;()
  .WithImage(&amp;quot;nginx&amp;quot;)
  .WithName(&amp;quot;nginx&amp;quot;)
  .WithPortBinding(80)
  .WithWaitStrategy(Wait.ForUnixContainer().UntilPortIsAvailable(80));

await using (var testcontainers = testcontainersBuilder.Build())
{
  await testcontainers.StartAsync();
  _ = WebRequest.Create(&amp;quot;http://localhost:80&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/davidfowl/status/1572096059593338882?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;I&amp;#39;ve been meaning to give a deep dive talk on minimal APIs. Lots of dynamic code generation tricks to make it very efficient &lt;a href="https://t.co/V5KJcbvVX2"&gt;https://t.co/V5KJcbvVX2&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/aspnetcore?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#aspnetcore&lt;/a&gt;&lt;/p&gt;&amp;mdash; David Fowler 🇧🇧🇺🇸 (&amp;#64;davidfowl) &lt;a href="https://twitter.com/davidfowl/status/1572096059593338882?ref_src=twsrc%5Etfw"&gt;September 20, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Minimal APIs では任意の &lt;code&gt;Delegate&lt;/code&gt; を渡しているけどどうやって &lt;code&gt;RequestDelegate&lt;/code&gt; にしているの、の回答。&lt;code&gt;RequestDelegateFactory&lt;/code&gt; が頑張って動的に生成していますという話。&lt;/p&gt;
&lt;!-- https://twitter.com/fonssonnemans/status/1573274358910525442 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;In .NET 7 you don&amp;#39;t need to use the Math and MathF static classes anymore. You can use the Math methods on the numeric types. &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/GenericMath?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#GenericMath&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/csharp?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#csharp&lt;/a&gt; &lt;a href="https://t.co/eaWx1PGvBT"&gt;pic.twitter.com/eaWx1PGvBT&lt;/a&gt;&lt;/p&gt;&amp;mdash; Fons Sonnemans 🇳🇱 💙💛 (&amp;#64;fonssonnemans) &lt;a href="https://twitter.com/fonssonnemans/status/1573274358910525442?ref_src=twsrc%5Etfw"&gt;September 23, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Generic Math でいろいろなメソッドが直接生えているので &lt;code&gt;Math&lt;/code&gt; / &lt;code&gt;MathF&lt;/code&gt; を使うことなく &lt;code&gt;int.Abs&lt;/code&gt; のような形で呼び出せるようになったという話。&lt;/p&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2022/09/14/updates</id>
		<title>2022-09-14: WeekRef.NET 一周年, .NET on Windows Package Manager, .NET 6.0.9</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2022/09/14/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2022-09-14T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="weekref.net"&gt;WeekRef.NET 一周年&lt;/h2&gt;
&lt;p&gt;WeekRef.NET を開始して1年が経ちました。更新頻度がまちまちになったり情報量の増減があったりしつつも続けることができて良かったですし、見てくださっている方々にとって少しでも役立っていれば嬉しい限りです。&lt;/p&gt;
&lt;p&gt;とはいえ情報収集してまとめるのは結構労力と時間と気力が必要となっているところは課題なので、この先も続けていくことを考えるともう少し効率化をして行きたいなという気持ちはあります。&lt;/p&gt;
&lt;p&gt;今後も引き続きよろしくお願いいたします。&lt;/p&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="net-now-on-windows-package-manager.net-blog"&gt;.NET now on Windows Package Manager - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-now-on-windows-package-manager/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-now-on-windows-package-manager/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET が Windows パッケージマネージャーから取得できるようになった。&lt;/p&gt;
&lt;p&gt;Windows パッケージマネージャー (winget) で .NET Core 3.1 と .NET 5.0, 6.0, 7.0 (プレビュー) を取得、インストールできるようになった。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;winget search Microsoft.DotNet&lt;/code&gt; で利用可能なパッケージ(SDK やランタイム)の一覧を表示でき、&lt;code&gt;winget install Microsoft.DotNet.SDK.6&lt;/code&gt; といったコマンドでインストールできる。&lt;/p&gt;
&lt;p&gt;winget 経由での更新プログラムはサポート対象となっている .NET に関しては受け取ることができるが、サポート対象外 (.NET 5.0 など) のものに関しては受け取れない。&lt;/p&gt;
&lt;h3 id="net-september-2022-updates.net-6.0.9-and.net-core-3.1.29.net-blog"&gt;.NET September 2022 Updates – .NET 6.0.9 and .NET Core 3.1.29 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/september-2022-updates/"&gt;https://devblogs.microsoft.com/dotnet/september-2022-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6.0.9 と .NET Core 3.1.29 がリリースされた。&lt;/p&gt;
&lt;p&gt;.NET Core 3.1 および .NET 6.0 の ASP.NET Core におけるサービス拒否の脆弱性が修正されている。その他、.NET 6.0 には細かい修正と改善が含まれている。&lt;/p&gt;
&lt;h3 id="create-a-c-style-guide-write-cleaner-code-that-scales-unity"&gt;Create a C# style guide: Write cleaner code that scales | Unity&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://resources.unity.com/games/create-code-style-guide-e-book"&gt;https://resources.unity.com/games/create-code-style-guide-e-book&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unity による Unity を使用している開発者向けの C# スタイルガイドの E-book。&lt;/p&gt;
&lt;p&gt;Microsoft の C# コーディングスタイル、フレームワークガイドラインを元にフォーマットや命名規則といったものをUnity 開発者向けにまとめたもの。コードのフォーマットに関する部分だけでなく、Unity 固有のシリアライゼーションやクラス、メソッドを作成する場合の心構えといったものも書かれている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.unity.com/ja/technology/clean-up-your-code-how-to-create-your-own-c-code-style"&gt;コードを美しく保つ：独自の C# コードスタイルを作成する方法 | Unity Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="arm64-performance-improvements-in.net-7.net-blog"&gt;Arm64 Performance Improvements in .NET 7 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/arm64-performance-improvements-in-dotnet-7/"&gt;https://devblogs.microsoft.com/dotnet/arm64-performance-improvements-in-dotnet-7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 の Arm64 でのパフォーマンス改善について解説している記事。&lt;/p&gt;
&lt;p&gt;記事では以前のパフォーマンスの記事と同様に、ベンチマークコードや生成されるアセンブリなどを載せて解説している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ランタイムの改善
&lt;ul&gt;
&lt;li&gt;L3 キャッシュサイズ&lt;/li&gt;
&lt;li&gt;スレッドプールのスケーリング&lt;/li&gt;
&lt;li&gt;LSE (Large System Extension) アトミック&lt;/li&gt;
&lt;li&gt;Environment.ProcessorCount&lt;/li&gt;
&lt;li&gt;ライブラリーの改善 (Vector などの intrinsics API)&lt;/li&gt;
&lt;li&gt;テキスト処理の改善&lt;/li&gt;
&lt;li&gt;Reverse の改善&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;コード生成の改善
&lt;ul&gt;
&lt;li&gt;アドレッシングモードの改善&lt;/li&gt;
&lt;li&gt;メモリーバリアの改善&lt;/li&gt;
&lt;li&gt;式の巻き上げ&lt;/li&gt;
&lt;li&gt;コードアライメントの改善&lt;/li&gt;
&lt;li&gt;インストラクション選択の改善&lt;/li&gt;
&lt;li&gt;メモリー初期化の改善&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ツーリングの改善&lt;/li&gt;
&lt;li&gt;効果&lt;/li&gt;
&lt;li&gt;ベンチマーク環境&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="resharper-and-rider-2022.2.3-the-latest-bug-fixes-are-here-the.net-tools-blog"&gt;ReSharper and Rider 2022.2.3 – The Latest Bug Fixes Are Here | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/09/13/resharper-and-rider-2022-2-3/"&gt;https://blog.jetbrains.com/dotnet/2022/09/13/resharper-and-rider-2022-2-3/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper と Rider 2022.2.3 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは機能面での変更はなく、ReSharper の InspectCode CLI に関する不具合や、Rider の安定性に関するいくつかの不具合が修正されている。&lt;/p&gt;
&lt;h3 id="net-framework-september-2022-security-and-quality-rollup.net-blog"&gt;.NET Framework September 2022 Security and Quality Rollup - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-framework-september-2022-security-and-quality-rollup/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-framework-september-2022-security-and-quality-rollup/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework の2022年9月のセキュリティー修正と品質ロールアップ更新がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースではコードを実行される脆弱性の修正と &lt;code&gt;System.Windows.Forms.InputLanguage&lt;/code&gt; クラスでオーバーフロー例外が発生する問題が修正されている。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="cgenerics-null-boxing"&gt;【C#】Generics と null 比較と boxing。 - ねののお庭。&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.neno.dev/entry/2022/09/05/151327"&gt;https://blog.neno.dev/entry/2022/09/05/151327&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Generics での &lt;code&gt;is null&lt;/code&gt; による比較で box 化が発生するかどうかについての記事。&lt;/p&gt;
&lt;p&gt;記事では IL レベルでは box があるが、実際の JIT では発生しないこととその理由をコードと共に解説している。&lt;/p&gt;
&lt;h3 id="net-7previewdockerfile-qiita"&gt;.NET 7のPreviewを使ってDockerfileを使わずにコンテナをビルドしてみる。 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/karuakun/items/6fe1a127088dc90413a8"&gt;https://qiita.com/karuakun/items/6fe1a127088dc90413a8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 プレビューで &lt;code&gt;dotnet publish&lt;/code&gt; から直接コンテナーイメージをビルドする機能を試してみるという記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-builtin-container-support-for-the-dotnet-sdk/"&gt;Announcing built-in container support for the .NET SDK - .NET Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="unitysource-generatorrider-qiita"&gt;【Unity】Source Generatorで自動生成されたコードをRiderで確認する方法 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/su10/items/a0d949f28860226acd2b"&gt;https://qiita.com/su10/items/a0d949f28860226acd2b&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider で Source Generator によって生成されたコードを確認する方法についての記事。&lt;/p&gt;
&lt;h3 id="roslyn-qiita"&gt;Roslynアナライザ(+コード修正)を実装する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/ikuzak/items/2d4286079d1657269071"&gt;https://qiita.com/ikuzak/items/2d4286079d1657269071&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Roslyn を使用した Analyzer と CodeFix を Visual Studio で実装する方法について解説している記事。&lt;/p&gt;
&lt;h3 id="c-blazor-wolfenstein-part-1-blazor-james-randall"&gt;C# / Blazor Wolfenstein - Part 1 - Blazor - James Randall&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.jamesdrandall.com/posts/csharp_blazor_wolfenstein_part_1/"&gt;https://www.jamesdrandall.com/posts/csharp_blazor_wolfenstein_part_1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;F# に移植/実装してみた Wolfenstein 3D を C# と Blazor WebAssembly に移植してブラウザーで動かそうというシリーズ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/JamesRandall/fsharp-wolfenstein"&gt;JamesRandall/fsharp-wolfenstein: An F# port of the 1992 classic Wolfenstein 3D&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="working-with-system.random-and-threads-safely-in.net-core-and.net-framework"&gt;Working with System.Random and threads safely in .NET Core and .NET Framework&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/building-a-thread-safe-random-implementation-for-dotnet-framework/"&gt;https://andrewlock.net/building-a-thread-safe-random-implementation-for-dotnet-framework/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;System.Random を .NET Core と .NET Framework でスレッドセーフに扱う方法についての記事。&lt;/p&gt;
&lt;p&gt;.NET 6 では &lt;code&gt;Random.Shared&lt;/code&gt; を使用すること、.NET Core では &lt;code&gt;ThreadStatic&lt;/code&gt; を使用したラッパーを用意すること、.NET Framework ではスレッドセーフにシードを取得する必要があることといったことに触れている。&lt;/p&gt;
&lt;h3 id="net-annotated-monthly-september-2022-the.net-tools-blog"&gt;.NET Annotated Monthly | September 2022 | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/09/06/net-annotated-monthly-september-2022/"&gt;https://blog.jetbrains.com/dotnet/2022/09/06/net-annotated-monthly-september-2022/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JetBrains による .NET 関連情報2022年9月のまとめ。&lt;/p&gt;
&lt;h3 id="mauiunpackaged-qiita"&gt;MAUIにおけるUnpackagedアプリの作成方法 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/TkMaui/items/26e3be3bb5aeea87b183"&gt;https://qiita.com/TkMaui/items/26e3be3bb5aeea87b183&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI のアプリケーションを Unpackaged アプリ (インストーラーなし) として作るための設定についての記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.verslu.is/maui/dotnet-maui-windows-unpackaged-apps/"&gt;.NET MAUI Windows Unpackaged Apps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="microsoft-store-wpf-qiita"&gt;Microsoft Store で 配布する WPF アプリのサイレントアップデート - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/kobayashi_stmn/items/cf426c6b77f8fa529089"&gt;https://qiita.com/kobayashi_stmn/items/cf426c6b77f8fa529089&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoft Store で配布する WPF アプリケーションをサイレントアップデートできるように実装する方法についての記事。&lt;/p&gt;
&lt;h3 id="net-7-nativeaot-cpu"&gt;.NET 7 NativeAOT でCPU主体の処理のベンチマークをしてみた&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/remrem/articles/b9e5c9bde22e15"&gt;https://zenn.dev/remrem/articles/b9e5c9bde22e15&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;マンデルブロー集合を表示するプログラムを .NET 7 の NativeAOT でビルドして速度を確認してみたという記事。&lt;/p&gt;
&lt;h3 id="repinvoke-qiita"&gt;Re:ゼロアロケーションから始めるP/Invoke - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/gazf/items/a6f909b062e584878486"&gt;https://qiita.com/gazf/items/a6f909b062e584878486&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ネイティブライブラリーをゼロアロケーションで呼び出す (P/Invoke) 方法についての記事。&lt;/p&gt;
&lt;p&gt;記事では &lt;code&gt;SkipLocalsInit&lt;/code&gt; を使用してバッファーをクリアしない手法についても触れている。&lt;/p&gt;
&lt;h3 id="kubernetes-authentication-sidecars-a-revelation-in-microservice-architecture"&gt;Kubernetes Authentication Sidecars: A Revelation in Microservice Architecture&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://betterprogramming.pub/kubernetes-authentication-sidecars-a-revelation-in-microservice-architecture-12c4608189ab"&gt;https://betterprogramming.pub/kubernetes-authentication-sidecars-a-revelation-in-microservice-architecture-12c4608189ab&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Kubernetes 上のマイクロサービスでサイドカーに認証プロキシーを置くことで認証メカニズムそのものをアプリケーションに持たせないというアーキテクチャーについての記事。&lt;/p&gt;
&lt;h3 id="net-6vs-codeaws-lambda-qiita"&gt;.NET 6とVS CodeでAWS Lambdaする - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/M_Kagawa/items/1fcd499caf3ccda2495f"&gt;https://qiita.com/M_Kagawa/items/1fcd499caf3ccda2495f&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 と Visual Studio Code を使用して AWS Lambda のプロジェクトを作成、デプロイする方法についての記事。&lt;/p&gt;
&lt;h3 id="serializing-asynchronous-operations-in-c-the-old-new-thing"&gt;Serializing asynchronous operations in C# - The Old New Thing&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/oldnewthing/20220912-30/?p=107168"&gt;https://devblogs.microsoft.com/oldnewthing/20220912-30/?p=107168&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;非同期処理 (&lt;code&gt;Task&lt;/code&gt;) を一つ一つ順番に実行していく仕組みを簡単に作るという記事。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="xoofxvarena-varena-is-a.net-library-that-provides-a-fast-and-lightweight-arena-allocator-using-virtual-memory"&gt;xoofx/Varena: Varena is a .NET library that provides a fast and lightweight arena allocator using virtual memory.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/xoofx/Varena"&gt;https://github.com/xoofx/Varena&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;仮想メモリーを扱う軽量なアロケーターライブラリー。&lt;/p&gt;
&lt;!-- https://twitter.com/xoofx/status/1568536286482366465?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Hey .NET folks, I just released a new small library &lt;a href="https://t.co/DpNJAamBml"&gt;https://t.co/DpNJAamBml&lt;/a&gt; that provides an arena allocator using virtual memory! 🎉🤗&lt;br&gt;I will hopefully use it for the next version of the &lt;a href="https://twitter.com/hashtag/starklang?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#starklang&lt;/a&gt; compiler (fully data oriented!)&lt;/p&gt;&amp;mdash; Alexandre Mutel (&amp;#64;xoofx) &lt;a href="https://twitter.com/xoofx/status/1568536286482366465?ref_src=twsrc%5Etfw"&gt;September 10, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="modern-formsmodern.forms-cross-platform-spiritual-successor-to-winforms-for.net-6"&gt;modern-forms/Modern.Forms: Cross-platform spiritual successor to Winforms for .NET 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/modern-forms/Modern.Forms"&gt;https://github.com/modern-forms/Modern.Forms&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WinForms を目標としたクラスプラットフォーム(Windows, macOS, Linux)実装ライブラリー。&lt;/p&gt;
&lt;p&gt;現時点では開発の初期段階であり、WPF に対する Avalonia と同じような位置づけで WinForms に対応するものを目指しているとのこと。&lt;/p&gt;
&lt;h3 id="jetbrains-rider.net-watch-run-configuration-plugin-the.net-tools-blog"&gt;JetBrains Rider .NET Watch Run Configuration Plugin | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/09/12/jetbrains-rider-net-watch-run-configuration-plugin/"&gt;https://blog.jetbrains.com/dotnet/2022/09/12/jetbrains-rider-net-watch-run-configuration-plugin/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider で &lt;code&gt;dotnet watch&lt;/code&gt; を実行する設定を行えるようにするプラグイン。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dotnet watch&lt;/code&gt; を実行する際のオプションとして引数等の各種実行設定のほか、ホットリロードの有効/無効やアプリケーションが再起動が必要な編集を行った際に再起動を行うかどうかといった設定が行えるようになる。&lt;/p&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="the-good-parts-of-libvlc"&gt;The Good Parts of LibVLC&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://mfkl.gumroad.com/l/libvlc-good-parts"&gt;https://mfkl.gumroad.com/l/libvlc-good-parts&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;VLC のライブラリーである LibVLC についての解説電子書籍。&lt;/p&gt;
&lt;p&gt;LibVLC に加えて .NET 向けのバインディングライブラリーである LibVLCSharp についても解説されているとのこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/mfkl/the-good-parts-of-libvlc-4ii0"&gt;The Good Parts of LibVLC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/mstrehovsky/status/1568160555562835970?s=12&amp;t=3m14Ui-nU2NUzLoRVwFICw --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;1/N One of my favorite optimizations in the upcoming .NET 7 Native AOT is static data preinitialization. This program prints a circle to the screen. Would you believe me if I said there is no code to compute the circle bytes in the NativeAOT&amp;#39;d executable file of this program?👇🧵 &lt;a href="https://t.co/I9LVgaRrvU"&gt;pic.twitter.com/I9LVgaRrvU&lt;/a&gt;&lt;/p&gt;&amp;mdash; Michal Strehovský (&amp;#64;MStrehovsky) &lt;a href="https://twitter.com/MStrehovsky/status/1568160555562835970?ref_src=twsrc%5Etfw"&gt;September 9, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;.NET 7 の NativeAOT で静的データを事前に初期化する(実行時コードを含まない)最適化を行えるという話。&lt;/p&gt;
&lt;h2 id="deepdive"&gt;DeepDive&lt;/h2&gt;
&lt;h3 id="release6.0-backport-edge-case-fixes-to-xxhash32xxhash64-by-github-actionsbot-pull-request-73203-dotnetruntime"&gt;[release/6.0] Backport edge case fixes to XxHash32/XxHash64 by github-actions[bot] · Pull Request #73203 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/73203"&gt;https://github.com/dotnet/runtime/pull/73203&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;XxHash32 と XxHash64 のストリーミング処理 (ワンショットではないもの) で下記のケースで正しい結果を出さない問題の修正 PR (の 6.0 バックポート)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;XxHash32 と XxHash64 で元となるアルゴリズムのストライプサイズと同じ長さのデータチャンクを入れている場合&lt;/li&gt;
&lt;li&gt;XxHash64 に 4GB を超えるデータを入力した場合&lt;/li&gt;
&lt;/ul&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2022/09/06/updates</id>
		<title>2022-09-06: Performance Improvements in .NET 7</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2022/09/06/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2022-09-06T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="performance-improvements-in.net-7.net-blog"&gt;Performance Improvements in .NET 7 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/performance_improvements_in_net_7/"&gt;https://devblogs.microsoft.com/dotnet/performance_improvements_in_net_7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 での様々なパフォーマンス改善についてコードを交えて解説している記事。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;TL;DR: .NET 7 is fast. Really fast. A thousand performance-impacting PRs went into runtime and core  libraries this release, never mind all the improvements in ASP.NET Core and Windows Forms and Entity Framework and beyond. It’s the fastest .NET ever. If your manager asks you why your project should upgrade to .NET 7, you can say “in addition to all the new functionality in the release, .NET 7 is super fast.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;また PDF 版も記事中のリンクよりダウンロードできる。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="twelve-c-11-features"&gt;Twelve C# 11 Features&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.okyrylchuk.dev/twelve-csharp-11-features"&gt;https://blog.okyrylchuk.dev/twelve-csharp-11-features&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 の11個の特徴をまとめて紹介している記事。&lt;/p&gt;
&lt;h3 id="troubleshooting.net-blazor-wasm-debugging-khalid-abuhakmeh"&gt;Troubleshooting .NET Blazor WASM Debugging | Khalid Abuhakmeh&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://khalidabuhakmeh.com/troubleshooting-dotnet-blazor-wasm-debugging"&gt;https://khalidabuhakmeh.com/troubleshooting-dotnet-blazor-wasm-debugging&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor WebAssembly のデバッグ時のトラブルシューティングについての記事。&lt;/p&gt;
&lt;p&gt;起動設定やミドルウェア、パッケージのインストールといった点について。&lt;/p&gt;
&lt;h3 id="microsoft.data.sqlclient-4.0-sql-server-at-se"&gt;Microsoft.Data.SqlClient 4.0 以降で SQL Server に接続する際の暗号化オプション at SE の雑記&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.engineer-memo.com/2022/08/31/microsoft-data-sqlclient-4-0-%E4%BB%A5%E9%99%8D%E3%81%A7-sql-server-%E3%81%AB%E6%8E%A5%E7%B6%9A%E3%81%99%E3%82%8B%E9%9A%9B%E3%81%AE%E6%9A%97%E5%8F%B7%E5%8C%96%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7/"&gt;https://blog.engineer-memo.com/2022/08/31/microsoft-data-sqlclient-4-0-%E4%BB%A5%E9%99%8D%E3%81%A7-sql-server-%E3%81%AB%E6%8E%A5%E7%B6%9A%E3%81%99%E3%82%8B%E9%9A%9B%E3%81%AE%E6%9A%97%E5%8F%B7%E5%8C%96%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoft.Data.SqlClient 4.0 以降の接続で使用する暗号化オプションの挙動についての記事。&lt;/p&gt;
&lt;p&gt;記事ではデフォルトの設定についてや TDS 8.0 との組み合わせといった点について触れている。&lt;/p&gt;
&lt;h3 id="refactor-code-to-use-new-c-language-features-the.net-tools-blog"&gt;Refactor code to use new C# language features | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/08/30/refactor-code-to-use-new-c-language-features/"&gt;https://blog.jetbrains.com/dotnet/2022/08/30/refactor-code-to-use-new-c-language-features/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper や Rider の CodeFix を使用して C# のコードを新しい機能でモダナイズ/リファクタリングしようという記事。&lt;/p&gt;
&lt;h3 id="writing-a.net-profiler-in-c-part-1-by-kevin-gosse-aug-2022-medium"&gt;Writing a .NET profiler in C# - Part 1 | by Kevin Gosse | Aug, 2022 | Medium&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://minidump.net/writing-a-net-profiler-in-c-part-1-d3978aae9b12"&gt;https://minidump.net/writing-a-net-profiler-in-c-part-1-d3978aae9b12&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# で .NET のプロファイラーを実装する方法についての記事。&lt;/p&gt;
&lt;p&gt;.NET のプロファイラーを実装するにはそれが .NET ランタイムで動いていない必要があったため C# での実装は難しかったが、.NET 7 の NativeAOT でネイティブライブラリーの形にすることで実装しようという試みのシリーズ。&lt;/p&gt;
&lt;h3 id="netgithub-actions2"&gt;.NETのGitHub Actionsワークフローでエラーが2回表示される問題の解決&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/shimat/articles/e6af698fca3fba"&gt;https://zenn.dev/shimat/articles/e6af698fca3fba&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GitHub Actions で &lt;code&gt;dotnet build&lt;/code&gt; を行い、エラーが発生した時に GitHub 上でエラーが二重にレポートされてしまう問題を対処する方法についての記事。&lt;/p&gt;
&lt;h3 id="grouping-by-calendar-week-using-entity-framework-core-and-postgresql"&gt;Grouping By Calendar Week Using Entity Framework Core And PostgreSQL&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;christian.johann.eder/grouping-by-calendar-week-using-entity-framework-core-and-postgresql-49d24412e0e5"&gt;https://medium.com/&amp;#64;christian.johann.eder/grouping-by-calendar-week-using-entity-framework-core-and-postgresql-49d24412e0e5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core と PostgreSQL でカスタムデータベース関数マッピングを使用してカレンダー週でグルーピングする方法についての記事。&lt;/p&gt;
&lt;h3 id="deploying-a.net-grpc-server-on-azure-app-service"&gt;Deploying a .NET gRPC Server on Azure App Service&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/sahan/deploying-a-net-grpc-server-on-azure-app-service-3877"&gt;https://dev.to/sahan/deploying-a-net-grpc-server-on-azure-app-service-3877&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure App Service に ASP.NET Core gRPC アプリケーションをデプロイする方法についての記事。&lt;/p&gt;
&lt;h3 id="understanding-the-visual-studio-docker-fastmode-integration"&gt;Understanding the Visual Studio Docker FastMode integration&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://itnext.io/understanding-the-visual-studio-docker-fastmode-integration-c0bccc08b8f9"&gt;https://itnext.io/understanding-the-visual-studio-docker-fastmode-integration-c0bccc08b8f9&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio でデバッグ実行に Docker を使用する際の素早い起動 (FastMode) のための挙動について解説している記事。&lt;/p&gt;
&lt;h3 id="asyncawait-what-happens-under-the-hood"&gt;Async/Await — What Happens Under The Hood&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://itnext.io/async-await-what-happens-under-the-hood-eef1de0dd881"&gt;https://itnext.io/async-await-what-happens-under-the-hood-eef1de0dd881&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;async/await は見えないところでどのように動いているのかを解説している記事。&lt;/p&gt;
&lt;h3 id="netdoc-qiita"&gt;.NETの汎用ホストの公式Docをやさしくしました - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/matsumon-development/items/d66058f742a464ff0971"&gt;https://qiita.com/matsumon-development/items/d66058f742a464ff0971&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;汎用ホスト (Generic Host) について、公式ドキュメントをかみ砕いて使い方を解説している記事。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="rainbow-braces-visual-studio-marketplace"&gt;Rainbow Braces - Visual Studio Marketplace&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=MadsKristensen.RainbowBraces"&gt;https://marketplace.visualstudio.com/items?itemName=MadsKristensen.RainbowBraces&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;コードエディターでかっこやブラケットに色を付けることでペアをわかりやすくする Visual Studio 拡張。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/adding-color-to-bracket-pairs/"&gt;Adding color to bracket pairs - Visual Studio Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="fortunenfinecodecoverage-visualize-unit-test-code-coverage-easily-for-free-in-visual-studio-community-edition-and-other-editions-too"&gt;FortuneN/FineCodeCoverage: Visualize unit test code coverage easily for free in Visual Studio Community Edition (and other editions too)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/FortuneN/FineCodeCoverage"&gt;https://github.com/FortuneN/FineCodeCoverage&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;コードカバレッジを Visual Studio に表示できるようにする拡張。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/imp-kawano/items/1177b3f6ca1fb2107ba6"&gt;.NETの単体テストのコードカバレッジをVisual Studioに表示する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="ullmarkhashids.net-a-small.net-package-to-generate-youtube-like-hashes-from-one-or-many-numbers.use-hashids-when-you-do-not-want-to-expose-your-database-ids-to-the-user"&gt;ullmark/hashids.net: A small .NET package to generate YouTube-like hashes from one or many numbers. Use hashids when you do not want to expose your database ids to the user.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/ullmark/hashids.net"&gt;https://github.com/ullmark/hashids.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ID (数値) を YouTube のようなハッシュ化された文字列 (Hashid) にするライブラリー。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hashids.org/net/"&gt;.NET - Hashids&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/luisnogal/value-converter-of-automapper-for-hashids-4h6p"&gt;How to use Hashids with AutoMapper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="ikuzakikuzokreadonlylocalvariables-prohibits-reassignment-of-local-variables"&gt;IkuzakIkuzok/ReadonlyLocalVariables: Prohibits reassignment of local variables.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/IkuzakIkuzok/ReadonlyLocalVariables"&gt;https://github.com/IkuzakIkuzok/ReadonlyLocalVariables&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ローカル変数への再代入をエラーにするという Roslyn Analyzer。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/ikuzak/items/6c0076e260d520d8589d"&gt;【C#】ローカル変数への再代入を禁止しよう - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2022/08/30/updates</id>
		<title>2022-08-30: built-in container support, C# 11 preview, ReSharper and Rider 2022.2.2</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2022/08/30/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2022-08-30T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="announcing-built-in-container-support-for-the.net-sdk.net-blog"&gt;Announcing built-in container support for the .NET SDK - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-builtin-container-support-for-the-dotnet-sdk/"&gt;https://devblogs.microsoft.com/dotnet/announcing-builtin-container-support-for-the-dotnet-sdk/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 の &lt;code&gt;dotnet&lt;/code&gt; コマンドからワンストップでコンテナーイメージをビルドするサポートパッケージのプレビューのアナウンス。&lt;/p&gt;
&lt;p&gt;このサポートにより &lt;code&gt;dotnet publish&lt;/code&gt; でアプリケーション発行時にコンテナーイメージとしてビルドできるようになる。ベースイメージの変更といったカスタマイズが行えるほか、今後のリリースではさらなるイメージのカスタマイズポイントの追加とコンテナーレジストリーへのプッシュや Windows コンテナーイメージといったものが予定されている。&lt;/p&gt;
&lt;h3 id="c-11-preview-generic-math-required-members-and-more.net-blog"&gt;C# 11 preview: generic math, required members, and more - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/csharp-11-preview-august-update/"&gt;https://devblogs.microsoft.com/dotnet/csharp-11-preview-august-update/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;完成が近づいてきた C# 11 の機能 (オブジェクト初期化関連、Generic Math、開発者生産性) について紹介している記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;オブジェクト初期化関連
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ref&lt;/code&gt; フィールド&lt;/li&gt;
&lt;li&gt;必須メンバー&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Generic Math&lt;/li&gt;
&lt;li&gt;開発者生産性
&lt;ul&gt;
&lt;li&gt;メソッドパラメーターを対象とした &lt;code&gt;nameof&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="resharper-and-rider-2022.2.2-more-bug-fixes-delivered-the.net-tools-blog"&gt;ReSharper and Rider 2022.2.2 – More Bug Fixes Delivered | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/08/22/resharper-and-rider-2022-2-2-bug-fixes/"&gt;https://blog.jetbrains.com/dotnet/2022/08/22/resharper-and-rider-2022-2-2-bug-fixes/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper と Rider 2022.2.2 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースではそれぞれいくつかの不具合の修正が含まれている。&lt;/p&gt;
&lt;h3 id="net-maui-cloud-skills-challenge-learn.net-maui-get-stickers.net-blog"&gt;.NET MAUI Cloud Skills Challenge - Learn .NET MAUI, Get Stickers! - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-maui-cloud-skills-challenge/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-maui-cloud-skills-challenge/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI Cloud Skills Challenge が9月30日までに延長された。&lt;/p&gt;
&lt;p&gt;.NET MAUI Cloud Skills Challenge は Microsoft Learn 上の .NET MAUI のトレーニングを行うとステッカーがもらえるというキャンペーン。&lt;/p&gt;
&lt;h3 id="net-framework-august-2022-cumulative-update-preview-updates.net-blog"&gt;.NET Framework August 2022 Cumulative Update Preview Updates - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-framework-august-2022-cumulative-update-preview-updates/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-framework-august-2022-cumulative-update-preview-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework の2022年8月の累積アップデートのプレビューがリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースにはローカリゼーションの問題と WinForms の問題の修正が含まれている。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="net-6"&gt;金融の基幹システムを1年半かけて.NET 6に移行した話&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/nuits_jp/articles/2022-08-26-migration-to-net6"&gt;https://zenn.dev/nuits_jp/articles/2022-08-26-migration-to-net6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework で実装された金融の基幹システムを .NET 6 へと移行した事例紹介。&lt;/p&gt;
&lt;p&gt;実例をもとに .NET 6 への以降をどのように進めたのかといったことを紹介している。&lt;/p&gt;
&lt;h3 id="net-csharptokyo"&gt;.NETのサポートポリシーのおさらい #csharptokyo&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.slideshare.net/YutaMatsumura/net-csharptokyo-252711803"&gt;https://www.slideshare.net/YutaMatsumura/net-csharptokyo-252711803&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET のサポートポリシーをおさらいして解説しているスライド。&lt;/p&gt;
&lt;h3 id="system.drawing"&gt;System.Drawing 周りの話&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.slideshare.net/masatoru/systemdrawing-252711487"&gt;https://www.slideshare.net/masatoru/systemdrawing-252711487&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 5/6 での System.Drawing の扱いについてのスライド。&lt;/p&gt;
&lt;h3 id="file-c-c"&gt;file ローカル型 | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/study/csharp/misc/file-local/"&gt;https://ufcpp.net/study/csharp/misc/file-local/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 で導入される &lt;code&gt;file&lt;/code&gt; ローカル型について解説している記事。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;file&lt;/code&gt; ローカル型は型のアクセシビリティがそのファイルの中となるもの。記事では使い方や効果のほか導入の背景なども紹介している。&lt;/p&gt;
&lt;h3 id="mapping-multiple-static-file-folders-in-asp.net-core-rick-strahls-web-log"&gt;Mapping Multiple Static File Folders in ASP.NET Core - Rick Strahl's Web Log&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://weblog.west-wind.com/posts/2022/Aug/23/Mapping-Multiple-Static-File-Folders-in-ASPNET-Core"&gt;https://weblog.west-wind.com/posts/2022/Aug/23/Mapping-Multiple-Static-File-Folders-in-ASPNET-Core&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core の静的ファイル配信において複数のローカルパスから配信できるようにする方法についての記事。&lt;/p&gt;
&lt;h3 id="detours-redirecting-c-methods-at-runtime"&gt;Detours: redirecting C# methods at runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://tryfinally.dev/detours-redirecting-csharp-methods-at-runtime"&gt;https://tryfinally.dev/detours-redirecting-csharp-methods-at-runtime&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unity や Mono ランタイムで動作するアプリケーションのメソッドを実行時に差し替える方法についての記事。&lt;/p&gt;
&lt;h3 id="winui3-winui3-qiita"&gt;[WinUI3] WinUI3でウインドウプロシージャをフックする（最大/最小ウインドウサイズの指定にも使える） - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/tera1707/items/75609595f4d42e0ac160"&gt;https://qiita.com/tera1707/items/75609595f4d42e0ac160&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WinUI 3 のアプリケーションでウィンドウプロシージャーをフックしてサブクラス化する方法についての記事。&lt;/p&gt;
&lt;h3 id="malware-analysis-4-eternity-project-eternity-stealer"&gt;[ Malware Analysis #4] —Eternity Project — Eternity Stealer&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://0xm3h51n.medium.com/malware-analysis-4-eternity-project-eternity-stealer-682df3f0dafd"&gt;https://0xm3h51n.medium.com/malware-analysis-4-eternity-project-eternity-stealer-682df3f0dafd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;quot;Eternity Project&amp;quot; というマルウェアサービスのサンプルマルウェアを解析するという記事。&lt;/p&gt;
&lt;p&gt;記事では .NET 製のマルウェアを解析してどのようにして難読化されているか、どのようなことを行っているのかといったことに触れている。&lt;/p&gt;
&lt;h3 id="asp.net-core-6-handling-grpc-exception-correctly-server-side"&gt;ASP.NET Core 6: Handling gRPC exception correctly server side&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://anthonygiretti.com/2022/08/28/asp-net-core-6-handling-grpc-exception-correctly-server-side/"&gt;https://anthonygiretti.com/2022/08/28/asp-net-core-6-handling-grpc-exception-correctly-server-side/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core の gRPC サービスでのサーバーサイドの例外ハンドリングについての記事。&lt;/p&gt;
&lt;p&gt;記事では Interceptor を使用することで各メソッドの呼び出し中に発生した例外をハンドリングしてクライアントに伝える情報をコントロールしている。&lt;/p&gt;
&lt;h3 id="strongly-typed-middleware-in-asp.net-core"&gt;Strongly Typed Middleware in ASP.NET Core&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.mikesdotnetting.com/article/359/strongly-typed-middleware-in-asp-net-core"&gt;https://www.mikesdotnetting.com/article/359/strongly-typed-middleware-in-asp-net-core&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core のミドルウェアを規約ベースではなく &lt;code&gt;IMiddleware&lt;/code&gt; インターフェースによって実装することについての記事。&lt;/p&gt;
&lt;h3 id="add-persisted-parameters-to-cli-applications-in.net"&gt;Add persisted parameters to CLI applications in .NET&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/nikiforovall/add-persisted-parameters-to-cli-applications-in-net-5cgd"&gt;https://dev.to/nikiforovall/add-persisted-parameters-to-cli-applications-in-net-5cgd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;System.CommandLine を使用した CLI アプリケーションで、設定ファイルにコマンドのパラメーターを永続化しておく方法についての記事。&lt;/p&gt;
&lt;h3 id="c-source-generator"&gt;C# Source Generator で将棋の指し手生成を生成して高速化してみた&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/tomori_k/articles/f2bcaf312bc946"&gt;https://zenn.dev/tomori_k/articles/f2bcaf312bc946&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Source Generator を使用して、元となるコードを読み込み、書き換えを行ったうえで生成することで処理を高速化するというテクニックについての記事。&lt;/p&gt;
&lt;h3 id="xamarin.net"&gt;Xamarin のサポート終了と .NET 統合の話&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/mayuki/articles/64f86fbc1d3da0"&gt;https://zenn.dev/mayuki/articles/64f86fbc1d3da0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Xamarin のサポート終了による .NET への統合、MAUI の位置づけについてまとめた記事。&lt;/p&gt;
&lt;h3 id="net7.0-generic-math-qiita"&gt;.NET7.0 の Generic Math についてメモ - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/YuHima03/items/11dd31f8f380b1c1311d"&gt;https://qiita.com/YuHima03/items/11dd31f8f380b1c1311d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 / .NET 7 の Generic Math で使用されるインターフェースを紹介している記事。&lt;/p&gt;
&lt;h3 id="deploy-a-c.net-core-website-to-kubernetes-in-5-minutes-with-jetpack.io"&gt;Deploy a C# &amp;amp; .NET Core Website to Kubernetes in 5 Minutes with Jetpack.io&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/robrich/deploy-a-c-net-core-website-to-kubernetes-in-5-minutes-with-jetpackio-17da"&gt;https://dev.to/robrich/deploy-a-c-net-core-website-to-kubernetes-in-5-minutes-with-jetpackio-17da&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Kubernetes に簡単にデプロイできるようにパッケージングなどを行う Jetpack.io というツールを使用して .NET アプリケーションをデプロイする方法についての記事。&lt;/p&gt;
&lt;h3 id="net-maui-ebook-now-available-enterprise-application-patterns.net-blog"&gt;.NET MAUI eBook Now Available - Enterprise Application Patterns - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-maui-ebook-released/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-maui-ebook-released/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI の eBook &amp;quot;Enterprise Application Patterns using .NET MAUI&amp;quot; が利用できるようになったというアナウンス。&lt;/p&gt;
&lt;h3 id="use-keycloak-as-identity-provider-in-asp.net-core-6"&gt;Use Keycloak as Identity Provider in ASP.NET Core 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/nikiforovall/use-keycloak-as-identity-provider-in-aspnet-core-6-4c7g"&gt;https://dev.to/nikiforovall/use-keycloak-as-identity-provider-in-aspnet-core-6-4c7g&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;オープンソースのアイデンティティとアクセス制御管理の Keycloak を ASP.NET Core から Identity Provider として使用する方法についての記事。&lt;/p&gt;
&lt;h3 id="entity-framework-core-and-multiple-database-providers-the.net-tools-blog"&gt;Entity Framework Core and Multiple Database Providers | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/08/24/entity-framework-core-and-multiple-database-providers/"&gt;https://blog.jetbrains.com/dotnet/2022/08/24/entity-framework-core-and-multiple-database-providers/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core で複数のデータベースプロバイダーを扱う方法についての記事。&lt;/p&gt;
&lt;p&gt;このようなケースが必要になるものとしてアプリケーションをセルフホストできるようにする場合、顧客の環境やニーズに合わせたデータベースでの対応が必要となる場合があるとしている。&lt;/p&gt;
&lt;h3 id="using-the-new-composition-renderer-in-avalonia-11"&gt;Using the new Composition Renderer in Avalonia 11&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/adirh3/using-the-new-composition-renderer-in-avalonia-11-1k0p"&gt;https://dev.to/adirh3/using-the-new-composition-renderer-in-avalonia-11-1k0p&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Avalonia 11 の新しいコンポジションレンダラーに関する記事。記事では特にアニメーションについて触れている。&lt;/p&gt;
&lt;h3 id="using-cancellationtokens-in-asp.net-core-minimal-apis"&gt;Using CancellationTokens in ASP.NET Core minimal APIs&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/using-cancellationtokens-in-asp-net-core-minimal-apis/"&gt;https://andrewlock.net/using-cancellationtokens-in-asp-net-core-minimal-apis/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core での CancellationToken の取り扱いの必要性と Minimal API での使用方法についての記事。&lt;/p&gt;
&lt;p&gt;リクエストに長時間かかるようなケースなどでは CancellationToken をケアすることが価値を持つこと、ミドルウェアでハンドリングできることなどが書かれている。&lt;/p&gt;
&lt;h3 id="processing-open-street-map-data-with-f-and.net-interactive"&gt;Processing Open Street Map data with F# and .NET Interactive&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/cognipla/processing-open-street-map-data-with-f-and-net-interactive-4lh6"&gt;https://dev.to/cognipla/processing-open-street-map-data-with-f-and-net-interactive-4lh6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Open Street Map から生成したデータを F# と .NET Interactive で処理するという記事。&lt;/p&gt;
&lt;h3 id="asp.net-custom-metrics-with-opentelemetry-collector-prometheusgrafana"&gt;ASP.NET Custom Metrics with OpenTelemetry Collector &amp;amp; Prometheus/Grafana&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/cdennig/aspnet-custom-metrics-with-opentelemetry-collector-prometheusgrafana-1hp"&gt;https://dev.to/cdennig/aspnet-custom-metrics-with-opentelemetry-collector-prometheusgrafana-1hp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core アプリケーションから OpenTelemetry でカスタムメトリクスを Prometheus、Grafana を使用して取り扱う方法についての記事。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="dodygpractical-aspnetcore-practical-samples-of-asp.net-core-2.1-2.2-3.1-5.0-6.0-and-7.0-projects-you-can-use.readme-contains-explanations-on-all-projects"&gt;dodyg/practical-aspnetcore: Practical samples of ASP.NET Core 2.1, 2.2, 3.1, 5.0, 6.0 and 7.0 projects you can use. Readme contains explanations on all projects.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dodyg/practical-aspnetcore"&gt;https://github.com/dodyg/practical-aspnetcore&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core の様々な幅広いユースケース(Minimal API から YARP, gRPC などまで)のサンプルコード集。&lt;/p&gt;
&lt;h3 id="microsoftpeeker-roslyn-analyzers-on.net-binaries"&gt;microsoft/peeker: Roslyn analyzers on .NET binaries&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/microsoft/peeker"&gt;https://github.com/microsoft/peeker&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;コンパイル済みの .NET アセンブリーを逆コンパイルして Roslyn Analyzer にかけ、その結果を SARIF として出力するツール。&lt;/p&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/jaredpar/status/1562836200565534721?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;&lt;a href="https://t.co/pOKpJALuo2"&gt;https://t.co/pOKpJALuo2&lt;/a&gt;&lt;br&gt;&lt;br&gt;This is what the C# compiler team uses to troll the C# IDE team with perf issues.&lt;/p&gt;&amp;mdash; Jared Parsons (&amp;#64;jaredpar) &lt;a href="https://twitter.com/jaredpar/status/1562836200565534721?ref_src=twsrc%5Etfw"&gt;August 25, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Visual Studio のエディター拡張のパフォーマンステストにちょうどいい巨大な C# ファイルはないか?という質問に対する答え。&lt;/p&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2022/08/22/updates</id>
		<title>2022-08-22: .NET 6 is now in Ubuntu 22.04, Avalonia 11.0 Preview 1, Bringing Kestrel + YARP to Azure App Services</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2022/08/22/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2022-08-22T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="net-6-is-now-in-ubuntu-22.04"&gt;.NET 6 is now in Ubuntu 22.04&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-6-is-now-in-ubuntu-2204/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-6-is-now-in-ubuntu-2204/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 が Ubuntu 22.04 (Jammy) の公式配布に含まれるようになったアナウンス。&lt;/p&gt;
&lt;p&gt;Canonical とのパートナーシップにより .NET 6 が Ubuntu の一部として配布されるようになった。これにより apt パッケージマネージャーからパッケージソースの追加なしに &lt;code&gt;apt install dotnet6&lt;/code&gt; でインストールできるようになる。&lt;/p&gt;
&lt;p&gt;また同時に .NET 6 の Chiseled Ubuntu コンテナーイメージも公開された。Chiseled Ubuntu コンテナーイメージは通常のコンテナーイメージと異なり、パッケージマネージャーやシェル、root といったものが削除された極小サイズのイメージとなっている。必要最低限のコンポーネントを含むイメージとなっているため、アタックサーフェスを小さくできる。なお、Chiseled イメージには ICU が含まれていないため、Globalization Invariant モードが有効となっている点に注意が必要。&lt;/p&gt;
&lt;p&gt;記事では apt パッケージマネージャーからのインストールについてとコンテナーイメージの利用方法や注意点について触れている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ubuntu.com/blog/install-dotnet-on-ubuntu"&gt;Microsoft and Canonical announce native .NET availability in Ubuntu 22.04 hosts and containers | Ubuntu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="turning-it-up-to-11-avalonia-ui"&gt;Turning it up to 11! - Avalonia UI&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/avalonia/turning-it-up-to-11-34jn"&gt;https://dev.to/avalonia/turning-it-up-to-11-34jn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Avalonia 11.0 Preview 1 がリリースされた。&lt;/p&gt;
&lt;p&gt;記事ではこのリリースで含まれる新機能や改善点について紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;プラットフォームサポートの拡大
&lt;ul&gt;
&lt;li&gt;iOS, Android, ブラウザー&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;新しいビジュアルレイヤー (コンポジションレンダラー)
&lt;ul&gt;
&lt;li&gt;効率の良いレンダラーで 240fps の達成&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;フル機能のテキストレンダリングとレイアウト
&lt;ul&gt;
&lt;li&gt;RTL を含む Unicode サポート&lt;/li&gt;
&lt;li&gt;リッチテキストとインラインサポート、TextFormatter API サポート&lt;/li&gt;
&lt;li&gt;すべてのプラットフォームでの IME のサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;アクセシビリティー (Windows と macOS)&lt;/li&gt;
&lt;li&gt;自動テスト&lt;/li&gt;
&lt;li&gt;コントロールのテーマの改善&lt;/li&gt;
&lt;li&gt;パフォーマンスの向上
&lt;ul&gt;
&lt;li&gt;リソースのオンデマンドローディング&lt;/li&gt;
&lt;li&gt;XAML コンパイラーによる出力される MSIL の削減&lt;/li&gt;
&lt;li&gt;スタイリングシステムとレンダラーの最適化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Avalonia 11.0 Preview 1 は NuGet から利用可能となっている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/AvaloniaUI/Avalonia/releases/tag/11.0.0-preview1"&gt;Release 11.0.0 Preview1 · AvaloniaUI/Avalonia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="a-heavy-lift-bringing-kestrel-yarp-to-azure-app-services"&gt;A Heavy Lift: Bringing Kestrel + YARP to Azure App Services&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://azure.github.io/AppService/2022/08/16/A-Heavy-Lift.html"&gt;https://azure.github.io/AppService/2022/08/16/A-Heavy-Lift.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure App Services のフロントエンドとなるリバースプロキシーを HTTP.sys + ARR から Kestrel + YARP へと移行していることについての記事。&lt;/p&gt;
&lt;p&gt;記事では App Services の構成、YARP への移行の理由、移行までの期間、移行中に遭遇したバグといったものを紹介している。&lt;/p&gt;
&lt;p&gt;移行後には FrontEndRole のパフォーマンスがスループットにして80%向上したこと、Linux の App Service も Nginx から同様の Kestrel + YARP に移行することで同じコードベースで gRPC をはじめとして様々な機能を提供できるようになるとのこと。&lt;/p&gt;
&lt;!-- https://twitter.com/davidfowl/status/1560026785944784896?s=12&amp;t=805-gsos-tKsEUARJM7rEg --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;We spent the last 6 months moving Azure App Service from IIS and nginx to YARP + Kestrel to bring you gRPC and also take advantage of the massive performance improvements in .NET 6 🔥🔥🔥🔥&lt;a href="https://t.co/r7YggokNwV"&gt;https://t.co/r7YggokNwV&lt;/a&gt;&lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/aspnetcore?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#aspnetcore&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/azure?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#azure&lt;/a&gt;&lt;/p&gt;&amp;mdash; David Fowler 🇧🇧🇺🇸 (&amp;#64;davidfowl) &lt;a href="https://twitter.com/davidfowl/status/1560026785944784896?ref_src=twsrc%5Etfw"&gt;August 17, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="release-version-7.0.0-graphql-dotnetgraphql-dotnet"&gt;Release Version 7.0.0 · graphql-dotnet/graphql-dotnet&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/graphql-dotnet/graphql-dotnet/releases/tag/7.0.0"&gt;https://github.com/graphql-dotnet/graphql-dotnet/releases/tag/7.0.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GraphQL for .NET 7.0.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;このバージョンではデーターローダーの結果のメモリー使用量の削減、検証ルールの非同期サポート、API の改善、CLR 型からのインターフェースグラフといった対応が含まれている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://graphql-dotnet.github.io/docs/migrations/migration7/"&gt;Migrating from v5.x to v7.x&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="net-conf-focus-on-maui-thats-a-wrap"&gt;.NET Conf Focus on MAUI - That's a wrap!&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-conf-focus-on-maui-recap/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-conf-focus-on-maui-recap/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Conf Focus on MAUI のスライドやリンクをまとめた記事。&lt;/p&gt;
&lt;h3 id="whats-new-in-visual-studio-2022-17.4-preview-1-visual-studio-blog"&gt;What's New in Visual Studio 2022 17.4 Preview 1 - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2022-17-4-preview-1/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-2022-17-4-preview-1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.4 Preview 1　の新機能について紹介している記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;エンタープライズサポート: LTSC&lt;/li&gt;
&lt;li&gt;Arm64 サポート
&lt;ul&gt;
&lt;li&gt;UWP ワークロードのサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Visual Studio 管理テンプレート (ADMX/ADML) による Visual Studio の管理&lt;/li&gt;
&lt;li&gt;サポート対象外のコンポーネントの削除機能&lt;/li&gt;
&lt;li&gt;Git ツール&lt;/li&gt;
&lt;li&gt;コード検索&lt;/li&gt;
&lt;li&gt;選択マッチハイライト&lt;/li&gt;
&lt;li&gt;生産性
&lt;ul&gt;
&lt;li&gt;C#: ドキュメントアウトラインでファイルのシンボルツリーの確認&lt;/li&gt;
&lt;li&gt;C++: “Navigation after Create Declaration/Definition” のオプション&lt;/li&gt;
&lt;li&gt;C++: ARM64 の CMake と Ninja のサポート&lt;/li&gt;
&lt;li&gt;C++: 接続マネージャーからの SSH プロキシージャンプ&lt;/li&gt;
&lt;li&gt;C++: C++ 23 対応&lt;/li&gt;
&lt;li&gt;F#: ローカル関数の引数のツールチップ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="live-share-enterprise-policies-are-here-visual-studio-blog"&gt;Live Share: Enterprise Policies are here! - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/ls-policies/"&gt;https://devblogs.microsoft.com/visualstudio/ls-policies/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最新の Visual Studio Live Share と管理テンプレートで Live Share のポリシーを構成できるようになった。&lt;/p&gt;
&lt;p&gt;これにより組織外のユーザーとセッションの共有を拒否することや匿名ゲストの無効化といった構成が可能となった。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="directory.enumeratefiles"&gt;Directory.EnumerateFiles メソッドの予期しない挙動について - 鷲ノ巣&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://tech.blog.aerie.jp/entry/2022/08/13/083935"&gt;https://tech.blog.aerie.jp/entry/2022/08/13/083935&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Directory.EnumerateFiles&lt;/code&gt; メソッドのワイルドカードの取り扱いが .NET Framework では予期せぬ結果となる可能性がある挙動であることについての記事。&lt;/p&gt;
&lt;p&gt;記事では &lt;code&gt;*&lt;/code&gt; ワイルドカードに加えて &lt;code&gt;?&lt;/code&gt; ワイルドカードの挙動についても触れている。&lt;/p&gt;
&lt;h3 id="react-asp.net-core-jsakamoto"&gt;&amp;quot;React での ASP.NET Core&amp;quot; テンプレートで生成されるプロジェクトの仕組みを調べてみた | &amp;#64;jsakamoto&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devadjust.exblog.jp/29304896/"&gt;https://devadjust.exblog.jp/29304896/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core の React を使用するテンプレートで作成したプロジェクトを実行する際に、どのようにして JavaScript を処理することでシームレスな起動が行われるようになっているのかについての記事。&lt;/p&gt;
&lt;h3 id="managing-the-most-dangerous-constructor-ever-ayende-rahien"&gt;Managing the most dangerous constructor ever - Ayende &amp;#64; Rahien&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ayende.com/blog/198081-A/managing-the-most-dangerous-constructor-ever"&gt;https://ayende.com/blog/198081-A/managing-the-most-dangerous-constructor-ever&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;X509Certificate2&lt;/code&gt; のコンストラクターを使用すると裏でファイルを作成しているため正しく処理しないとファイルが残ってしまって危険、しかし即開放すると非同期のようなケースで壊れてしまうのでそうはいかないという記事。&lt;/p&gt;
&lt;h3 id="tracking-down-ravendb-io-usage-in-linux-ayende-rahien"&gt;Tracking down RavenDB I/O usage in Linux - Ayende &amp;#64; Rahien&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ayende.com/blog/197985-A/tracking-down-ravendb-i-o-usage-in-linux"&gt;https://ayende.com/blog/197985-A/tracking-down-ravendb-i-o-usage-in-linux&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Linux 上で RavenDB の I/O 使用の詳細を探った方法についての記事。&lt;/p&gt;
&lt;h3 id="building-a-custom-configuration-provider-in.net-6"&gt;Building a custom Configuration Provider in .NET 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;luisalexandre.rodrigues/building-a-custom-configuration-provider-in-net-6-fb6c4caae4bd"&gt;https://medium.com/&amp;#64;luisalexandre.rodrigues/building-a-custom-configuration-provider-in-net-6-fb6c4caae4bd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoft.Extensions.Configuration の Configuration Provider を実装する方法についての記事。&lt;/p&gt;
&lt;h3 id="net-coregitlab-cicdecs-qiita"&gt;.NET CoreのプロジェクトをGitLab CI/CDでECSに自動デプロイさせる - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/waka0238/items/a5d5f1167efca178f775"&gt;https://qiita.com/waka0238/items/a5d5f1167efca178f775&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET アプリケーションを GitLab CI/CD を使用して Amazon ECS にデプロイする方法についての記事。&lt;/p&gt;
&lt;h3 id="the-code-blogger.net-7-important-breaking-changes-for-web-developers"&gt;The Code Blogger - .NET 7 – Important Breaking Changes for Web Developers&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://thecodeblogger.com/2022/08/13/net-7-important-breaking-changes-for-web-developers/"&gt;https://thecodeblogger.com/2022/08/13/net-7-important-breaking-changes-for-web-developers/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 で行われる破壊的変更について紹介している記事。&lt;/p&gt;
&lt;p&gt;記事では API コントローラーのパラメーターへ推測による DI、Microsoft.Data.SqlClient のアップデート、SignalR の Hub のパラメーターの DI による解決といった点を紹介している。&lt;/p&gt;
&lt;h3 id="c-file-nesting-in-vscode"&gt;C# file nesting in VSCODE&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/wahidd/c-file-nesting-in-vscode-1em4"&gt;https://dev.to/wahidd/c-file-nesting-in-vscode-1em4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio Code のファイルネスト機能で .cs ファイルをネストさせる設定についての記事。&lt;/p&gt;
&lt;h3 id="new-in-entity-framework-7-bulk-operations-with-executedelete-and-executeupdate"&gt;New in Entity Framework 7: Bulk Operations with ExecuteDelete and ExecuteUpdate&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/timdeschryver/new-in-entity-framework-7-bulk-operations-with-executedelete-and-executeupdate-1nh2"&gt;https://dev.to/timdeschryver/new-in-entity-framework-7-bulk-operations-with-executedelete-and-executeupdate-1nh2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework 7 の &lt;code&gt;ExecuteDelete&lt;/code&gt; と &lt;code&gt;ExecuteUpdate&lt;/code&gt; による一括操作についての記事。&lt;/p&gt;
&lt;h3 id="internalsvisbletocs0436"&gt;ソースジェネレータとInternalsVisbleToの組み合わせで発生するCS0436を緩和する&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/benutomo/articles/b29f72366023b9"&gt;https://zenn.dev/benutomo/articles/b29f72366023b9&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;InternalsVisibleTo&lt;/code&gt; を使用しているプロジェクトでソースジェネレーターが生成したマーカー用の属性が別なアセンブリーからもアクセスできるようになってしまい、それぞれのアセンブリーでマーカー属性クラスを持つことになり名前が競合しているという警告が出てしまう問題を解消する方法についての記事。&lt;/p&gt;
&lt;p&gt;プロジェクト &lt;code&gt;A&lt;/code&gt; と &lt;code&gt;B&lt;/code&gt; があり、それぞれがソースジェネレーターを参照したことでそれぞれに &lt;code&gt;internal class Marker : Attribute {...}&lt;/code&gt; という属性クラスのコードが生成された場合に、&lt;code&gt;A&lt;/code&gt; が &lt;code&gt;InternalsVisibleTo&lt;/code&gt; で &lt;code&gt;B&lt;/code&gt; に対して internal を公開すると &lt;code&gt;B&lt;/code&gt; からは &lt;code&gt;A&lt;/code&gt; の &lt;code&gt;Marker&lt;/code&gt; と &lt;code&gt;B&lt;/code&gt; の &lt;code&gt;Marker&lt;/code&gt; の両方が見えて競合してしまうという問題。&lt;/p&gt;
&lt;h3 id="git-line-staging-released-visual-studio-blog"&gt;Git Line-staging Released! - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/git-line-staging-released/"&gt;https://devblogs.microsoft.com/visualstudio/git-line-staging-released/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 で Git の行ステージングがサポートされたことについての紹介記事。&lt;/p&gt;
&lt;h3 id="how-i-am-using-iactionconstraintfactory-to-handle-content-negotiation"&gt;How I am using IActionConstraintFactory to handle content negotiation&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/codex/how-i-am-using-iactionconstraintfactory-to-handle-content-negotiation-c6bed3e66b89"&gt;https://medium.com/codex/how-i-am-using-iactionconstraintfactory-to-handle-content-negotiation-c6bed3e66b89&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;IActionConstraint&lt;/code&gt; を使用して、リクエストのヘッダーなどを条件に実行するアクションを切り替える(コンテントネゴシエーション)方法についての記事。&lt;/p&gt;
&lt;h3 id="securing-amazon-api-gateway-with-lambda-authorizer-in.net-detailed-guide"&gt;Securing Amazon API Gateway with Lambda Authorizer in .NET - Detailed Guide&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://codewithmukesh.com/blog/aws-lambda-authorizer-in-dotnet/"&gt;https://codewithmukesh.com/blog/aws-lambda-authorizer-in-dotnet/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET で Lambda オーソライザーを実装して Amazon API Gateway を保護する方法についての記事。&lt;/p&gt;
&lt;h3 id="xunitexception-qiita"&gt;xUnitでExceptionをテストする - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/mkuwan/items/bc301ffef32044c148e8"&gt;https://qiita.com/mkuwan/items/bc301ffef32044c148e8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;xUnit で例外がスローされることをテストする方法についての記事。&lt;/p&gt;
&lt;h3 id="crecord"&gt;【C#】record 型のプロパティへのドキュメント コメントの書き方&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/naminodarie/articles/933cc96767e1d1"&gt;https://zenn.dev/naminodarie/articles/933cc96767e1d1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;record 型のプロパティーのドキュメントコメントについての記事。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="spectresystemssnitch-a-tool-that-help-you-find-duplicate-transitive-package-references"&gt;spectresystems/snitch: A tool that help you find duplicate transitive package references.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/spectresystems/snitch"&gt;https://github.com/spectresystems/snitch&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;プロジェクトの参照している NuGet パッケージを間接的に参照しているものも含めて走査して、重複を確認できるツール。&lt;/p&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="c-5"&gt;独習C# 第5版 | 翔泳社&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.shoeisha.co.jp/book/detail/9784798175560"&gt;https://www.shoeisha.co.jp/book/detail/9784798175560&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# の入門書である「独習 C#」の C# 10 に対応した改訂版。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/toRisouP/items/e2248a1314e714de8e8f"&gt;独習C# 第5版 を読んだレビュー - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/tannergooding/status/1558846271674191873?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;ClangSharp v14.0.0-rc1 has been released: &lt;a href="https://t.co/5UpU42uzGI"&gt;https://t.co/5UpU42uzGI&lt;/a&gt;&lt;br&gt;&lt;br&gt;This package is the first to be signed and the first RC since the large rewrite back in 2019.&lt;br&gt;&lt;br&gt;1/&lt;/p&gt;&amp;mdash; Tanner Gooding (&amp;#64;tannergooding) &lt;a href="https://twitter.com/tannergooding/status/1558846271674191873?ref_src=twsrc%5Etfw"&gt;August 14, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;2019年以降大幅に書き換えが行われた ClangSharp v14.0.0-rc1 が公開されたという話。P/Invoke Generator というツールも更新され、C ヘッダーファイルから C# へのバインディングを生成できる、など。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="major-compiler-slowdown-due-to-changes-in.net-gc-between.net-7-preview2-and.net-7-preview3-issue-13730-dotnetfsharp"&gt;Major compiler slowdown due to changes in .NET GC between .NET 7 preview2 and .NET 7 preview3 · Issue #13730 · dotnet/fsharp&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/fsharp/issues/13730"&gt;https://github.com/dotnet/fsharp/issues/13730&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 Preview 7 で F# コンパイラーがとても遅くなったという Issue。&lt;/p&gt;
&lt;p&gt;.NET 7 Preview 7 では GC Region が有効になっているなど GC に大きく手が入っているためではないか、Workstation GC から Server GC にすることで改善する、といった話が出ている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/runtime/issues/74286"&gt;Huge performance drop for fsc.exe/dll · Issue #74286 · dotnet/runtime&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="remove-threadpool-native-implementation-by-eduardo-vp-pull-request-71719-dotnetruntime"&gt;Remove ThreadPool native implementation by eduardo-vp · Pull Request #71719 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/71719"&gt;https://github.com/dotnet/runtime/pull/71719&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 ではネイティブのスレッドプール実装が削除されるという PR。(.NET 6 からデフォルトでマネージコードによるスレッドプール)&lt;/p&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2022/08/13/updates</id>
		<title>2022-08-13: Visual Studio 2022 17.3, .NET MAUI in Visual Studio 2022, .NET 7 Preview 7, .NET Framework 4.8.1</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2022/08/13/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2022-08-13T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="visual-studio-2022-17.3-is-now-available-visual-studio-blog"&gt;Visual Studio 2022 17.3 is now available! - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2022-17-3-is-now-available/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-2022-17-3-is-now-available/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 version 17.3 がリリースされた。&lt;/p&gt;
&lt;p&gt;記事では 17.3 で更新された次の機能について触れている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.NET MAUI サポート&lt;/li&gt;
&lt;li&gt;Microsoft Teams 向けアプリケーション開発サポート&lt;/li&gt;
&lt;li&gt;C++ のサポートの改善
&lt;ul&gt;
&lt;li&gt;低優先度ビルド&lt;/li&gt;
&lt;li&gt;インデクシングの高速化&lt;/li&gt;
&lt;li&gt;統合ターミナルでのリモート SSH 接続のサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Azure Container Apps サポート&lt;/li&gt;
&lt;li&gt;Live Unit Testing の改善&lt;/li&gt;
&lt;li&gt;What's New ページ&lt;/li&gt;
&lt;li&gt;Git ラインステージング&lt;/li&gt;
&lt;li&gt;タブの複数行表示&lt;/li&gt;
&lt;li&gt;IEnumerable ビジュアライザー&lt;/li&gt;
&lt;li&gt;閉じたドキュメントの再オープン&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;また、次のバージョンとなる 17.4 のプレビューもリリースされ、17.4 は Arm64 ネイティブのリリースバージョンとなること LTSC (長期サポートチャンネル) バージョンとなるとのこと。&lt;/p&gt;
&lt;h3 id="productivity-comes-to.net-maui-in-visual-studio-2022.net-blog"&gt;Productivity comes to .NET MAUI in Visual Studio 2022 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-maui-visualstudio-2022-release/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-maui-visualstudio-2022-release/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.3 で .NET MAUI のサポートがプレビューからリリースとなったアナウンス。&lt;/p&gt;
&lt;p&gt;.NET MAUI 自体の GA はすでに行われていたが、ツールサポートは今までプレビューとなっていたが 17.3 のリリースでリリースとなり一般に利用できるようになった。これには XAML のライブプレビューやホットリロードといったものが含まれる。&lt;/p&gt;
&lt;p&gt;Visual Studio for Mac での .NET MAUI サポートは 17.4 Preview ではプレビューとなっており、今年後半にリリースとなる予定とのこと。&lt;/p&gt;
&lt;h3 id="announcing.net-7-preview-7.net-blog"&gt;Announcing .NET 7 Preview 7 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-dotnet-7-preview-7/"&gt;https://devblogs.microsoft.com/dotnet/announcing-dotnet-7-preview-7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 Preview 7 がリリースされた。開発環境としては Windows, macOS 共に Visual Studio 2022 17.4 プレビューの使用が推奨されている。&lt;/p&gt;
&lt;p&gt;記事では Preview 7 でのアップデートについて紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;シンプルな LINQ
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Order&lt;/code&gt;, &lt;code&gt;OrderDescending&lt;/code&gt; (キーセレクター不要の &lt;code&gt;OrderBy&lt;/code&gt;/&lt;code&gt;OrderByDescending&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unix ファイルモードサポート&lt;/li&gt;
&lt;li&gt;低レベルな &lt;code&gt;struct&lt;/code&gt; の改善: &lt;code&gt;ref&lt;/code&gt; フィールド&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LibraryImport&lt;/code&gt; P/Invoke ソースジェネレーター
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DllImport&lt;/code&gt; に代わるネイティブライブラリー呼び出しのマーシャリングコード生成&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ClientWebSocket アップグレードレスポンスの詳細
&lt;ul&gt;
&lt;li&gt;ClientWebSocket がアップグレードの応答に関する詳細(ステータスコード等)を取得できるように&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;コード生成の改善&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;また、破壊的変更として次のものがあげられている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;トリミングと NativeAOT: すべてのアセンブリがデフォルトでトリミングされる
&lt;ul&gt;
&lt;li&gt;コンソールアプリケーションで &lt;code&gt;PublishTrimmed&lt;/code&gt; を指定した場合、ライブラリープロジェクトが &lt;code&gt;IsTrimmable&lt;/code&gt; の有無にかかわらずトリミングされる。この挙動を変更するには &lt;code&gt;TrimMode&lt;/code&gt; を指定することで以前のバージョンと同等に戻すことが可能。また Windows, Android, iOS, WASM, ASP.NET Core といったプレーンではない .NET アプリケーションは影響を受けない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asp.net-core-updates-in.net-7-preview-7.net-blog"&gt;ASP.NET Core updates in .NET 7 Preview 7 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-7-preview-7/"&gt;https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-7-preview-7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 Preview 7 での ASP.NET Core のアップデートについての記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新しい Blazor WebAssembly のローディングページ&lt;/li&gt;
&lt;li&gt;Blazor データバインディングの get/set/after 修飾子&lt;/li&gt;
&lt;li&gt;Blazor 仮想化の改善&lt;/li&gt;
&lt;li&gt;NavigationManager を使用したステート渡し&lt;/li&gt;
&lt;li&gt;WebAssembly における System.Security.Cryptography サポートの更なる追加&lt;/li&gt;
&lt;li&gt;Angular と React のテンプレートの更新&lt;/li&gt;
&lt;li&gt;gRPC JSON トランスコーディングパフォーマンス&lt;/li&gt;
&lt;li&gt;認証で単一スキームを &lt;code&gt;DefaultScheme&lt;/code&gt; として扱う&lt;/li&gt;
&lt;li&gt;Minimal API での認証済みリクエストでの &lt;code&gt;IFormFile&lt;/code&gt;/&lt;code&gt;IFormFileCollection&lt;/code&gt; のサポート&lt;/li&gt;
&lt;li&gt;問題の詳細サービス
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.rfc-editor.org/rfc/rfc7807"&gt;RFC 7807: Problem Details for HTTP APIs&lt;/a&gt; をサポートするサービス&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;診断ミドルウェアのアップデート&lt;/li&gt;
&lt;li&gt;新しい &lt;code&gt;HttpResults&lt;/code&gt; インターフェース
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IFileHttpResult&lt;/code&gt; や &lt;code&gt;IValueHttpResult&amp;lt;TValue&amp;gt;&lt;/code&gt; といった &lt;code&gt;IResult&lt;/code&gt; の型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="announcing-entity-framework-7-preview-7-interceptors.net-blog"&gt;Announcing Entity Framework 7 Preview 7: Interceptors! - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-ef7-preview7/"&gt;https://devblogs.microsoft.com/dotnet/announcing-ef7-preview7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework 7 Preview 7 がリリースされた。&lt;/p&gt;
&lt;p&gt;記事では Entity Framework 7 で強化される Interceptor について紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;エンティティー作成時のシンプルなアクション (マテリアライゼーション)&lt;/li&gt;
&lt;li&gt;LINQ 式ツリーのインターセプト&lt;/li&gt;
&lt;li&gt;オプティミスティック同時実行制御インターセプト&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="announcing.net-framework-4.8.1.net-blog"&gt;Announcing .NET Framework 4.8.1 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-dotnet-framework-481/"&gt;https://devblogs.microsoft.com/dotnet/announcing-dotnet-framework-481/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework 4.8.1 がリリースされた。&lt;/p&gt;
&lt;p&gt;.NET Framework 4.8.1 では Arm64 のネイティブサポート、 WCAG2.1 準拠のアクセシブルなツールチップ、Windows Forms でのアクセシビリティーの向上といった新機能が導入される。&lt;/p&gt;
&lt;p&gt;対応 OS は Windows 10 Version 20H2 と Windows Server 2022 以降が対象となる。&lt;/p&gt;
&lt;h3 id="visual-studio-for-mac-17.3-is-now-available-visual-studio-blog"&gt;Visual Studio for Mac 17.3 is now available - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-for-mac-17-3-is-now-available/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-for-mac-17-3-is-now-available/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 for Mac 17.3 がリリースされた。&lt;/p&gt;
&lt;p&gt;User Secrets のサポート、新しいコードフィックスの追加や &lt;code&gt;StringSyntaxAttribute&lt;/code&gt; の対応、タスクウィンドウと正規表現ダイアログのネイティブ UI 化、Apple Developer アカウントサポートが行われている。&lt;/p&gt;
&lt;p&gt;また次期バージョンのプレビューである Visual Studio 2022 for Mac v17.4 もリリースされているとのこと。&lt;/p&gt;
&lt;h3 id="net-august-2022-updates.net-6.0.8-and.net-core-3.1.28.net-blog"&gt;.NET August 2022 Updates – .NET 6.0.8 and .NET Core 3.1.28 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/august-2022-updates/"&gt;https://devblogs.microsoft.com/dotnet/august-2022-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6.0.8 と .NET Core 3.1.28 がリリースされた。&lt;/p&gt;
&lt;p&gt;.NET 6 および .NET Core 3.1 の特権情報の不正アクセスによる情報漏洩のセキュリティー修正が含まれている。&lt;/p&gt;
&lt;h3 id="net-framework-august-2022-security-and-quality-rollup-updates.net-blog"&gt;.NET Framework August 2022 Security and Quality Rollup Updates - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-framework-august-2022-security-and-quality-rollup-updates/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-framework-august-2022-security-and-quality-rollup-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework の2022年8月のセキュリティーと累積アップデートがリリースされた。&lt;/p&gt;
&lt;p&gt;TLS 1.3 でクライアント証明書を使用している場合にネゴシエーションでハングアップする問題や、WPF の同期に関する問題の修正が含まれる。&lt;/p&gt;
&lt;h3 id="announcing-nuget-6.3-transitive-dependencies-floating-versions-and-re-enabling-signed-package-verification-the-nuget-blog"&gt;Announcing NuGet 6.3 - Transitive Dependencies, Floating Versions, and Re-enabling Signed Package Verification - The NuGet Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/nuget/announcing-nuget-6-3-transitive-dependencies-floating-versions-and-re-enabling-signed-package-verification/"&gt;https://devblogs.microsoft.com/nuget/announcing-nuget-6-3-transitive-dependencies-floating-versions-and-re-enabling-signed-package-verification/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NuGet 6.3 がリリースされた。&lt;/p&gt;
&lt;p&gt;NuGet 6.3 は Visual Studio 2022 や .NET 6 に含まれるほか、独立した実行ファイルとしてダウンロードも可能。&lt;/p&gt;
&lt;p&gt;このバージョンでは次の新機能や改善が含まれている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PackageReference のパッケージから pdb を使用する&lt;/li&gt;
&lt;li&gt;Visual Studio での推移的な依存関係の表示 (実験的な機能)
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devblogs.microsoft.com/nuget/introducing-transitive-dependencies-in-visual-studio/"&gt;Introducing Transitive Dependencies in Visual Studio - The NuGet Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PackageReference&lt;/code&gt;, &lt;code&gt;PackageVersion&lt;/code&gt; または &lt;code&gt;PackageDownload&lt;/code&gt; の重複が見つかった場合の新しい警告&lt;/li&gt;
&lt;li&gt;Visual Studio でのカスタム浮動バージョンのインストール
&lt;ul&gt;
&lt;li&gt;UI 上から &lt;code&gt;1.*&lt;/code&gt; のような形でバージョンを指定できるようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Linux での署名されたパッケージの検証のデフォルトでの再有効化&lt;/li&gt;
&lt;li&gt;HTTPS everywhere.
&lt;ul&gt;
&lt;li&gt;HTTP (非暗号化) 利用時の警告 NU1803 の追加、2023年11月以降には HTTP はエラーとなる (オプトアウト可)、2024年11月以降はエラーのオプトアウトも無効化される予定&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devblogs.microsoft.com/nuget/https-everywhere/"&gt;HTTPS everywhere - The NuGet Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="visualstudio.extensibility-a-new-way-to-write-extensions-visual-studio-blog"&gt;VisualStudio.Extensibility: A New Way to Write Extensions - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visualstudio-extensibility/"&gt;https://devblogs.microsoft.com/visualstudio/visualstudio-extensibility/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio の拡張性 (VisualStudio.Extensibility) の Phase 2 についての記事。&lt;/p&gt;
&lt;p&gt;Phase 2 で利用できるようになった次の新機能について紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;リモート UI フレームワーク
&lt;ul&gt;
&lt;li&gt;Out-of-Process モデルでの UI サポート&lt;/li&gt;
&lt;li&gt;ツールウィンドウ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;新しいエディタ API の追加
&lt;ul&gt;
&lt;li&gt;新しい言語コンテンツタイプの定義&lt;/li&gt;
&lt;li&gt;ドキュメントセレクターを使用した拡張機能の適用可能性の指定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;新しいコマンド
&lt;ul&gt;
&lt;li&gt;ツールチップの表示&lt;/li&gt;
&lt;li&gt;カスタムイメージの表示&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;タスク進捗状況通知&lt;/li&gt;
&lt;li&gt;インプロセス API によるスムーズな移行&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="announcing-synapseml-for.net-large-scale-ml-with-a-simple-api.net-blog"&gt;Announcing SynapseML for .NET - Large Scale ML with a Simple API - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-synapseml-for-dotnet/"&gt;https://devblogs.microsoft.com/dotnet/announcing-synapseml-for-dotnet/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SynapseML v0.10 のリリースの一部として .NET バインディングが利用できるようになったというアナウンス。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="announcing-the.net-maui-beautiful-ui-challenge.net-blog"&gt;Announcing the .NET MAUI Beautiful UI Challenge - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-dotnet-maui-beautiful-ui-challenge/"&gt;https://devblogs.microsoft.com/dotnet/announcing-dotnet-maui-beautiful-ui-challenge/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Xamarin と .NET MAUI のきれいなデザインを集める Snppts と NET MAUI Good Look UI リポジトリーにデザインを共有することでステッカーをもらえるというキャンペーンのアナウンス。&lt;/p&gt;
&lt;h3 id="microsoft-authentication-library-for.net-present"&gt;Microsoft Authentication Library for .NET でリフレッシュトークンを永続化する - present&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://tnakamura.hatenablog.com/entry/2022/08/08/microsoft-identity-client-extensions-msal"&gt;https://tnakamura.hatenablog.com/entry/2022/08/08/microsoft-identity-client-extensions-msal&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoft Authentication Library for .NET を使用して取得したリフレッシュトークンはインメモリのみの保持のため、永続化してプロセス終了後も利用できるようにする方法についての記事。&lt;/p&gt;
&lt;h3 id="trying-out-native-aot-in.net-7-preview-7-soundar-anbu-codes"&gt;Trying out Native AOT in .NET 7 Preview 7 - Soundar Anbu Code's&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://code.soundaranbu.com/trying-out-native-aot-in-net-7-preview-7/"&gt;https://code.soundaranbu.com/trying-out-native-aot-in-net-7-preview-7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 Preview 7 での NativeAOT を試してみたという記事。最終的にどの程度のファイルサイズになるかといった部分に触れている。&lt;/p&gt;
&lt;h3 id="net-7-preview-7-c-11-c-c"&gt;.NET 7 Preview 7 で、C# 11 の機能が一通りそろったみたい | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2022/8/net7p7/"&gt;https://ufcpp.net/blog/2022/8/net7p7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 Preview 7 の時点で C# 11 が Preview からデフォルトになり、リリースに向けて機能が確定したという話。&lt;/p&gt;
&lt;h3 id="cc-qiita"&gt;どのバージョンのC#としてビルドされているかを調べるC#コード - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/chocolamint/items/1c8635a34e6aa0adbc6d"&gt;https://qiita.com/chocolamint/items/1c8635a34e6aa0adbc6d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 言語バージョンごとの文法を含むコードを用意することで、コンパイラーがどのバージョンの C# でコンパイルしているか判断できる(どこでエラーが出るかで判断できる)のではないかという記事。&lt;/p&gt;
&lt;h3 id="virtual-formatter-fixing-tabs-versus-spaces-and-other-problems-the.net-tools-blog"&gt;Virtual Formatter – Fixing Tabs versus Spaces and other Problems | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/08/11/virtual-formatter-in-resharper-2022-2/"&gt;https://blog.jetbrains.com/dotnet/2022/08/11/virtual-formatter-in-resharper-2022-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper 2022.2 の新機能 Virtual Formatter について紹介している記事。&lt;/p&gt;
&lt;p&gt;Virtual Formatter は表示上でのみフォーマットを適用する機能で、アクセシビリティーや既存のコードのフォーマット、企業でのコーディングスタイルとの不一致といったシーンでのメリットを紹介している。&lt;/p&gt;
&lt;h3 id="exploring.net-webassembly-with-wasi-and-wasmtime"&gt;Exploring .NET WebAssembly with WASI and Wasmtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/azure/exploring-net-webassembly-with-wasi-and-wasmtime-41l5"&gt;https://dev.to/azure/exploring-net-webassembly-with-wasi-and-wasmtime-41l5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WASI を実装する Wasmtime で .NET WebAssembly を Dev Container を使用してビルド、動かす方法についての記事。&lt;/p&gt;
&lt;h3 id="lessons-learned-from-optimizing-performance-in-multi-layered.net-projects"&gt;Lessons learned from optimizing performance in multi-layered .NET projects&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/elca-it/lessons-learned-from-optimizing-performance-in-multi-layered-net-projects-136576f61787"&gt;https://medium.com/elca-it/lessons-learned-from-optimizing-performance-in-multi-layered-net-projects-136576f61787&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;多層化(データベース、アプリケーション、ネットワーク等)された .NET プロジェクトでのパフォーマンス最適化で得られた教訓についての記事。&lt;/p&gt;
&lt;h3 id="handling-concurrent-merges-to-master-in-multi-stage-azure-devops-pipelines"&gt;Handling concurrent merges to master in multi-stage Azure DevOps pipelines&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/handling-concurrent-merges-to-master-in-multi-stage-azure-devops-pipelines/"&gt;https://andrewlock.net/handling-concurrent-merges-to-master-in-multi-stage-azure-devops-pipelines/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Datadog .NET APM Tracer のような複数のステージを持つ Azure Pipelines のビルドで、 Pull request によるマージコミットでビルドしている場合にステージ進行中に master が更新されるとマージコミットが変更されてしまう問題に対する対処についての記事。&lt;/p&gt;
&lt;h3 id="discover-the-new-asp.net-core-features-in.net-7-dotnetsafer-blog"&gt;Discover the New ASP.NET Core Features in .NET 7! - Dotnetsafer Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.dotnetsafer.com/discover-the-new-asp-net-core-features-in-net-7/"&gt;https://blog.dotnetsafer.com/discover-the-new-asp-net-core-features-in-net-7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 の ASP.NET Core の新機能についての記事。Minimal API や SignalR のソースジェネレーターといったものを紹介している。&lt;/p&gt;
&lt;h3 id="migrating-from-asp.net-to-asp.net-core-in-visual-studio.net-blog"&gt;Migrating from ASP.NET to ASP.NET Core in Visual Studio - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/introducing-project-migrations-visual-studio-extension/"&gt;https://devblogs.microsoft.com/dotnet/introducing-project-migrations-visual-studio-extension/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio に実装された ASP.NET から ASP.NET Core に移行するツールを使用する方法についての記事。&lt;/p&gt;
&lt;h3 id="net-annotated-monthly-august-2022-the.net-tools-blog"&gt;.NET Annotated Monthly | August 2022 | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/08/08/net-annotated-monthly-august-2022/"&gt;https://blog.jetbrains.com/dotnet/2022/08/08/net-annotated-monthly-august-2022/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JetBrains による .NET まとめの2022年8月号。&lt;/p&gt;
&lt;h3 id="heap-sort-in-c-code-maze"&gt;Heap Sort in C# - Code Maze&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://code-maze.com/csharp-heap-sort/"&gt;https://code-maze.com/csharp-heap-sort/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# でのヒープソートを実装する記事。&lt;/p&gt;
&lt;h3 id="running-a.net-application-on-a-local-kubernetes-cluster"&gt;Running a .NET application on a local Kubernetes cluster&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;TheLe0/running-a-net-application-on-a-local-kubernetes-cluster-1aff3537f755"&gt;https://medium.com/&amp;#64;TheLe0/running-a-net-application-on-a-local-kubernetes-cluster-1aff3537f755&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET アプリケーションを Kind のローカル Kubernetes クラスターで動かす方法についての記事。&lt;/p&gt;
&lt;h3 id="linq-explained-with-sketches"&gt;LINQ explained with sketches&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://steven-giesel.com/blogPost/d65c5411-a69b-489f-b73f-18ce0ed8678d"&gt;https://steven-giesel.com/blogPost/d65c5411-a69b-489f-b73f-18ce0ed8678d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LINQ オペレーターの動きを絵で表す、という記事。&lt;/p&gt;
&lt;h3 id="net-community-toolkit-qiita"&gt;【.NET Community Toolkit】ソースジェネレータのファイルサイズ調査 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/myoga/items/79e64ad7d358b281f6da"&gt;https://qiita.com/myoga/items/79e64ad7d358b281f6da&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Community Toolkit の MVVM Source Generator でコード生成した場合に継承ベースの実装とバイナリサイズを比較している記事。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="microsoftfluentui-emoji-fluent-emoji-are-a-collection-of-familiar-friendly-and-modern-emoji-from-microsoft"&gt;microsoft/fluentui-emoji: Fluent Emoji are a collection of familiar, friendly, and modern emoji from Microsoft.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/microsoft/fluentui-emoji"&gt;https://github.com/microsoft/fluentui-emoji&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Fluent UI の絵文字。&lt;/p&gt;
&lt;p&gt;Windows の Fluent UI 絵文字で使用されているものと同じデザインの絵文字画像。 MIT ライセンスで公開されている。&lt;/p&gt;
&lt;h3 id="bruce-dunwiddietsql-parser-library-written-in-c-for-parsing-sql-server-t-sql-scripts-in.net"&gt;bruce-dunwiddie/tsql-parser: Library Written in C# For Parsing SQL Server T-SQL Scripts in .Net&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/bruce-dunwiddie/tsql-parser"&gt;https://github.com/bruce-dunwiddie/tsql-parser&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Transact-SQL を解析するライブラリー。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/yaju/items/b74310ca4718c2ee112b"&gt;【.NET】SQL構文解析ライブラリーのTSQL Parserを使用する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/yaju/items/cf6988f4a6a6707654ce"&gt;【.NET】SQL構文解析ライブラリーのTSQL Parserを使用する 応用編 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="enterprise-application-patterns-using.net-maui-microsoft-docs"&gt;Enterprise Application Patterns Using .NET MAUI | Microsoft Docs&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/architecture/maui/"&gt;https://docs.microsoft.com/en-us/dotnet/architecture/maui/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI のアプリケーションパターンの E-book。&lt;/p&gt;
&lt;!-- https://twitter.com/MichaelStonis/status/1557771597406257152 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;My book Enterprise Application Patterns using .NET MAUI is now available! Lots of info to help you start building apps on the right path.&lt;br&gt;&lt;br&gt;It can be dowloaded from &lt;a href="https://t.co/AYumrTFUhc"&gt;https://t.co/AYumrTFUhc&lt;/a&gt;&lt;br&gt;&lt;br&gt;The best part is that it comes at the low, low price of FREE!&lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/MAUI?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#MAUI&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/dotNETMAUI?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotNETMAUI&lt;/a&gt;&lt;/p&gt;&amp;mdash; Michael Stonis (&amp;#64;MichaelStonis) &lt;a href="https://twitter.com/MichaelStonis/status/1557771597406257152?ref_src=twsrc%5Etfw"&gt;August 11, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/shayrojansky/status/1557078174143459328?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Released version 7.0.0-preview.7 of &lt;a href="https://twitter.com/hashtag/npgsql?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#npgsql&lt;/a&gt; and the &lt;a href="https://twitter.com/hashtag/efcore?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#efcore&lt;/a&gt; provider for &lt;a href="https://twitter.com/hashtag/PostgreSQL?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#PostgreSQL&lt;/a&gt;, with some exciting aggregate support (&lt;a href="https://t.co/QvLCYfL09O"&gt;https://t.co/QvLCYfL09O&lt;/a&gt;) and various other stuff!&lt;/p&gt;&amp;mdash; Shay Rojansky (&amp;#64;shayrojansky) &lt;a href="https://twitter.com/shayrojansky/status/1557078174143459328?ref_src=twsrc%5Etfw"&gt;August 9, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Npgsql と Entity Framework の 7.0.0-preview.7 で PostgreSQL の集計処理を利用できるようになったという話。&lt;/p&gt;
&lt;!-- https://twitter.com/jaredpar/status/1558127162233786369?s=12&amp;t=n8ip1IrKkbSKILeSOgoYjA --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;One lesson I&amp;#39;ve learned hard over the last few years is the approach for CI must be different between large and jumbo projects.&lt;/p&gt;&amp;mdash; Jared Parsons (&amp;#64;jaredpar) &lt;a href="https://twitter.com/jaredpar/status/1558127162233786369?ref_src=twsrc%5Etfw"&gt;August 12, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;!-- https://twitter.com/jaredpar/status/1558132794676506624?s=12&amp;t=n8ip1IrKkbSKILeSOgoYjA --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;In terms of the odd incentives of testing at jumbo scale, consider the case of List&amp;lt;T&amp;gt;.Count for .NET. For a large / medium project you&amp;#39;d run unit tests for  core collections on every PR. At jumbo scale though this actually a measurable negative.&lt;/p&gt;&amp;mdash; Jared Parsons (&amp;#64;jaredpar) &lt;a href="https://twitter.com/jaredpar/status/1558132794676506624?ref_src=twsrc%5Etfw"&gt;August 12, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;中/大規模と超大規模のプロジェクトにおける CI とテストでの違いの話。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="port-windowsmsdtc-distributed-transactions-support-by-roji-pull-request-72051-dotnetruntime"&gt;Port Windows/MSDTC distributed transactions support by roji · Pull Request #72051 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/72051"&gt;https://github.com/dotnet/runtime/pull/72051&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MSDTC による分散トランザクションのサポートの PR。&lt;/p&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
</feed>