<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<id>/</id>
	<title>WeekRef.NET</title>
	<author>
		<name>Mayuki Sawatari</name>
	</author>
	<link rel="self" href="/" />
	<rights>Copyright © Mayuki Sawatari &lt;mayuki@misuzilla.org&gt;</rights>
	<updated>2023-10-01T13:46:04Z</updated>
	<logo>/img/logo.png</logo>
	<subtitle>.NET 関連の情報をほぼ週刊配信</subtitle>
	<entry>
		<id>/2023/10/01/updates</id>
		<title>2023-10-01: Debugging Enhancements in .NET 8, Polly v8, CoreWCF v1.4</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2023/10/01/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2023-10-01T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="debugging-enhancements-in.net-8.net-blog"&gt;Debugging Enhancements in .NET 8 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/debugging-enhancements-in-dotnet-8/"&gt;https://devblogs.microsoft.com/dotnet/debugging-enhancements-in-dotnet-8/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="polly-v8-officially-released"&gt;Polly v8 officially released&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.thepollyproject.org/2023/09/28/polly-v8-officially-released/"&gt;https://www.thepollyproject.org/2023/09/28/polly-v8-officially-released/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/App-vNext/Polly/releases/tag/8.0.0"&gt;Release 8.0.0 · App-vNext/Polly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="corewcf-v1.4-and-v1.5-preview1-released-issue-15-corewcfannouncements"&gt;CoreWCF v1.4 and v1.5 preview1 released · Issue #15 · CoreWCF/announcements&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/CoreWCF/announcements/issues/15"&gt;https://github.com/CoreWCF/announcements/issues/15&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.infoq.com/news/2023/09/corewcf-140-released/"&gt;CoreWCF 1.4.0 Released: RabbitMQ and Apache Kafka Support Added&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="release-diagnostics-release-v7.0.447801-dotnetdiagnostics"&gt;Release Diagnostics Release - v7.0.447801 · dotnet/diagnostics&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/diagnostics/releases/tag/v7.0.447801"&gt;https://github.com/dotnet/diagnostics/releases/tag/v7.0.447801&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-framework-september-2023-cumulative-update-preview.net-blog"&gt;.NET Framework September 2023 Cumulative Update Preview - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-framework-september-2023-cumulative-update-preview/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-framework-september-2023-cumulative-update-preview/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="get-a-sneak-peek-the-visual-studio-tea-technology-miniseries-visual-studio-blog"&gt;Get a Sneak Peek: The Visual Studio 'Tea &amp;amp; Technology' Miniseries - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-tea-technology-miniseries/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-tea-technology-miniseries/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="cicd-unleashed-optimizing.net-web-application-delivery-with-jenkins-and-docker"&gt;CI/CD Unleashed: Optimizing .NET Web Application Delivery with Jenkins and Docker&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;shubnimkar/ci-cd-unleashed-optimizing-net-web-application-delivery-with-jenkins-and-docker-ed67ca06aeba"&gt;https://medium.com/&amp;#64;shubnimkar/ci-cd-unleashed-optimizing-net-web-application-delivery-with-jenkins-and-docker-ed67ca06aeba&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="efsqldb-qiita"&gt;EFとSQLDBの暗号化について - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/gsrh/items/cd77acbc2af350b3ee03"&gt;https://qiita.com/gsrh/items/cd77acbc2af350b3ee03&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="gitlab-cicdcwpf"&gt;GitLab CI/CDを導入してC#/WPFアプリケーションのテストとインストーラーのビルド・デプロイを自動化する&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/hacarus_blog/articles/3-gitlab-ci-for-c-application"&gt;https://zenn.dev/hacarus_blog/articles/3-gitlab-ci-for-c-application&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="handling-of-unknown-enums-in.net-serialization-for-api-integration"&gt;Handling of unknown enums in .NET serialization for API integration&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://gaevoy.com/2023/09/26/dotnet-serialization-unknown-enums-handling-api.html"&gt;https://gaevoy.com/2023/09/26/dotnet-serialization-unknown-enums-handling-api.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="server-sent-events-with.net-7"&gt;Server Sent Events with .NET 7&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.devgenius.io/server-sent-events-with-net-7-4f06499a7762"&gt;https://blog.devgenius.io/server-sent-events-with-net-7-4f06499a7762&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="cdi-qiita"&gt;[C#]DIコンテナのスコープ範囲を制御する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/jun1s/items/a4ebf7e897dc3cb1fea9"&gt;https://qiita.com/jun1s/items/a4ebf7e897dc3cb1fea9&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="asp.net-core-signalr-redis-hub-qiita"&gt;ASP.NET Core SignalR × Redis でHubを冗長化 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/takasan/items/c9f245d0be24111e0cc1"&gt;https://qiita.com/takasan/items/c9f245d0be24111e0cc1&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="preventing-breaking-changes-in.net-class-libraries"&gt;Preventing breaking changes in .NET class libraries&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/workleap/preventing-breaking-changes-in-net-class-libraries-e61ae93b1b46"&gt;https://medium.com/workleap/preventing-breaking-changes-in-net-class-libraries-e61ae93b1b46&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="the-convenience-of.net.net-blog"&gt;The convenience of .NET - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/the-convenience-of-dotnet/"&gt;https://devblogs.microsoft.com/dotnet/the-convenience-of-dotnet/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="a-unit-of-profiling-makes-the-allocations-go-away-visual-studio-blog"&gt;A unit of profiling makes the allocations go away - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/a-unit-of-profiling-makes-the-allocations-go-away/"&gt;https://devblogs.microsoft.com/visualstudio/a-unit-of-profiling-makes-the-allocations-go-away/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="rider-kicks-off-the-early-access-program-for-the-2023.3-release-the.net-tools-blog"&gt;Rider Kicks Off the Early Access Program for the 2023.3 Release! | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/09/25/rider-2023-3-eap1/"&gt;https://blog.jetbrains.com/dotnet/2023/09/25/rider-2023-3-eap1/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="windowsc-qiita"&gt;【Windows/C#】アクセストークンの特権を変更する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/mitsu_at3/items/8e5fa9cdbd61a315cb32"&gt;https://qiita.com/mitsu_at3/items/8e5fa9cdbd61a315cb32&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="resharper-2023.3-early-access-program-begins-the.net-tools-blog"&gt;ReSharper 2023.3 Early Access Program Begins! | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/09/25/rsrp-2023-3-eap1/"&gt;https://blog.jetbrains.com/dotnet/2023/09/25/rsrp-2023-3-eap1/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="how-to-modify-response-headers-in-asp.net-core-middleware"&gt;How to modify response headers in ASP.NET Core middleware&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.elmah.io/how-to-modify-response-headers-in-asp-net-core-middleware/"&gt;https://blog.elmah.io/how-to-modify-response-headers-in-asp-net-core-middleware/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="accessing-private-members-without-reflection-in-c-gerald-barre"&gt;Accessing private members without reflection in C# - Gérald Barré&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.meziantou.net/accessing-private-members-without-reflection-in-csharp.htm"&gt;https://www.meziantou.net/accessing-private-members-without-reflection-in-csharp.htm&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="tales-from-the.net-migration-trenches-our-first-controller"&gt;Tales from the .NET Migration Trenches - Our First Controller&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.jimmybogard.com/tales-from-the-net-migration-trenches-our-first-controller/"&gt;https://www.jimmybogard.com/tales-from-the-net-migration-trenches-our-first-controller/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="feature-flags-101-a-guide-for.net-developers"&gt;Feature Flags 101: A Guide for .NET Developers&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.code4it.dev/blog/feature-flags-dotnet/"&gt;https://www.code4it.dev/blog/feature-flags-dotnet/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="building.net-solutions-through-code-on-nuke-build"&gt;Building .NET solutions through code on Nuke Build&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;alex.ozr/building-net-solutions-through-code-on-nuke-build-de40be06b091"&gt;https://medium.com/&amp;#64;alex.ozr/building-net-solutions-through-code-on-nuke-build-de40be06b091&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="test-coverage-analysis-with-coverlet-in.net"&gt;Test Coverage Analysis with Coverlet in .NET&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://victormagalhaes-dev.medium.com/test-coverage-analysis-with-coverlet-in-net-2e38df3c6ed7"&gt;https://victormagalhaes-dev.medium.com/test-coverage-analysis-with-coverlet-in-net-2e38df3c6ed7&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="tales-from-the.net-migration-trenches-migrating-initial-business-logic"&gt;Tales from the .NET Migration Trenches - Migrating Initial Business Logic&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.jimmybogard.com/tales-from-the-net-migration-trenches-migrating-business-logic/"&gt;https://www.jimmybogard.com/tales-from-the-net-migration-trenches-migrating-business-logic/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="section-2"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-3"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://x.com/mhmd_azeez/status/1706713404415549906?s=12&amp;t=ggvrrZ7oLogHyNoIGNgjbw --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;I am very excited to share something I have been working on for the past few weeks: &lt;a href="https://twitter.com/extism?ref_src=twsrc%5Etfw"&gt;&amp;#64;extism&lt;/a&gt; .NET PDK! Start building universal wasm libraries in C# and F#: &lt;a href="https://t.co/T5UupbWgOA"&gt;https://t.co/T5UupbWgOA&lt;/a&gt;&lt;br&gt;&lt;br&gt;It&amp;#39;s still very experimental, but we would love to get your feedback&lt;a href="https://twitter.com/hashtag/csharp?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#csharp&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/fsharp?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#fsharp&lt;/a&gt;&lt;/p&gt;&amp;mdash; Muhammad Azeez (&amp;#64;mhmd_azeez) &lt;a href="https://twitter.com/mhmd_azeez/status/1706713404415549906?ref_src=twsrc%5Etfw"&gt;September 26, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;!-- https://x.com/egorbo/status/1706316706316996947?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;In .NET you can load a huge graph(s) of objects directly from a file and, basically, mmap it &amp;amp; register as a managed heap! GC won&amp;#39;t waste time scanning/compacting/collecting it. Quick example of me registering stack memory as a managed heap: &lt;a href="https://t.co/ljAn6UNoqS"&gt;pic.twitter.com/ljAn6UNoqS&lt;/a&gt;&lt;/p&gt;&amp;mdash; Egor Bogatov (&amp;#64;EgorBo) &lt;a href="https://twitter.com/EgorBo/status/1706316706316996947?ref_src=twsrc%5Etfw"&gt;September 25, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2023/09/24/updates</id>
		<title>2023-09-24: Docker Desktop 4.23, System.Text.Json in .NET 8</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2023/09/24/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2023-09-24T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="docker-desktop-4.23-updates-to-docker-init-new-configuration-integrity-check-quick-search-improvements-performance-enhancements-and-more-docker"&gt;Docker Desktop 4.23: Updates to Docker Init, New Configuration Integrity Check, Quick Search Improvements, Performance Enhancements, and More | Docker&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.docker.com/blog/docker-desktop-4-23/"&gt;https://www.docker.com/blog/docker-desktop-4-23/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Docker Desktop 4.23 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは docker init での ASP.NET Core の対応が追加され、プロジェクトに Dockerfile などのコンテナー化に必要なファイルの作成が簡単に行えるようになった。&lt;/p&gt;
&lt;h3 id="whats-new-in-system.text.json-in.net-8.net-blog"&gt;What's new in System.Text.Json in .NET 8 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/system-text-json-in-dotnet-8/"&gt;https://devblogs.microsoft.com/dotnet/system-text-json-in-dotnet-8/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 8 での System.Text.Json の新機能について。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Source Generator の改善
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;required&lt;/code&gt; および &lt;code&gt;init&lt;/code&gt; メンバーのサポート&lt;/li&gt;
&lt;li&gt;Source Generator の組み合わせ&lt;/li&gt;
&lt;li&gt;発音できない型名のサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JsonStringEnumConverter&amp;lt;TEnum&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JsonSourceGenerationOptionsAttribute&lt;/code&gt; 機能の拡張&lt;/li&gt;
&lt;li&gt;デフォルトでのリフレクションの無効化&lt;/li&gt;
&lt;li&gt;サイズ削減&lt;/li&gt;
&lt;li&gt;バグ修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;読み取り専用メンバーの収集&lt;/li&gt;
&lt;li&gt;存在しないメンバーのハンドリング&lt;/li&gt;
&lt;li&gt;スネークケースとケバブケースの名前付けポリシー&lt;/li&gt;
&lt;li&gt;インターフェース階層サポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Half&lt;/code&gt;, &lt;code&gt;Int128&lt;/code&gt;, &lt;code&gt;UInt128&lt;/code&gt; のビルトインサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Memory&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;ReadOnlyMemory&amp;lt;T&amp;gt;&lt;/code&gt; のビルトインサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JsonSerializerOptions&lt;/code&gt; 単一利用アナライザー&lt;/li&gt;
&lt;li&gt;非パブリックメンバーに対する &lt;code&gt;JsonIncludeAttribute&lt;/code&gt; および &lt;code&gt;JsonConstructorAttribute&lt;/code&gt; サポートの拡張&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IJsonTypeInfoResolver.WithAddedModifier&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JsonSerializerOptions.MakeReadOnly()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JsonNode&lt;/code&gt; の追加機能&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JsonNode.ParseAsync&lt;/code&gt; APIs&lt;/li&gt;
&lt;li&gt;&lt;code&gt;System.Net.Http.Json&lt;/code&gt; の改善
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IAsyncEnumerable&lt;/code&gt; 拡張&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JsonTypeInfo&lt;/code&gt; を受け付ける &lt;code&gt;JsonContent.Create&lt;/code&gt; のオーバーロード&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JsonConverter.Type&lt;/code&gt; プロパティー&lt;/li&gt;
&lt;li&gt;パフォーマンス改善&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="https-everywhere-update-the-nuget-blog"&gt;HTTPS Everywhere Update - The NuGet Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/nuget/https-everywhere-update/"&gt;https://devblogs.microsoft.com/nuget/https-everywhere-update/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NuGet での HTTPS の強制化に関するアップデート。&lt;/p&gt;
&lt;p&gt;NuGet 6.8 ではソースの指定に &lt;code&gt;allowInsecureConnections&lt;/code&gt; 属性で &lt;code&gt;true&lt;/code&gt; を指定することで非 HTTP による接続を許可できるようになる。&lt;/p&gt;
&lt;h3 id="new-react-typescript-spa-templates-and-more-visual-studio-blog"&gt;New React TypeScript SPA Templates and More - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/new-react-typescript-spa-templates-and-more/"&gt;https://devblogs.microsoft.com/visualstudio/new-react-typescript-spa-templates-and-more/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 Preview で TypeScript を使用した React の SPA アプリケーションのテンプレートが更新された。&lt;/p&gt;
&lt;p&gt;新しいテンプレートでは Vite を使用することで作成と実行が高速になるほか様々なメリットを受けられるとしている。&lt;/p&gt;
&lt;h3 id="release-windows-app-sdk-1.4.1-1.4.230913002-microsoftwindowsappsdk"&gt;Release Windows App SDK 1.4.1 (1.4.230913002) · microsoft/WindowsAppSDK&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/microsoft/WindowsAppSDK/releases/tag/v1.4.1"&gt;https://github.com/microsoft/WindowsAppSDK/releases/tag/v1.4.1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows App SDK 1.4.1 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースではいくつかの不具合が修正されている。&lt;/p&gt;
&lt;h3 id="azure-service-fabric-10.0-release-azure-updates-microsoft-azure"&gt;Azure Service Fabric 10.0 Release | Azure updates | Microsoft Azure&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://azure.microsoft.com/en-us/updates/azure-service-fabric-100-release/"&gt;https://azure.microsoft.com/en-us/updates/azure-service-fabric-100-release/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure Service Fabric 10.0 がリリースされた。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="tune-into-the-c-certification-training-series.net-blog"&gt;Tune into the C# Certification Training Series - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/csharp-certification-training-series/"&gt;https://devblogs.microsoft.com/dotnet/csharp-certification-training-series/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;freeCodeCamp での C# 認定トレーニングが開始されたことに記念したライブストリーミングセッションの紹介。&lt;/p&gt;
&lt;h3 id="net-8-asp.net-core-efcore-qiita"&gt;.NET 8 + ASP.NET Core + EFCoreでどれだけ起動が早くなったか確認する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/karuakun/items/def89f1a1fe4e07b2cfd"&gt;https://qiita.com/karuakun/items/def89f1a1fe4e07b2cfd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 8 と ASP.NET Core、Entity Framework Core を組み合わせた場合の起動パフォーマンスの調査について。&lt;/p&gt;
&lt;p&gt;記事では Dapper や素の ADO.NET、 NativeAOT でのビルド時での結果なども併せて載せている。&lt;/p&gt;
&lt;h3 id="godot-is-not-the-new-unity-the-anatomy-of-a-godot-api-call"&gt;Godot is not the new Unity - The anatomy of a Godot API call&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://sampruden.github.io/posts/godot-is-not-the-new-unity/"&gt;https://sampruden.github.io/posts/godot-is-not-the-new-unity/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Godot のおけるレイキャストに関する部分を例に C# からの API 呼び出しの非効率であるという意見。&lt;/p&gt;
&lt;!-- https://x.com/reduzio/status/1704875838833897788?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;During the past few days, some controversy arised regarding to the supposed low efficiency of C# bindings in Godot.&lt;br&gt;&lt;br&gt;As I believe this to be largely a misunderstanding, I wrote an in depth article explaining how the Godot binding system works:&lt;a href="https://t.co/WOEf7XmbBK"&gt;https://t.co/WOEf7XmbBK&lt;/a&gt;&lt;br&gt;&lt;br&gt;Have fun!&lt;/p&gt;&amp;mdash; Juan Linietsky (&amp;#64;reduzio) &lt;a href="https://twitter.com/reduzio/status/1704875838833897788?ref_src=twsrc%5Etfw"&gt;September 21, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="eager-lazy-and-explicit-loading-with-entity-framework-core-the.net-tools-blog"&gt;Eager, Lazy and Explicit Loading with Entity Framework Core | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/09/21/eager-lazy-and-explicit-loading-with-entity-framework-core/"&gt;https://blog.jetbrains.com/dotnet/2023/09/21/eager-lazy-and-explicit-loading-with-entity-framework-core/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core の Eager、遅延、明示的なロードに関する解説。&lt;/p&gt;
&lt;h3 id="addtransientdispose-qiita"&gt;AddTransientで追加したクラスのDisposeはいつ呼ばれるか - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/karuakun/items/4f300d84e366a125c60d"&gt;https://qiita.com/karuakun/items/4f300d84e366a125c60d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoft.Extensions.DependencyInjection のコンテナーに AddTransient で追加した型の Dispose が呼び出されるタイミングについて。&lt;/p&gt;
&lt;h3 id="raytracing-in-vulkan-using-c-part-1"&gt;Raytracing in Vulkan using C# — Part 1&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://jenskrumsieck.medium.com/raytracing-in-vulkan-using-c-part-1-997cb284f7e8"&gt;https://jenskrumsieck.medium.com/raytracing-in-vulkan-using-c-part-1-997cb284f7e8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# で Vulkan を使用してレイトレーシングを実装するというシリーズ。&lt;/p&gt;
&lt;h3 id="net8devcontainer-qiita"&gt;.NET8用のDevContainerを作ってみる - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/karuakun/items/4695cfbdfbf623600c98"&gt;https://qiita.com/karuakun/items/4695cfbdfbf623600c98&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 8 向けの Dev Containers を作成する方法について。&lt;/p&gt;
&lt;h3 id="cwindowsdatetimetostringwindows-qiita"&gt;【C#/Windows】DateTimeのToStringで西暦/和暦(Windows設定)の罠にはまりかけた話 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/nobushi95/items/c4d5877fadef29c16d74"&gt;https://qiita.com/nobushi95/items/c4d5877fadef29c16d74&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;DateTime のカスタム書式指定の年 (&lt;code&gt;yyyy&lt;/code&gt;) が Windows の書式設定に依存していることについて。&lt;/p&gt;
&lt;h3 id="simplifying-f-computations-with-the-new-while-keyword.net-blog"&gt;Simplifying F# computations with the new 'while!' keyword - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/simplifying-fsharp-computations-with-the-new-while-keyword/"&gt;https://devblogs.microsoft.com/dotnet/simplifying-fsharp-computations-with-the-new-while-keyword/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;新しい &lt;code&gt;while!&lt;/code&gt; キーワードによる F# のコンピュテーション式のシンプル化について。&lt;/p&gt;
&lt;h3 id="intellitest-simplifies-writing-and-maintaining-unit-tests-visual-studio-blog"&gt;IntelliTest simplifies writing and maintaining unit tests - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/intellitest-simplifies-writing-and-maintaining-unit-tests/"&gt;https://devblogs.microsoft.com/visualstudio/intellitest-simplifies-writing-and-maintaining-unit-tests/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio Enterprise Edition で使用できる新しい IntelliTest (テストケース生成) について。&lt;/p&gt;
&lt;p&gt;新しい IntelliTest はプレビューとして .NET 6 (x64) での実行をサポートした。&lt;/p&gt;
&lt;h3 id="observing.net-microservices-with-opentelemetry-logs-traces-and-metrics"&gt;Observing .NET microservices with OpenTelemetry - logs, traces and metrics&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.codingmilitia.com/2023/09/05/observing-dotnet-microservices-with-opentelemetry-logs-traces-metrics/"&gt;https://blog.codingmilitia.com/2023/09/05/observing-dotnet-microservices-with-opentelemetry-logs-traces-metrics/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OpenTelemetry と Grafana を使用したログとトレース、メトリクスの収集と計測について。記事ではカスタムトレースやメトリックの使用方法などにも触れている。&lt;/p&gt;
&lt;h3 id="inlinearray-c-c"&gt;[雑記] InlineArray | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/study/csharp/datatype/inline-array/"&gt;https://ufcpp.net/study/csharp/datatype/inline-array/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 12 の新しい機能である InlineArray についての解説。&lt;/p&gt;
&lt;h3 id="should-you-use-the.net-8-identity-api-endpoints"&gt;Should you use the .NET 8 Identity API endpoints?&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/should-you-use-the-dotnet-8-identity-api-endpoints/"&gt;https://andrewlock.net/should-you-use-the-dotnet-8-identity-api-endpoints/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 8 の Identity API エンドポイントがどういうもので使用すべきかどうかについて。&lt;/p&gt;
&lt;p&gt;著者は .NET 8 リリース時点のものではいくつか問題があるためあまり推奨できないとしている。&lt;/p&gt;
&lt;h3 id="ctaskcompletionsource"&gt;【C#】TaskCompletionSource を使う時に意識すべき事。 - ねののお庭。&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.neno.dev/entry/2023/09/17/191002"&gt;https://blog.neno.dev/entry/2023/09/17/191002&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;TaskCompletionSource の継続処理がどのスレッドで実行されるのか注意すべき点と推奨設定について。&lt;/p&gt;
&lt;h3 id="how-to-use-yarp-as-an-ingress-controller-in-kubernetes-in-docker-desktop-kind-on-windows-11"&gt;how to use YARP as an ingress controller in Kubernetes in Docker Desktop (KinD) on Windows 11&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.baslijten.com/how-to-deploy-yarp-ingress-controller-on-kubernetes-in-docker-desktop-kind/"&gt;https://blog.baslijten.com/how-to-deploy-yarp-ingress-controller-on-kubernetes-in-docker-desktop-kind/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Yarp を Docker Desktop の Kubernetes の Ingress として使用する方法について。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="cysharpprivateproxy-source-generator-and.net-8-unsafeaccessor-based-high-performance-strongly-typed-private-accessor-for-unit-testing-and-runtime"&gt;Cysharp/PrivateProxy: Source Generator and .NET 8 UnsafeAccessor based high-performance strongly-typed private accessor for unit testing and runtime.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/Cysharp/PrivateProxy"&gt;https://github.com/Cysharp/PrivateProxy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 8 の UnsafeAccessor を使用して非公開なメンバーにアクセスするためのプロキシーを生成する Source Generator。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://neue.cc/2023/09/21_privateproxy.html"&gt;neue cc - .NET 8 UnsafeAccessor を活用したライブラリ PrivateProxy を公開しました&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;p&gt;.NET MAUI での Blazor Hybrid を Linux で動かそうとしているという話。&lt;/p&gt;
&lt;!-- https://x.com/jsuarezruiz/status/1704037700435611699?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Progress in the Blazor Hybrid support on Linux with .NET MAUI. &lt;a href="https://t.co/f418cBkrKo"&gt;https://t.co/f418cBkrKo&lt;/a&gt; Thanks &lt;a href="https://twitter.com/lytico?ref_src=twsrc%5Etfw"&gt;&amp;#64;lytico&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/dotnetmaui?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnetmaui&lt;/a&gt; &lt;a href="https://t.co/qblZnwS49F"&gt;pic.twitter.com/qblZnwS49F&lt;/a&gt;&lt;/p&gt;&amp;mdash; Javier Suárez (&amp;#64;jsuarezruiz) &lt;a href="https://twitter.com/jsuarezruiz/status/1704037700435611699?ref_src=twsrc%5Etfw"&gt;September 19, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Enumerator は Dispose しないとリソースを開放しない状態になることがあるという注意。&lt;/p&gt;
&lt;!-- https://x.com/steplyakov/status/1703814740374679858?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Do you know that it&amp;#39;s very important to dispose an enumerator even though you might think it can&amp;#39;t own any &amp;quot;managed resources&amp;quot;?&lt;br&gt;&lt;br&gt;Here is an example: TLDR; `Enumerator.Dispose` calls the finally block of an iterator block. And that can be very important to do! &lt;a href="https://t.co/T755LD4VRa"&gt;pic.twitter.com/T755LD4VRa&lt;/a&gt;&lt;/p&gt;&amp;mdash; Sergiy Teplyakov 🇺🇦 🇺🇸 (&amp;#64;STeplyakov) &lt;a href="https://twitter.com/STeplyakov/status/1703814740374679858?ref_src=twsrc%5Etfw"&gt;September 18, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;C# 12 のコレクションリテラルを使うと特定の長さの Span をスタックに確保できるというテクニック。&lt;/p&gt;
&lt;!-- https://x.com/davidfowl/status/1703437753390924070?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;My latest C# 12 hack. Using collection literals to create a stack allocated Span when under a certain length. &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/csharp?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#csharp&lt;/a&gt; &lt;a href="https://t.co/tFmRxgs5Hx"&gt;pic.twitter.com/tFmRxgs5Hx&lt;/a&gt;&lt;/p&gt;&amp;mdash; David Fowler (&amp;#64;davidfowl) &lt;a href="https://twitter.com/davidfowl/status/1703437753390924070?ref_src=twsrc%5Etfw"&gt;September 17, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2023/09/17/updates</id>
		<title>2023-09-17: .NET 8 RC1, Visual Studio 2022 17.8 Preview 2, .NET 7.0.11 &amp; 6.0.22</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2023/09/17/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2023-09-17T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="announcing.net-8-rc1.net-blog"&gt;Announcing .NET 8 RC1 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-dotnet-8-rc1/"&gt;https://devblogs.microsoft.com/dotnet/announcing-dotnet-8-rc1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 8 RC1 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは System.Text.Json の改善、Android と WASM での AOT 後の IL ストリップ、Configuration Binding ジェネレーターの破壊的変更、 コンテナーの非プレビュータグへのスイッチ、非 Windows での Win32 リソースを含む Windows アプリのビルドといった対応が含まれている。&lt;/p&gt;
&lt;h3 id="ef-core-8-rc1-complex-types-as-value-objects.net-blog"&gt;EF Core 8 RC1: Complex types as value objects - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-ef8-rc1/"&gt;https://devblogs.microsoft.com/dotnet/announcing-ef8-rc1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core 8 RC1 がリリースされた。&lt;/p&gt;
&lt;p&gt;記事では Entity Framework Core 8 での新機能のリストや複雑な型への対応について紹介している。&lt;/p&gt;
&lt;h3 id="asp.net-core-updates-in.net-8-release-candidate-1.net-blog"&gt;ASP.NET Core updates in .NET 8 Release Candidate 1 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-8-rc-1/"&gt;https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-8-rc-1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 8 RC1 での ASP.NET Core のアップデートについて。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;サーバーとミドルウェア
&lt;ul&gt;
&lt;li&gt;HTTP/3 disabled by default&lt;/li&gt;
&lt;li&gt;HTTP/3 のデフォルト無効化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;API オーサリング
&lt;ul&gt;
&lt;li&gt;Minimal APIs や MVC, SignalR でのキー付きサービスのサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Blazor
&lt;ul&gt;
&lt;li&gt;Blazor Web App テンプレートのアップデート&lt;/li&gt;
&lt;li&gt;静的サーバーレンダリングでの追加アセンブリーからのコンポーネントの発見&lt;/li&gt;
&lt;li&gt;ルーティングの改善&lt;/li&gt;
&lt;li&gt;ページ更新のトリガー&lt;/li&gt;
&lt;li&gt;QuickGrid への任意の属性の引き渡し&lt;/li&gt;
&lt;li&gt;フォームフィールドが有効かどうかの判定&lt;/li&gt;
&lt;li&gt;.NET WebAssembly ランタイムの構成&lt;/li&gt;
&lt;li&gt;Ahead-of-Time (AOT) 後の .NET IL のトリミング&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;アイデンティティ
&lt;ul&gt;
&lt;li&gt;username プロパティーの削除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Single page apps (SPA)
&lt;ul&gt;
&lt;li&gt;標準 .NET テンプレートオプション&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;メトリクス&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="announcing.net-maui-in.net-8-release-candidate-1-quality.net-blog"&gt;Announcing .NET MAUI in .NET 8 Release Candidate 1: Quality - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-dotnet-maui-in-dotnet-8-rc-1/"&gt;https://devblogs.microsoft.com/dotnet/announcing-dotnet-maui-in-dotnet-8-rc-1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 8 RC1 での .NET MAUI のアップデートについて。&lt;/p&gt;
&lt;p&gt;このリリースでは様々な品質改善をはじめ、Xcode 15 のサポートなどが行われている。&lt;/p&gt;
&lt;h3 id="performance-improvements-in.net-8.net-blog"&gt;Performance Improvements in .NET 8 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/performance-improvements-in-net-8/"&gt;https://devblogs.microsoft.com/dotnet/performance-improvements-in-net-8/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 8 でのパフォーマンス改善について詳細な解説。&lt;/p&gt;
&lt;p&gt;JIT や VM、GC をはじめ、プリミティブや String、コレクションやファイル I/O、ネットワーキングなど幅広い範囲の改善についてベンチマークなどを交えて細かく解説している。&lt;/p&gt;
&lt;h3 id="visual-studio-2022-17.8-preview-2-has-arrived-visual-studio-blog"&gt;Visual Studio 2022 17.8 Preview 2 has arrived! - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2022-17-8-preview-2-has-arrived/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-2022-17-8-preview-2-has-arrived/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.8 Preview 2 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは Git および GitHub に関連する機能の改善、C++ 関連の機能の改善、F# 関連の機能の改善、クロスプラットフォームでの Edit and Continue/Hot Reload のサポート、Linux の App Service へのアタッチ、.NET の Meters API によるカウンターのサポート、テストプロファイリング、エンタープライズ管理などが含まれている。&lt;/p&gt;
&lt;h3 id="net-september-2023-updates.net-7.0.11.net-6.0.22.net-blog"&gt;.NET September 2023 Updates – .NET 7.0.11, .NET 6.0.22 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/september-2023-updates/"&gt;https://devblogs.microsoft.com/dotnet/september-2023-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7.0.11 および 6.0.22 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは5つのセキュリティー修正が含まれているほか、いくつかの改善や不具合修正が含まれている。&lt;/p&gt;
&lt;h3 id="net-framework-september-2023-security-and-quality-rollup-updates.net-blog"&gt;.NET Framework September 2023 Security and Quality Rollup Updates - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-framework-september-2023-security-and-quality-rollup-updates/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-framework-september-2023-security-and-quality-rollup-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework の2023年9月のセキュリティーと品質累積アップデートがリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは5つのセキュリティー修正といくつかの不具合が修正されている。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="loh-vs-poh-understanding-the-two-special-segments-of-the.net-heap"&gt;LOH vs POH: Understanding the Two Special Segments of the .NET Heap&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;ramin.h/loh-vs-poh-understanding-the-two-special-segments-of-the-net-heap-60badb4842f0"&gt;https://medium.com/&amp;#64;ramin.h/loh-vs-poh-understanding-the-two-special-segments-of-the-net-heap-60badb4842f0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LOH (Large Object Heap) と .NET 5 で導入された POH (Pinned Object Heap) の違いについて。&lt;/p&gt;
&lt;h3 id="ref-readonly-c-c"&gt;ref readonly 引数 - 参照渡し | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/study/csharp/sp_ref.html#ref-readonly-param"&gt;https://ufcpp.net/study/csharp/sp_ref.html#ref-readonly-param&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 12 の &lt;code&gt;ref readonly&lt;/code&gt; 引数についての解説。&lt;/p&gt;
&lt;h3 id="building-a-minimal-asp.net-core-clone"&gt;Building a Minimal ASP.NET Core clone&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://steven-giesel.com/blogPost/e84dec43-51f1-4c70-8b3b-dcdb1c3164ce"&gt;https://steven-giesel.com/blogPost/e84dec43-51f1-4c70-8b3b-dcdb1c3164ce&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;コントローラー、DI、ミドルウェアとルーティングを実装してミニマルな ASP.NET Core を再現する試み。&lt;/p&gt;
&lt;h3 id="net-8-rc1-c-tokyo-connpass"&gt;【配信】.NET 8 RC1！ C# Tokyo イベント - connpass&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://csharp-tokyo.connpass.com/event/296696/"&gt;https://csharp-tokyo.connpass.com/event/296696/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;9/19(火) に行われる C# Tokyo での配信イベント。&lt;/p&gt;
&lt;h3 id="creating-custom-health-checks-in.net-core"&gt;Creating Custom Health Checks in .NET Core&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/me_janki/creating-custom-health-checks-in-net-core-e5n"&gt;https://dev.to/me_janki/creating-custom-health-checks-in-net-core-e5n&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;カスタムなヘルスチェックを実装する方法について。記事ではデータベースへの接続チェックでの例を実装している。&lt;/p&gt;
&lt;h3 id="architecting-ambie-4.0"&gt;Architecting Ambie 4.0&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://kidjenius.medium.com/architecting-ambie-4-0-c0a69da915db"&gt;https://kidjenius.medium.com/architecting-ambie-4-0-c0a69da915db&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ambie という UWP で実装された環境サウンドプレイヤーのアーキテクチャーについて。&lt;/p&gt;
&lt;h3 id="designing-ambie-4.0"&gt;Designing Ambie 4.0&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://kidjenius.medium.com/designing-ambie-4-0-9615fdc7a752"&gt;https://kidjenius.medium.com/designing-ambie-4-0-9615fdc7a752&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ambie という UWP で実装された環境サウンドプレイヤーの UI デザインについて。&lt;/p&gt;
&lt;h3 id="first-class-upgrades-for-asp.net-core-with-jetbrains-annotations-the.net-tools-blog"&gt;First-class Upgrades for ASP.NET Core with JetBrains Annotations | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/09/14/first-class-upgrades-for-aspnet-core-with-jetbrains-annotations/"&gt;https://blog.jetbrains.com/dotnet/2023/09/14/first-class-upgrades-for-aspnet-core-with-jetbrains-annotations/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JetBrains.Annotations を使用して Rider と ReSharper での ASP.NET Core アプリケーション開発の体験を改善する方法について。&lt;/p&gt;
&lt;h3 id="whats-new-in-teams-toolkit-for-visual-studio-2022.net-blog"&gt;What's new in Teams Toolkit for Visual Studio 2022? - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/teams-toolkit-vs177-update/"&gt;https://devblogs.microsoft.com/dotnet/teams-toolkit-vs177-update/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Teams Toolkit for Visual Studio 2022 の新機能についての紹介。&lt;/p&gt;
&lt;p&gt;アプリのライフサイクルの自動化やトンネリングを使用したデバッグなどについて。&lt;/p&gt;
&lt;h3 id="power-automate-desktop.net"&gt;Power Automate Desktop .NETスクリプトでデータテーブルを操作する&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/pfirsich/articles/3db3f81dc6436d"&gt;https://zenn.dev/pfirsich/articles/3db3f81dc6436d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Power Automate Desktop のスクリプトアクションでサポートされた .NET スクリプトについて。&lt;/p&gt;
&lt;p&gt;ただし使用できる C# のバージョンは 5 とのこと。&lt;/p&gt;
&lt;h3 id="reverse-engineering-natively-compiled.net-apps"&gt;Reverse engineering natively-compiled .NET apps&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://migeel.sk/blog/2023/09/15/reverse-engineering-natively-compiled-dotnet-apps/"&gt;https://migeel.sk/blog/2023/09/15/reverse-engineering-natively-compiled-dotnet-apps/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NativeAOT デコンパイルされた .NET アプリケーションをリバースエンジニアリングする方法について。&lt;/p&gt;
&lt;h3 id="dont-build-your-own-bespoke-company-frameworks-on-top-of-akka.net"&gt;Don't Build Your Own Bespoke Company Frameworks on Top of Akka.NET&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://petabridge.com/blog/akkadotnet-application-management-best-practices/"&gt;https://petabridge.com/blog/akkadotnet-application-management-best-practices/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Akka.NET 上に企業固有のフレームワークを構築するよりもパターン指向のアプローチを推奨するという記事。&lt;/p&gt;
&lt;h3 id="balancing-user-updates-with-security-best-practices-visual-studio-blog"&gt;Balancing User Updates with Security Best Practices - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/standard-user-update/"&gt;https://devblogs.microsoft.com/visualstudio/standard-user-update/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;標準ユーザーが更新できるようになったこととセキュリティー機能についての紹介。&lt;/p&gt;
&lt;h3 id="convert-complex-yaml-to.net-types-with-custom-yamldotnet-type-converters"&gt;Convert complex YAML to .NET types with custom YamlDotNet type converters&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/asimmon/convert-complex-yaml-to-net-types-with-custom-yamldotnet-type-converters-4l9"&gt;https://dev.to/asimmon/convert-complex-yaml-to-net-types-with-custom-yamldotnet-type-converters-4l9&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;YamlDotNet で複雑な YAML を .NET の型に変換するための型コンバーターを実装する方法について。&lt;/p&gt;
&lt;h3 id="tales-from-the.net-migration-trenches-shared-library"&gt;Tales from the .NET Migration Trenches - Shared Library&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.jimmybogard.com/tales-from-the-net-migration-trenches-shared-library/"&gt;https://www.jimmybogard.com/tales-from-the-net-migration-trenches-shared-library/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework から .NET への移行手法における共有ライブラリーの導入について。&lt;/p&gt;
&lt;h3 id="azure-functions.net-8"&gt;Azure Functions の .NET 8 向けアップデートが発表された - しばやん雑記&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.shibayan.jp/entry/20230912/1694509574"&gt;https://blog.shibayan.jp/entry/20230912/1694509574&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure Functions での .NET 8 のアップデートについて。&lt;/p&gt;
&lt;p&gt;Isolated と In-Process の対応についてのほか、ASP.NET Core Integration について、コールドスタートの改善のためのいくつかについても触れている。&lt;/p&gt;
&lt;h3 id="implement-a-secure-web-application-using-nx-standalone-angular-and-an-asp.net-core-server"&gt;Implement a secure web application using nx Standalone Angular and an ASP.NET Core server&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://damienbod.com/2023/09/11/implement-a-secure-web-application-using-nx-standalone-angular-and-an-asp-net-core-server/"&gt;https://damienbod.com/2023/09/11/implement-a-secure-web-application-using-nx-standalone-angular-and-an-asp-net-core-server/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Angular と ASP.NET Core を使用してセキュリティー保護されたアプリケーションを実装する方法について。&lt;/p&gt;
&lt;h3 id="windows-app-sdk"&gt;Windows App SDK を使ってモダンなタイトルバーを持つアプリケーションを作る - しばやん雑記&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.shibayan.jp/entry/20230911/1694400481"&gt;https://blog.shibayan.jp/entry/20230911/1694400481&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows App SDK のタイトルバーカスタマイズで電卓やストアのようなモダンな Windows アプリケーションのタイトルバーを実現する方法について。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="jonathanpeppersdotnes.net-for-the-nes-game-console"&gt;jonathanpeppers/dotnes: .NET for the NES game console&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/jonathanpeppers/dotnes"&gt;https://github.com/jonathanpeppers/dotnes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET で NES (ファミコン) の実行バイナリーを生成するツール。&lt;/p&gt;
&lt;p&gt;MSIL を 6502 のアセンブリにトランスパイルする仕組みで生成している。&lt;/p&gt;
&lt;h3 id="leonardochaiadotnet-affected.net-tool-for-determining-which-projects-are-affected-by-a-set-of-changes.useful-for-large-projects-or-monorepos"&gt;leonardochaia/dotnet-affected: .NET tool for determining which projects are affected by a set of changes. Useful for large projects or monorepos.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/leonardochaia/dotnet-affected"&gt;https://github.com/leonardochaia/dotnet-affected&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;変更セットからどのプロジェクトが影響を受けるかを調べるツール。&lt;/p&gt;
&lt;h3 id="exception-visualizer-visual-studio-marketplace"&gt;Exception Visualizer - Visual Studio Marketplace&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=elmahio.exceptioninspector"&gt;https://marketplace.visualstudio.com/items?itemName=elmahio.exceptioninspector&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 向けの例外のビジュアライザー拡張。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.elmah.io/creating-custom-debug-visualizers-for-visual-studio-2022/"&gt;Creating custom debug visualizers for Visual Studio 2022&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- https://x.com/thomasardal/status/1701220984320049643?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;If anyone wants to try my new Exception Visualizer for Visual Studio, there&amp;#39;s a (guaranteed to crash once in a while) extension available here: &lt;a href="https://t.co/taEZb3Foo5"&gt;https://t.co/taEZb3Foo5&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/visualstudio?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#visualstudio&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/vsix?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#vsix&lt;/a&gt; &lt;a href="https://t.co/eUaoopGB5I"&gt;pic.twitter.com/eUaoopGB5I&lt;/a&gt;&lt;/p&gt;&amp;mdash; Thomas Ardal 🦄 elmah.io (&amp;#64;ThomasArdal) &lt;a href="https://twitter.com/ThomasArdal/status/1701220984320049643?ref_src=twsrc%5Etfw"&gt;September 11, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://x.com/ufcpp/status/1703065887627231314?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="ja" dir="ltr"&gt;空コレクションのGetEnumeratorが全部同じenumeratorを返す例。&lt;br&gt;(コード追っていくとシングルトンで同じインスタンス返してそう)。&lt;br&gt;これとPGOのguarded devirtualizationかかると、マジで foreach (var x in list ?? []) の類のループ消えるかも。 &lt;a href="https://t.co/mJ4KjlklvK"&gt;pic.twitter.com/mJ4KjlklvK&lt;/a&gt;&lt;/p&gt;&amp;mdash; ++C++; // 管理人: 岩永 (&amp;#64;ufcpp) &lt;a href="https://twitter.com/ufcpp/status/1703065887627231314?ref_src=twsrc%5Etfw"&gt;September 16, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;!-- https://x.com/bricelambs/status/1702777696932266417?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;For the &lt;a href="https://twitter.com/hashtag/MicrosoftHackathon?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#MicrosoftHackathon&lt;/a&gt;, I added SQL syntax highlighting to C# strings in &lt;a href="https://twitter.com/hashtag/VisualStudio?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#VisualStudio&lt;/a&gt;. &lt;a href="https://twitter.com/hashtag/MicrosoftLife?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#MicrosoftLife&lt;/a&gt; &lt;a href="https://t.co/85xcz9HE4U"&gt;https://t.co/85xcz9HE4U&lt;/a&gt;&lt;/p&gt;&amp;mdash; Brice Lambson🦄 (&amp;#64;bricelambs) &lt;a href="https://twitter.com/bricelambs/status/1702777696932266417?ref_src=twsrc%5Etfw"&gt;September 15, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;!-- https://x.com/kookiz/status/1702050892587954242?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;While reading Stephen Toub&amp;#39;s article on .NET 8 performance, I noticed a very interesting feature introduced in .NET 8, that I never heard about: [UnsafeAccessor].&lt;br&gt;It allows you to get a reference to a private field or method of a target type while ignoring visibility checks.… &lt;a href="https://t.co/MLfysOMp0W"&gt;pic.twitter.com/MLfysOMp0W&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kevin Gosse (&amp;#64;KooKiz) &lt;a href="https://twitter.com/KooKiz/status/1702050892587954242?ref_src=twsrc%5Etfw"&gt;September 13, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;!-- https://x.com/davidfowl/status/1701449085784592888?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Today we reviewed the C# 12 features shipping in .NET 8. Collection literals are one of my favorite features. The code generation is also *HEAVILY* optimized and will get better in future releases! &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/csharp?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#csharp&lt;/a&gt; &lt;a href="https://t.co/46p6koScic"&gt;pic.twitter.com/46p6koScic&lt;/a&gt;&lt;/p&gt;&amp;mdash; David Fowler (&amp;#64;davidfowl) &lt;a href="https://twitter.com/davidfowl/status/1701449085784592888?ref_src=twsrc%5Etfw"&gt;September 12, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2023/09/10/updates</id>
		<title>2023-09-10: grpc-dotnet v2.57.0, Uno Platform 4.10.13, Windows Community Toolkit v8.0</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2023/09/10/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2023-09-10T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="release-release-v2.57.0-grpcgrpc-dotnet"&gt;Release Release v2.57.0 · grpc/grpc-dotnet&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/grpc/grpc-dotnet/releases/tag/v2.57.0"&gt;https://github.com/grpc/grpc-dotnet/releases/tag/v2.57.0&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="release-4.10.13-unoplatformuno"&gt;Release 4.10.13 · unoplatform/uno&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/unoplatform/uno/releases/tag/4.10.13"&gt;https://github.com/unoplatform/uno/releases/tag/4.10.13&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="announcing-windows-community-toolkit-v8.0-ifdef-windows"&gt;Announcing Windows Community Toolkit v8.0 - #ifdef Windows&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/ifdef-windows/announcing-windows-community-toolkit-v8-0/"&gt;https://devblogs.microsoft.com/ifdef-windows/announcing-windows-community-toolkit-v8-0/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="wpf-file-dialog-improvements-in.net-8.net-blog"&gt;WPF File Dialog Improvements in .NET 8 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/wpf-file-dialog-improvements-in-dotnet-8/"&gt;https://devblogs.microsoft.com/dotnet/wpf-file-dialog-improvements-in-dotnet-8/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="green-thread-experiment-results-issue-2398-dotnetruntimelab"&gt;Green Thread Experiment Results · Issue #2398 · dotnet/runtimelab&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtimelab/issues/2398"&gt;https://github.com/dotnet/runtimelab/issues/2398&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="debugging-docker-compose-solutions-in-jetbrains-rider-a-deep-dive"&gt;Debugging Docker Compose Solutions in JetBrains Rider: A Deep Dive&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/maxarshinov/debugging-docker-compose-solutions-in-jetbrains-rider-a-deep-dive-2a2d"&gt;https://dev.to/maxarshinov/debugging-docker-compose-solutions-in-jetbrains-rider-a-deep-dive-2a2d&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="daniel-cazzulino-creator-of-moq-and-sponsorlink-code-code-ship"&gt;Daniel Cazzulino, creator of Moq and SponsorLink · Code Code Ship&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://codecodeship.com/blog/2023-09-07-daniel-cazzulino"&gt;https://codecodeship.com/blog/2023-09-07-daniel-cazzulino&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="everything-you-need-to-know-about-configuration-and-secret-management-in.net"&gt;Everything you need to know about configuration and secret management in .NET&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://stenbrinke.nl/blog/configuration-and-secret-management-in-dotnet/"&gt;https://stenbrinke.nl/blog/configuration-and-secret-management-in-dotnet/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-annotated-monthly-september-2023-the.net-tools-blog"&gt;.NET Annotated Monthly | September 2023 | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/09/07/net-annotated-monthly-september-2023/"&gt;https://blog.jetbrains.com/dotnet/2023/09/07/net-annotated-monthly-september-2023/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="elevating-debugging-with-auto-decompilation-and-external-sources-visual-studio-blog"&gt;Elevating Debugging with Auto-decompilation and External Sources - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/elevating-debugging-with-auto-decompilation-and-external-sources/"&gt;https://devblogs.microsoft.com/visualstudio/elevating-debugging-with-auto-decompilation-and-external-sources/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="vulkan-wpf-qiita"&gt;Vulkan から WPF に直接イメージをコピーする - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/moka76203078/items/70d5cb4530f7994f7374"&gt;https://qiita.com/moka76203078/items/70d5cb4530f7994f7374&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="demystifying-retrieval-augmented-generation-with.net.net-blog"&gt;Demystifying Retrieval Augmented Generation with .NET - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/demystifying-retrieval-augmented-generation-with-dotnet/"&gt;https://devblogs.microsoft.com/dotnet/demystifying-retrieval-augmented-generation-with-dotnet/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="keep-your-casing-with-case-preserving-find-and-replace-visual-studio-blog"&gt;Keep your casing with Case-preserving Find and Replace - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/keep-your-casing-with-case-preserving-find-and-replace/"&gt;https://devblogs.microsoft.com/visualstudio/keep-your-casing-with-case-preserving-find-and-replace/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="introducing-the-identity-api-endpoints-exploring-the.net-8-preview-part-8"&gt;Introducing the Identity API endpoints: Exploring the .NET 8 preview - Part 8&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/exploring-the-dotnet-8-preview-introducing-the-identity-api-endpoints/"&gt;https://andrewlock.net/exploring-the-dotnet-8-preview-introducing-the-identity-api-endpoints/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="redos-attacks-how-regex-can-bring-down-your-system-and-how-to-avoid-them"&gt;ReDoS Attacks: How Regex Can Bring Down Your System and How to Avoid Them&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://levelup.gitconnected.com/redos-attacks-how-regex-can-bring-down-your-system-and-how-to-avoid-them-355f269c1f9d"&gt;https://levelup.gitconnected.com/redos-attacks-how-regex-can-bring-down-your-system-and-how-to-avoid-them-355f269c1f9d&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="resharper-2023.3-roadmap-the.net-tools-blog"&gt;ReSharper 2023.3 Roadmap | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/09/05/resharper-2023-3-roadmap/"&gt;https://blog.jetbrains.com/dotnet/2023/09/05/resharper-2023-3-roadmap/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="rider-2023.3-roadmap-the.net-tools-blog"&gt;Rider 2023.3 Roadmap | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/09/05/rider-2023-3-roadmap/"&gt;https://blog.jetbrains.com/dotnet/2023/09/05/rider-2023-3-roadmap/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="blazor-qiita"&gt;Blazorでカレンダーコンポーネントを使ってみる - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/HAGITAKO/items/7c091a0ca5ed6ca917ba"&gt;https://qiita.com/HAGITAKO/items/7c091a0ca5ed6ca917ba&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="supercharge-your.net-data-visualizations-with-grafana-dashboards-find-out-how"&gt;Supercharge Your .NET Data Visualizations with Grafana Dashboards — Find Out How!&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.devops.dev/supercharge-your-net-data-visualizations-with-grafana-dashboards-find-out-how-4d955904629b"&gt;https://blog.devops.dev/supercharge-your-net-data-visualizations-with-grafana-dashboards-find-out-how-4d955904629b&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="blazingstory-a-blazor-component-development-game-changer"&gt;BlazingStory: A Blazor Component Development Game Changer&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;mariekie/blazingstory-a-blazor-component-development-game-changer-9b249dc7de34"&gt;https://medium.com/&amp;#64;mariekie/blazingstory-a-blazor-component-development-game-changer-9b249dc7de34&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="wpfmain"&gt;WPFアプリケーションのMainメソッドを編集する&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/hat_kotap/articles/1652558a2aaa48"&gt;https://zenn.dev/hat_kotap/articles/1652558a2aaa48&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="investigating.net-out-of-memory-exceptions-using-sysinternals-procdump-for-linux"&gt;Investigating .NET Out of Memory Exceptions Using Sysinternals ProcDump for Linux&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;marioh_78322/investigating-net-out-of-memory-exceptions-using-sysinternals-procdump-for-linux-8a59c8b289"&gt;https://medium.com/&amp;#64;marioh_78322/investigating-net-out-of-memory-exceptions-using-sysinternals-procdump-for-linux-8a59c8b289&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="taskvaluetask-asyncawait"&gt;Task/ValueTask を直接返せる場合でも原則非同期メソッド (async/await) にしたほうが良い&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/mayuki/articles/96a17916096714"&gt;https://zenn.dev/mayuki/articles/96a17916096714&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="tales-from-the.net-migration-trenches-empty-proxy"&gt;Tales from the .NET Migration Trenches - Empty Proxy&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.jimmybogard.com/tales-from-the-net-migration-trenches-empty-proxy/"&gt;https://www.jimmybogard.com/tales-from-the-net-migration-trenches-empty-proxy/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="bearertoken-the-new-authentication-handler-in.net-8-tore-nestenius-trainer-and-senior-software-developer"&gt;BearerToken: The new Authentication handler in .NET 8 – Tore Nestenius | Trainer and Senior Software Developer&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://nestenius.se/2023/08/29/bearertoken-the-new-authentication-handler-in-net-8/"&gt;https://nestenius.se/2023/08/29/bearertoken-the-new-authentication-handler-in-net-8/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="the-weak-event-pattern-in-c"&gt;The &amp;quot;Weak Event&amp;quot; Pattern in C#&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://steven-giesel.com/blogPost/675b75fc-2c1b-43da-9ff8-42962ca8159b"&gt;https://steven-giesel.com/blogPost/675b75fc-2c1b-43da-9ff8-42962ca8159b&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="c.net-worker-service-health-check"&gt;【C#】.NET Worker Service の health check。 - ねののお庭。&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.neno.dev/entry/2023/09/10/153014"&gt;https://blog.neno.dev/entry/2023/09/10/153014&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="use-dateonly-and-timeonly-with-ef-core-6-7-8-and-azure-sql-sql-server"&gt;Use DateOnly and TimeOnly with EF Core 6, 7 &amp;amp; 8 and Azure SQL / SQL Server&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://erikej.github.io/efcore/sqlserver/2023/09/03/efcore-dateonly-timeonly.html"&gt;https://erikej.github.io/efcore/sqlserver/2023/09/03/efcore-dateonly-timeonly.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://x.com/marcgravell/status/1698357724470276104?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;So it looks like the main feedback here is &amp;quot;book&amp;quot;; I&amp;#39;m going to give it a whirl! Watch this space...&lt;a href="https://t.co/ijwIPp36MF"&gt;https://t.co/ijwIPp36MF&lt;/a&gt; &lt;a href="https://t.co/TgwOB9GC8J"&gt;https://t.co/TgwOB9GC8J&lt;/a&gt;&lt;/p&gt;&amp;mdash; Marc Gravell (&amp;#64;marcgravell) &lt;a href="https://twitter.com/marcgravell/status/1698357724470276104?ref_src=twsrc%5Etfw"&gt;September 3, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2023/09/03/updates</id>
		<title>2023-09-03: Visual Studio for Mac Retirement, Windows App SDK 1.4.0, Polly 8.0.0-beta.1</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2023/09/03/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2023-09-03T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="visual-studio-for-mac-retirement-announcement-visual-studio-blog"&gt;Visual Studio for Mac Retirement Announcement - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-for-mac-retirement-announcement/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-for-mac-retirement-announcement/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio for Mac の開発終了のアナウンス。&lt;/p&gt;
&lt;p&gt;今後の開発は Visual Studio と Visual Studio Code にフォーカスするため Visual Studio for Mac 17.6 が最終バージョンとなる。12か月後の2024年8月31日までのサポートとなり、今後新機能や新しいフレームワークのサポートなどが追加されることはない。&lt;/p&gt;
&lt;p&gt;代替ソリューションとして Visual Studio Code と C# Dev Kit の利用、Mac 上の VM での Visual Studio の利用、クラウド上の VM である Dev Box での Visual Studio の利用などを推奨している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/09/01/65-off-rider/"&gt;JetBrains Rider Welcomes Visual Studio for Mac Users With a 65% Discount on New Personal Subscriptions | The .NET Tools Blog&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;発表を受けて JetBrains Rider の Personal Subscription が 6/4 午前6時 UTC (日本時間で6/4 15時) まで65%オフ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="release-v1.4.0-microsoftwindowsappsdk"&gt;Release v1.4.0 · microsoft/WindowsAppSDK&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/microsoft/WindowsAppSDK/releases/tag/v1.4.0"&gt;https://github.com/microsoft/WindowsAppSDK/releases/tag/v1.4.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows App SDK 1.4.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは XAML Island が Experimental ではなくなったほか、ItemsView の追加、DesktopAcrylicController と MicaController の使いやすさの向上などが含まれる。&lt;/p&gt;
&lt;h3 id="release-8.0.0-beta.1-app-vnextpolly"&gt;Release 8.0.0-beta.1 · App-vNext/Polly&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/App-vNext/Polly/releases/tag/8.0.0-beta.1"&gt;https://github.com/App-vNext/Polly/releases/tag/8.0.0-beta.1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Polly 8.0.0-beta.1 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースではアルファーからベータに向けて API のレビューが行われている。&lt;/p&gt;
&lt;h3 id="new.net-upgrade-assistant-version-with-feature-updates-and.net-maui-improvements.net-blog"&gt;New .NET Upgrade Assistant version with feature updates and .NET MAUI improvements! - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/upgrade-assistant-august-2023-update/"&gt;https://devblogs.microsoft.com/dotnet/upgrade-assistant-august-2023-update/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Upgrade Assistant の8月のアップデートについて。&lt;/p&gt;
&lt;p&gt;このリリースではプロジェクトファイルの SDK スタイルへのアップデートのみを行えるようになったほか、.NET MAUI の移行について CLI を使用した macOS でのアップグレードが可能となるなどの改善が行われている。&lt;/p&gt;
&lt;h3 id="join-us-for-jetbrains.net-day-online-23-the.net-tools-blog"&gt;Join us for JetBrains .NET Day Online ’23 | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/08/30/dotnet-day-online-23/"&gt;https://blog.jetbrains.com/dotnet/2023/08/30/dotnet-day-online-23/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JetBrains .NET Day Online '23 についてのアナウンス。&lt;/p&gt;
&lt;p&gt;JetBrains によるオンラインで .NET に関するセッションを配信するイベントが9月26日に行われる。記事では現時点でのアジェンダを紹介している。&lt;/p&gt;
&lt;h3 id="announcing-the-new-foundational-c-certification-with-freecodecamp.net-blog"&gt;Announcing the New Foundational C# Certification with freeCodeCamp - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-foundational-csharp-certification/"&gt;https://devblogs.microsoft.com/dotnet/announcing-foundational-csharp-certification/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;freeCodeCamp で基礎 C# 認定資格の提供を開始した。&lt;/p&gt;
&lt;p&gt;freeCodeCamp はプログラミングなどに関する学習リソースを提供する慈善団体で、今回 C# に関する認定試験が追加された。Microsoft Learn と連携し、試験を認定を取得できる。&lt;/p&gt;
&lt;h3 id="release-diagnostics-release-v7.0.442301-dotnetdiagnostics"&gt;Release Diagnostics Release - v7.0.442301 · dotnet/diagnostics&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/diagnostics/releases/tag/v7.0.442301"&gt;https://github.com/dotnet/diagnostics/releases/tag/v7.0.442301&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 診断ツール v7.0.442301 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは dotnet-dump/SOS の不具合が修正されているほか、dumpexception コマンドが追加された。&lt;/p&gt;
&lt;h3 id="announcing-appwrites-new.net-sdk"&gt;Announcing Appwrite’s New .NET SDK&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/appwrite/announcing-appwrites-new-net-sdk-5028"&gt;https://dev.to/appwrite/announcing-appwrites-new-net-sdk-5028&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Appwrite の .NET 向け SDK がリリースされた。&lt;/p&gt;
&lt;p&gt;この SDK を使用することで AppWrite のサーバーサイド向けの機能を .NET で利用できるようになる。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="not-all-o1-operations-are-considered-equal"&gt;Not all O(1) operations are considered equal&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ayende.com/blog/200033-B/not-all-o-1-operations-are-considered-equal?Key=9b63efc3-8651-43b1-a301-6051e87361da"&gt;https://ayende.com/blog/200033-B/not-all-o-1-operations-are-considered-equal?Key=9b63efc3-8651-43b1-a301-6051e87361da&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Dictionary&lt;/code&gt; のルックアップを減らすために &lt;code&gt;List&lt;/code&gt; にしてインデックスを保持するようにするという手段を適用したということについて。&lt;/p&gt;
&lt;h3 id="generate-ascii-art-a-simple-how-to-in-c"&gt;Generate ASCII Art — A Simple How To In C#&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;devleaderca/generate-ascii-art-a-simple-how-to-in-c-1b3f53a972f0"&gt;https://medium.com/&amp;#64;devleaderca/generate-ascii-art-a-simple-how-to-in-c-1b3f53a972f0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;画像から ASCII の文字で濃淡を表現するアスキーアートを生成する方法について。&lt;/p&gt;
&lt;h3 id="net-8-randomness-guide-exploring-new-methods-techniques-in-2023"&gt;NET 8 Randomness Guide: Exploring New Methods &amp;amp; Techniques in 2023&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.thatamazingprogrammer.com/the-art-of-randomness-in-net-8-new-methods-and-techniques"&gt;https://www.thatamazingprogrammer.com/the-art-of-randomness-in-net-8-new-methods-and-techniques&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 8 でのランダムに関する新しい API (&lt;code&gt;GetItem&lt;/code&gt;, &lt;code&gt;Shuffle&lt;/code&gt;) の紹介。&lt;/p&gt;
&lt;h3 id="mastering-cross-platform-deployment-blazor-wasm-applications-with-electron.js-and-auto-updates-via-github-actions"&gt;Mastering Cross-Platform Deployment: Blazor WASM Applications with Electron.js and Auto-Updates via GitHub Actions&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;dejandjenic/mastering-cross-platform-deployment-blazor-wasm-applications-with-electron-js-509dc4338450"&gt;https://medium.com/&amp;#64;dejandjenic/mastering-cross-platform-deployment-blazor-wasm-applications-with-electron-js-509dc4338450&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor WASM アプリケーションを Electron で自動アップデートを有効にしたパッケージングを GitHub Actions で行う方法について。&lt;/p&gt;
&lt;h3 id="c8.0exclusive-end-qiita"&gt;C#8.0で導入された配列インデクサの範囲指定がexclusive endな理由 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/jun1s/items/a56b80eb5a2dead6617f"&gt;https://qiita.com/jun1s/items/a56b80eb5a2dead6617f&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 8 での配列インデクサで利用できる配列記法が exclusive end (最後を含まない) 理由についての考察。&lt;/p&gt;
&lt;h3 id="linq-internals-speed-optimizations"&gt;LINQ Internals: Speed Optimizations&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://antao-almada.medium.com/linq-internals-speed-optimizations-1d99b53750bb"&gt;https://antao-almada.medium.com/linq-internals-speed-optimizations-1d99b53750bb&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LINQ のオペレーター内でどのような最適化が行われているかについての紹介。&lt;/p&gt;
&lt;h3 id="form-binding-in-minimal-apis-exploring-the.net-8-preview-part-7"&gt;Form binding in minimal APIs: Exploring the .NET 8 preview - Part 7&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/exploring-the-dotnet-8-preview-form-binding-in-minimal-apis/"&gt;https://andrewlock.net/exploring-the-dotnet-8-preview-form-binding-in-minimal-apis/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 8 での Minimal API におけるフォームのバインディングに関する解説。&lt;/p&gt;
&lt;p&gt;記事では CSRF 対策トークンの取り扱いや、様々な制限などについても解説している。&lt;/p&gt;
&lt;h3 id="c-lambdas-a-code-teardown"&gt;C# Lambdas: A Code Teardown&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ricomariani.medium.com/c-lambdas-a-code-teardown-b345ce255212"&gt;https://ricomariani.medium.com/c-lambdas-a-code-teardown-b345ce255212&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# のラムダを使用したときの機械語レベルでのコードサイズについて。&lt;/p&gt;
&lt;h3 id="azure-app-service"&gt;Azure App Service のアプリケーション設定でオブジェクトや配列を設定する方法&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/microsoft/articles/app-service-array"&gt;https://zenn.dev/microsoft/articles/app-service-array&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure App Service のアプリケーション設定で Microsoft.Extensions.Configuration の環境変数設定を通してオブジェクトや配列を設定する方法について。&lt;/p&gt;
&lt;h3 id="measuring-unicode-string-lengths-with-c-khalid-abuhakmeh"&gt;Measuring Unicode String Lengths with C# | Khalid Abuhakmeh&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://khalidabuhakmeh.com/measuring-unicode-string-lengths-with-csharp"&gt;https://khalidabuhakmeh.com/measuring-unicode-string-lengths-with-csharp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unicode 文字列の長さを取得する方法について。&lt;/p&gt;
&lt;h3 id="hidden-features-in-visual-studio-that-you-may-not-know"&gt;9 &amp;quot;hidden&amp;quot; features in Visual Studio that you may not know&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.elmah.io/9-hidden-features-in-visual-studio-that-you-may-not-know/"&gt;https://blog.elmah.io/9-hidden-features-in-visual-studio-that-you-may-not-know/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio の隠れた便利機能9つの紹介。&lt;/p&gt;
&lt;h3 id="collecting-memory-dumps-for.net-core-on-kubernetes"&gt;Collecting memory dumps for .NET Core on Kubernetes&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://cezarypiatek.github.io/post/memory-dump-on-kubernetes/"&gt;https://cezarypiatek.github.io/post/memory-dump-on-kubernetes/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Kubernets 上で動作している .NET アプリケーションからメモリーダンプを取得する手順について。&lt;/p&gt;
&lt;h3 id="compiling-rust-for.net-using-only-tea-and-stubbornness"&gt;Compiling Rust for .NET, using only tea and stubbornness!&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://fractalfir.github.io/generated_html/rustc_codegen_clr_v0_0_1.html"&gt;https://fractalfir.github.io/generated_html/rustc_codegen_clr_v0_0_1.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rust を .NET の IL にコンパイルする試みを行っていることついて。&lt;/p&gt;
&lt;h3 id="system.text.josn-foo1-int-foo-getset-jsakamoto"&gt;System.Text.Josn で、文字列になってる数値 &amp;quot;Foo&amp;quot;:&amp;quot;1&amp;quot; を int Foo {get;set;} に逆シリアル化する方法 | &amp;#64;jsakamoto&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devadjust.exblog.jp/29682981/"&gt;https://devadjust.exblog.jp/29682981/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JSON の値として数値が文字列として表現されている場合に、System.Text.Json で数値として変換して受け取る方法について。&lt;/p&gt;
&lt;h3 id="implementing-a-feature-flag-based-endpoint-filter"&gt;Implementing a Feature Flag-based Endpoint Filter&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://timdeschryver.dev/blog/implementing-a-feature-flag-based-endpoint-filter"&gt;https://timdeschryver.dev/blog/implementing-a-feature-flag-based-endpoint-filter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;エンドポイントフィルターでフィーチャーフラグを元に操作する方法ついて。&lt;/p&gt;
&lt;h3 id="struct-memory-layout-optimizations-practical-considerations"&gt;Struct memory layout optimizations, practical considerations&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ayende.com/blog/199841-A/struct-memory-layout-optimizations-practical-considerations?Key=a53d68c5-1801-429b-af30-3fd406eabc6e&amp;amp;"&gt;https://ayende.com/blog/199841-A/struct-memory-layout-optimizations-practical-considerations?Key=a53d68c5-1801-429b-af30-3fd406eabc6e&amp;amp;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;class と struct のメモリーレイアウトの違いと最適化について。&lt;/p&gt;
&lt;h2 id="section-2"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-3"&gt;ツイート&lt;/h3&gt;
&lt;p&gt;Avalonia UI の Visual Studio Code 用拡張がリリースされた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://visualstudiomagazine.com/articles/2023/08/30/avalonia-vs-code-ga.aspx"&gt;Avalonia VS Code Tool Now in Preview for Everyone -- Visual Studio Magazine&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- https://x.com/avaloniaui/status/1696469591138972127?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;We know you&amp;#39;ve been waiting for this! &lt;br&gt;&lt;br&gt;The Avalonia &lt;a href="https://twitter.com/code?ref_src=twsrc%5Etfw"&gt;&amp;#64;code&lt;/a&gt; extension is now available for everyone to try. &lt;br&gt;&lt;br&gt;Keep in mind that it&amp;#39;s a preview release. We welcome all your feedback! &lt;a href="https://t.co/si3gZsB54y"&gt;https://t.co/si3gZsB54y&lt;/a&gt; &lt;a href="https://t.co/GqA3nnYsqt"&gt;pic.twitter.com/GqA3nnYsqt&lt;/a&gt;&lt;/p&gt;&amp;mdash; Avalonia UI (&amp;#64;AvaloniaUI) &lt;a href="https://twitter.com/AvaloniaUI/status/1696469591138972127?ref_src=twsrc%5Etfw"&gt;August 29, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;&lt;a href="https://github.com/MichalStrehovsky/sizoscope"&gt;sizoscope&lt;/a&gt; というツールでバイナリーサイズを確認できるという話。&lt;/p&gt;
&lt;!-- https://x.com/sergiopedri/status/1697966324759048459?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;If you&amp;#39;re a .NET library author and care about optimizing binary size as much as possible, you can use the amazing sizoscope tool by &lt;a href="https://twitter.com/MStrehovsky?ref_src=twsrc%5Etfw"&gt;&amp;#64;MStrehovsky&lt;/a&gt; to do so. I just noticed a single Regex call I was using in a throw helper was rooting over 300KB worth of stuff! 👀&lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/csharp?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#csharp&lt;/a&gt; &lt;a href="https://t.co/6g20M15HTb"&gt;pic.twitter.com/6g20M15HTb&lt;/a&gt;&lt;/p&gt;&amp;mdash; Sergio Pedri (&amp;#64;SergioPedri) &lt;a href="https://twitter.com/SergioPedri/status/1697966324759048459?ref_src=twsrc%5Etfw"&gt;September 2, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;RPS のようなものを &lt;code&gt;Interlocked.Increment&lt;/code&gt; でカウントするとパフォーマンスに影響があるという話。&lt;/p&gt;
&lt;!-- https://x.com/egorbo/status/1697579906106896652?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;How to count RPS (Requests per second) efficiently: &lt;a href="https://t.co/CFMQ3UsUGp"&gt;pic.twitter.com/CFMQ3UsUGp&lt;/a&gt;&lt;/p&gt;&amp;mdash; Egor Bogatov (&amp;#64;EgorBo) &lt;a href="https://twitter.com/EgorBo/status/1697579906106896652?ref_src=twsrc%5Etfw"&gt;September 1, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;.NET 8 の Keyed Service を利用して HttpClient を直接解決する方法。&lt;/p&gt;
&lt;!-- https://x.com/davidfowl/status/1695590701294145803?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Using keyed services to resolve IHttpClientFactory based HttpClients directly. &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://t.co/QfwiBrzqcq"&gt;pic.twitter.com/QfwiBrzqcq&lt;/a&gt;&lt;/p&gt;&amp;mdash; David Fowler (&amp;#64;davidfowl) &lt;a href="https://twitter.com/davidfowl/status/1695590701294145803?ref_src=twsrc%5Etfw"&gt;August 27, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2023/08/27/updates</id>
		<title>2023-08-27: grpc-dotnet v2.56.0, Windows Community Toolkit 8.0 Pre-release, ImageSharp.Drawing 1.0.0</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2023/08/27/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2023-08-27T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="release-release-v2.56.0-grpcgrpc-dotnet"&gt;Release Release v2.56.0 · grpc/grpc-dotnet&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/grpc/grpc-dotnet/releases/tag/v2.56.0"&gt;https://github.com/grpc/grpc-dotnet/releases/tag/v2.56.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;grpc-dotnet v2.56.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;DebuggerDisplay 等によるデバッグ時の体験の向上や細かい改善や不具合修正が含まれている。&lt;/p&gt;
&lt;h3 id="windows-community-toolkit-8.0-pre-release-ifdef-windows"&gt;Windows Community Toolkit 8.0 Pre-release - #ifdef Windows&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/ifdef-windows/windows-community-toolkit-8-0-pre-release/"&gt;https://devblogs.microsoft.com/ifdef-windows/windows-community-toolkit-8-0-pre-release/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows Community Toolkit 8.0 のプレビュー版がリリースされた。&lt;/p&gt;
&lt;p&gt;WCT 8.0 では複数のプラットフォームを一つのコードベースに統合し、名前空間の統一などが行われている。コンポーネントは UWP, Windows App SDK および Uno Platform で動作する。&lt;/p&gt;
&lt;p&gt;記事では利用可能なパッケージや新規/既存プロジェクトでの利用方法についても紹介している。&lt;/p&gt;
&lt;h3 id="six-labors-announcing-imagesharp.drawing-1.0.0"&gt;Six Labors : Announcing ImageSharp.Drawing 1.0.0&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://sixlabors.com/posts/announcing-imagesharp-drawing-100/"&gt;https://sixlabors.com/posts/announcing-imagesharp-drawing-100/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SixLabors.ImageSharp.Drawing 1.0.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;このライブラリーはテキストレンダリングやパスや図形の描画といった高度な描画機能を ImageSharp を基盤として提供する。Linux のような環境での System.Drawing の代替手段として利用できる。&lt;/p&gt;
&lt;p&gt;このライブラリーのリリース v1.x は Apache 2.0 License となるが依存先である ImageSharp は v2.x 系(オープンソースではない) ではないことに注意が必要となる。&lt;/p&gt;
&lt;h3 id="the-first-set-of-bug-fixes-for-resharper-and-rider-2023.2-is-here-the.net-tools-blog"&gt;The First Set of Bug-fixes For ReSharper and Rider 2023.2 Is Here! | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/08/24/2023-2-1-bugfix/"&gt;https://blog.jetbrains.com/dotnet/2023/08/24/2023-2-1-bugfix/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper および Rider 2023.2 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースではフリーズやコード解析の問題など様々な不具合が修正されている。&lt;/p&gt;
&lt;h3 id="net-framework-august-2023-cumulative-update-preview.net-blog"&gt;.NET Framework August 2023 Cumulative Update Preview - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-framework-august-2023-cumulative-update-preview/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-framework-august-2023-cumulative-update-preview/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework の2023年8月の累積アップデートのプレビューがリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは WPF、ランタイム、ASP.NET の不具合がいくつか修正されている。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="a-twisted-tale-of-memory-optimization"&gt;A twisted tale of memory optimization&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ayende.com/blog/199969-A/a-twisted-tale-of-memory-optimization?Key=cb2fc684-6549-466c-9c4f-0bae8b5ef566"&gt;https://ayende.com/blog/199969-A/a-twisted-tale-of-memory-optimization?Key=cb2fc684-6549-466c-9c4f-0bae8b5ef566&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;char[]&lt;/code&gt; から UTF-8 バイト列を作る際のメモリー割り当てを最適化する際の落とし穴の話。&lt;/p&gt;
&lt;h3 id="microsoft.fast.components.fluentuidatagrid"&gt;Microsoft.Fast.Components.FluentUIのDataGridで表示しきれない項目を折り返し表示できるようにする&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/tomokusaba/articles/2468153bfe2d68"&gt;https://zenn.dev/tomokusaba/articles/2468153bfe2d68&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor 向けの FluentUI の FluentDataGrid コンポーネントでのカラム内に長い文字列を指定した際に表示が切れてしまう問題を回避する方法について。&lt;/p&gt;
&lt;h3 id="cedec-2023-c-2023-edition"&gt;CEDEC 2023 モダンハイパフォーマンスC# 2023 Edition&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://speakerdeck.com/neuecc/cedec-2023-modanhaipahuomansuc-number-2023-edition"&gt;https://speakerdeck.com/neuecc/cedec-2023-modanhaipahuomansuc-number-2023-edition&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;現代的な .NET でのハイパフォーマンスなコードを書く手法をシリアライザーの実装などを元に紹介しているスライド。&lt;/p&gt;
&lt;script defer class="speakerdeck-embed" data-id="055c0df858f44aafb4b017bb9c03c2e6" data-ratio="1.7777777777777777" src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt;
&lt;h3 id="antdesignblazor"&gt;AntDesignBlazorを使用している場合のコンポーネントのテスト方法&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/artuer/articles/9245d21ac8a88c"&gt;https://zenn.dev/artuer/articles/9245d21ac8a88c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AntDesignBlazor を使用したコンポーネントに対するユニットテストを行う方法について。BUnit と AntDesignTestKit を使用してテストを記述できるようにする。&lt;/p&gt;
&lt;h3 id="maui-appiossimulator-qiita"&gt;MAUI AppをiOSの実機&amp;amp;Simulatorで実行するスクリプトを作った話 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/t0r/items/1e7a2e8923a8b47a3a12"&gt;https://qiita.com/t0r/items/1e7a2e8923a8b47a3a12&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI アプリケーションを直接 iOS の実機とシミュレーターで実行するためのシェルスクリプトを作成したことについて。&lt;/p&gt;
&lt;h3 id="safely-use-secrets-in-http-requests-in-visual-studio-2022-visual-studio-blog"&gt;Safely use secrets in HTTP requests in Visual Studio 2022 - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/safely-use-secrets-in-http-requests-in-visual-studio-2022/"&gt;https://devblogs.microsoft.com/visualstudio/safely-use-secrets-in-http-requests-in-visual-studio-2022/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 の HTTP リクエストを送信する機能 (.http) を使用する際にシークレットを格納する方法について。&lt;/p&gt;
&lt;p&gt;環境設定として httpenv.json やユーザー固有の設定の httpenv.json.user のほか、機密情報をを ASP.NET Core ユーザーシークレットや Azure Key Vault からの取得、Windows DPAPI で暗号化するといった方法を紹介している。そのほか HTTP ファイルでの追加サポートされる新しい構文についても紹介している。&lt;/p&gt;
&lt;h3 id="simplifying-header-propagation-in-microservices-with-forwardedheadersmiddleware"&gt;Simplifying Header Propagation in Microservices with ForwardedHeadersMiddleware&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;asad99/simplifying-header-propagation-in-microservices-with-forwardedheadersmiddleware-2001fa6b4981"&gt;https://medium.com/&amp;#64;asad99/simplifying-header-propagation-in-microservices-with-forwardedheadersmiddleware-2001fa6b4981&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;クライアントから受信した HTTP ヘッダーをサービス間で伝搬させる方法について。記事では Microsoft.AspNetCore.HeaderPropagation NuGet パッケージを使用した方法を紹介している。&lt;/p&gt;
&lt;h3 id="simplified-code-refinement-and-debugging-with-github-copilot-chat-visual-studio-blog"&gt;Simplified Code Refinement and Debugging with GitHub Copilot Chat - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/simplified-code-refinement-and-debugging-with-github-copilot-chat/"&gt;https://devblogs.microsoft.com/visualstudio/simplified-code-refinement-and-debugging-with-github-copilot-chat/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Stduio での GitHub Copilot Chat を使用したデバッグとコード改善機能についての紹介。&lt;/p&gt;
&lt;p&gt;記事ではプロファイラーでの CPU 使用率の分析、例外時のヘルパー、デバッグ中の変数やコールスタックを参照した質問といった機能を紹介している。&lt;/p&gt;
&lt;h3 id="exploring-blazor-changes-in.net-8-capture-user-input-with-forms"&gt;Exploring Blazor Changes in .NET 8 - Capture User Input with Forms&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://jonhilton.net/blazor-ssr-forms/"&gt;https://jonhilton.net/blazor-ssr-forms/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 8 の Blazor (SSR) でのフォームのユーザー入力の取り扱いについての解説。&lt;/p&gt;
&lt;h3 id="how-to-install-jetbrains-rider-on-steam-deck-the.net-tools-blog"&gt;How to Install JetBrains Rider on Steam Deck | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/08/23/how-to-install-jetbrains-rider-on-steam-deck/"&gt;https://blog.jetbrains.com/dotnet/2023/08/23/how-to-install-jetbrains-rider-on-steam-deck/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Steam Deck (SteamOS) 上に Rider をインストールする方法について。&lt;/p&gt;
&lt;p&gt;記事では Rider のほか .NET や Unity をインストールして動かすところまで解説している。&lt;/p&gt;
&lt;h3 id="tales-from-the.net-migration-trenches-cataloging"&gt;Tales from the .NET Migration Trenches - Cataloging&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.jimmybogard.com/tales-from-the-net-migration-trenches-catalog/"&gt;https://www.jimmybogard.com/tales-from-the-net-migration-trenches-catalog/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework から .NET への移行を行うために既存のアプリケーションで対応が必要なもののカタログを作成することについて。&lt;/p&gt;
&lt;h3 id="asp.net-core-logging-using-serilog-and-azure"&gt;ASP.NET Core Logging using Serilog and Azure&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://damienbod.com/2023/08/21/asp-net-core-logging-using-serilog-and-azure/"&gt;https://damienbod.com/2023/08/21/asp-net-core-logging-using-serilog-and-azure/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core で Serilog を使用して Application Insights や Azure App Service のログサービスにログを送信する方法について。&lt;/p&gt;
&lt;h3 id="dynamically-adapting-to-application-sizes"&gt;Dynamically Adapting To Application Sizes&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://maoni0.medium.com/dynamically-adapting-to-application-sizes-2d72fcb6f1ea"&gt;https://maoni0.medium.com/dynamically-adapting-to-application-sizes-2d72fcb6f1ea&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 8 で試験的に導入される Dynamic A daptation To Aapplication Sizes (DATA) と呼ばれる GC 機能についての解説。&lt;/p&gt;
&lt;h3 id="c-dev-kit-for-visual-studio-code-github-codespaces"&gt;C# Dev Kit for Visual Studio Code は GitHub Codespaces 上だと無料で使えてお得という話 - しばやん雑記&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.shibayan.jp/entry/20230825/1692937805"&gt;https://blog.shibayan.jp/entry/20230825/1692937805&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio Code 上で .NET 開発を行うための拡張 C# Dev Kit の利用には Visual Studio のライセンスが必要となるが GitHub Codespaces 上ではライセンスが含まれていることについて。&lt;/p&gt;
&lt;h3 id="azure-functions.net-isolated-worker-asp.net-core-integration"&gt;Azure Functions (.NET Isolated Worker) に追加された ASP.NET Core Integration を一通り試した - しばやん雑記&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.shibayan.jp/entry/20230823/1692768859"&gt;https://blog.shibayan.jp/entry/20230823/1692768859&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure Functions の .NET isolated worker で利用できるようになった ASP.NET Core Integration について。&lt;/p&gt;
&lt;h3 id="new-in-visual-studio-compare-files-with-solution-explorer-visual-studio-blog"&gt;New in Visual Studio: Compare Files with Solution Explorer - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/new-in-visual-studio-compare-files-with-solution-explorer/"&gt;https://devblogs.microsoft.com/visualstudio/new-in-visual-studio-compare-files-with-solution-explorer/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio のソリューションエクスプローラーからのファイル比較機能についての紹介。&lt;/p&gt;
&lt;h3 id="enum.tryparse-unexpected-behavior"&gt;Enum.TryParse unexpected behavior&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://steven-giesel.com/blogPost/64d479f1-823f-4fc7-a56a-2b1ff06dcf72"&gt;https://steven-giesel.com/blogPost/64d479f1-823f-4fc7-a56a-2b1ff06dcf72&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Enum.TryParse は実際に値が定義されていない場合でも基底の型に合えば通ってしまうことについて。IsDefined で確認するといった必要がある。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="wcabusnes-sharp-a-nes-emulator-written-in-c"&gt;wcabus/nes-sharp: A NES emulator written in C#&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/wcabus/nes-sharp"&gt;https://github.com/wcabus/nes-sharp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# で書かれた NES (ファミコン) エミュレーター。&lt;/p&gt;
&lt;!-- https://x.com/wesleycabus/status/1695072673087263168?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;In case anyone wants to have a go at it, here&amp;#39;s the source code: &lt;a href="https://t.co/caHmFh72vC"&gt;https://t.co/caHmFh72vC&lt;/a&gt;&lt;/p&gt;&amp;mdash; Wesley Cabus (&amp;#64;WesleyCabus) &lt;a href="https://twitter.com/WesleyCabus/status/1695072673087263168?ref_src=twsrc%5Etfw"&gt;August 25, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;p&gt;.NET 8 でのメトリクス関連の設定をログなどと同様に appsettings.json で行えるようにするという話。&lt;/p&gt;
&lt;!-- https://x.com/davidfowl/status/1695454305782837561?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Part of improving our metrics story in .NET 8 means we&amp;#39;re making it as first class as logging is. It&amp;#39;ll be possible to configure meters and instruments via configuration. &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/aspnetcore?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#aspnetcore&lt;/a&gt; &lt;a href="https://t.co/jgA2yt4Rtj"&gt;pic.twitter.com/jgA2yt4Rtj&lt;/a&gt;&lt;/p&gt;&amp;mdash; David Fowler (&amp;#64;davidfowl) &lt;a href="https://twitter.com/davidfowl/status/1695454305782837561?ref_src=twsrc%5Etfw"&gt;August 26, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;オブジェクトヘッダーは4バイトだが 64-bit の .NET ではアラインメントの都合、4バイトのパディングが含まれてもったいないという話。&lt;/p&gt;
&lt;!-- https://x.com/kookiz/status/1692931201550446891?s=12&amp;t=ggvrrZ7oLogHyNoIGNgjbw --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;It bothers me so much that on &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; on 64-bit, 4 bytes are wasted for *every class instance* because objects are aligned on a 8 bytes boundary and the header has a fixed size of 4 bytes. &lt;a href="https://t.co/kToB6rnABG"&gt;pic.twitter.com/kToB6rnABG&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kevin Gosse (&amp;#64;KooKiz) &lt;a href="https://twitter.com/KooKiz/status/1692931201550446891?ref_src=twsrc%5Etfw"&gt;August 19, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="port-nativeaot-exception-handling-to-coreclr-by-janvorli-pull-request-88034-dotnetruntime"&gt;Port NativeAOT exception handling to CoreCLR by janvorli · Pull Request #88034 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/88034"&gt;https://github.com/dotnet/runtime/pull/88034&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NativeAOT の例外ハンドリング機構を CoreCLR へ移植するという PR。&lt;/p&gt;
&lt;p&gt;これにより例外処理が高速化されるが現時点ではいくつか制限があるため有効化するには環境変数を指定する必要がある。また、32-bit 版 Windows は複雑さのためサポートされないとのこと。&lt;/p&gt;
&lt;h3 id="coreclr-risc-v-architecture-port-issue-84834-dotnetruntime-github"&gt;CoreCLR RISC-V architecture port · Issue #84834 · dotnet/runtime · GitHub&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/issues/84834"&gt;https://github.com/dotnet/runtime/issues/84834&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;RISC-V アーキテクチャーへのポーティングの Issue。&lt;/p&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2023/08/20/updates</id>
		<title>2023-08-20: .NET 8 Preview 7, Visual Studio 2022 version 17.7, .NET 7.0.10 &amp; .NET 6.0.21, Moq Privacy issues</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2023/08/20/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2023-08-20T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="announcing.net-8-preview-7.net-blog"&gt;Announcing .NET 8 Preview 7 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-dotnet-8-preview-7/"&gt;https://devblogs.microsoft.com/dotnet/announcing-dotnet-8-preview-7/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="announcing-nuget-6.7-keeping-you-secure-the-nuget-blog"&gt;Announcing NuGet 6.7 – Keeping You Secure - The NuGet Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/"&gt;https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-framework-august-2023-security-and-quality-rollup-updates.net-blog"&gt;.NET Framework August 2023 Security and Quality Rollup Updates - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-framework-august-2023-security-and-quality-rollup-updates/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-framework-august-2023-security-and-quality-rollup-updates/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="visual-studio-2022-17.7-now-available-visual-studio-blog"&gt;Visual Studio 2022 – 17.7 Now Available - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2022-17-7-now-available/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-2022-17-7-now-available/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="announcing.net-maui-in.net-8-preview-7-keyboard-accelerators.net-blog"&gt;Announcing .NET MAUI in .NET 8 Preview 7: Keyboard Accelerators - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-dotnet-maui-in-dotnet-8-preview-7/"&gt;https://devblogs.microsoft.com/dotnet/announcing-dotnet-maui-in-dotnet-8-preview-7/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="asp.net-core-updates-in.net-8-preview-7.net-blog"&gt;ASP.NET Core updates in .NET 8 Preview 7 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-8-preview-7/"&gt;https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-8-preview-7/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-august-2023-updates.net-7.0.10.net-6.0.21.net-blog"&gt;.NET August 2023 Updates – .NET 7.0.10, .NET 6.0.21 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/august-2023-updates/"&gt;https://devblogs.microsoft.com/dotnet/august-2023-updates/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="visual-studio-2022-17.8-preview-1-has-arrived-visual-studio-blog"&gt;Visual Studio 2022 17.8 Preview 1 has arrived! - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2022-17-8-preview-1-has-arrived/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-2022-17-8-preview-1-has-arrived/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="privacy-issues-with-sponsorlink-starting-from-version-4.20-issue-1372-moqmoq"&gt;Privacy issues with SponsorLink, starting from version 4.20 · Issue #1372 · moq/moq&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/moq/moq/issues/1372"&gt;https://github.com/moq/moq/issues/1372&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.cazzulino.com/sponsorlink-feedback.html"&gt;SponsorLink: feedback and moving forward&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="a-cheat-sheet-to-migrate-from-moq-to-nsubstitute"&gt;A cheat sheet to migrate from Moq to NSubstitute&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://timdeschryver.dev/blog/a-cheat-sheet-to-migrate-from-moq-to-nsubstitute#method-invoked-with-any-arguments"&gt;https://timdeschryver.dev/blog/a-cheat-sheet-to-migrate-from-moq-to-nsubstitute#method-invoked-with-any-arguments&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="cswin32"&gt;CsWin32 を別プロジェクトに分離する&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/shinta0806/articles/cswin32-separation"&gt;https://zenn.dev/shinta0806/articles/cswin32-separation&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="structured-asp.net-localization"&gt;Structured ASP.NET Localization&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/giannoudis/structured-aspnet-localization-35bo"&gt;https://dev.to/giannoudis/structured-aspnet-localization-35bo&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="hidden-workings-of-execution-context-in.net"&gt;Hidden Workings of Execution Context in .NET&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/net-under-the-hood/hidden-workings-of-execution-context-in-net-43b491726c65"&gt;https://medium.com/net-under-the-hood/hidden-workings-of-execution-context-in-net-43b491726c65&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="multi-branch-graph-available-for-general-audiences-visual-studio-blog"&gt;Multi-Branch Graph Available for General Audiences - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/multi-branch-graph-available-for-general-audiences/"&gt;https://devblogs.microsoft.com/visualstudio/multi-branch-graph-available-for-general-audiences/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="load-testing-http-api-on-c-with-nbomber"&gt;Load Testing HTTP API on C# with NBomber&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;kostash23lena/load-testing-http-api-on-c-with-nbomber-96939511bdab"&gt;https://medium.com/&amp;#64;kostash23lena/load-testing-http-api-on-c-with-nbomber-96939511bdab&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="how-to-debug-docker-and-docker-compose-solutions-with-jetbrains-rider-the.net-tools-blog"&gt;How To Debug Docker and Docker Compose Solutions with JetBrains Rider | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/08/16/debugging-docker-and-docker-compose-solutions-with-jetbrains-rider/"&gt;https://blog.jetbrains.com/dotnet/2023/08/16/debugging-docker-and-docker-compose-solutions-with-jetbrains-rider/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="vscodecomnisharp-qiita"&gt;VSCodeのC#拡張で、omnisharp使用を継続する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/skitoy4321/items/c6b0873a37fe649f9ca6"&gt;https://qiita.com/skitoy4321/items/c6b0873a37fe649f9ca6&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="cspanbyteincrementalhash-qiita"&gt;【C#】Spanbyteを用いて少しずつハッシュ値計算（IncrementalHash） - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/mitsu_at3/items/438b4c4252947b467ef2"&gt;https://qiita.com/mitsu_at3/items/438b4c4252947b467ef2&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="keyed-service-dependency-injection-container-support-exploring-the.net-8-preview-part-6"&gt;Keyed service dependency injection container support: Exploring the .NET 8 preview - Part 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/exploring-the-dotnet-8-preview-keyed-services-dependency-injection-support/"&gt;https://andrewlock.net/exploring-the-dotnet-8-preview-keyed-services-dependency-injection-support/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="my-favorite-features-in-visual-studio-17.7-visual-studio-blog"&gt;My favorite features in Visual Studio 17.7 - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/my-favorite-features-in-visual-studio-17-7/"&gt;https://devblogs.microsoft.com/visualstudio/my-favorite-features-in-visual-studio-17-7/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="visual-studio-2022-17.7-performance-enhancements-visual-studio-blog"&gt;Visual Studio 2022 – 17.7 Performance Enhancements - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2022-17-7-performance-enhancements/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-2022-17-7-performance-enhancements/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="c-di-qiita"&gt;C# 汎用ホストのDIにカスタムロガーを組み込む - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/mxProject/items/41f75c057c855c49efd0"&gt;https://qiita.com/mxProject/items/41f75c057c855c49efd0&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-8-blazor-server-blazor-server"&gt;.NET 8 で Blazor Server をする方法 (消えた Blazor Server テンプレート)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/microsoft/articles/blazor-server-on-net8-pre6"&gt;https://zenn.dev/microsoft/articles/blazor-server-on-net8-pre6&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="collecting-memory-dumps-for.net-core-on-kubernetes"&gt;Collecting memory dumps for .NET Core on Kubernetes&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://cezarypiatek.github.io/post/memory-dump-on-kubernetes/"&gt;https://cezarypiatek.github.io/post/memory-dump-on-kubernetes/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="tales-from-the.net-migration-trenches-intro"&gt;Tales from the .NET Migration Trenches - Intro&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.jimmybogard.com/tales-from-the-net-migration-trenches/"&gt;https://www.jimmybogard.com/tales-from-the-net-migration-trenches/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="introducing-the-new-ihostedlifecycleservice-interface-in.net-8-steve-gordon-code-with-steve"&gt;Introducing the new IHostedLifecycleService Interface in .NET 8 - Steve Gordon - Code with Steve&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.stevejgordon.co.uk/introducing-the-new-ihostedlifecycleservice-interface-in-dotnet-8"&gt;https://www.stevejgordon.co.uk/introducing-the-new-ihostedlifecycleservice-interface-in-dotnet-8&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-8-interceptors"&gt;.NET 8 Interceptors&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://khalidabuhakmeh.com/dotnet-8-interceptors"&gt;https://khalidabuhakmeh.com/dotnet-8-interceptors&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="c8.0substring-qiita"&gt;【C#8.0】Substringの代わりにインデクサの範囲指定で文字列抽出する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/YouKnow/items/93b4b978ecb113616fae"&gt;https://qiita.com/YouKnow/items/93b4b978ecb113616fae&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="does-c-always-have-boxing-with-string-concatenation-and-interpo"&gt;Does C# always have boxing with string concatenation and interpo…&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://pvs-studio.com/en/blog/posts/csharp/1060/"&gt;https://pvs-studio.com/en/blog/posts/csharp/1060/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="lets-co-create-your-voice-matters-visual-studio-blog"&gt;Let's Co-Create! Your Voice Matters - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/lets-co-create-your-voice-matters/"&gt;https://devblogs.microsoft.com/visualstudio/lets-co-create-your-voice-matters/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="how-to-migrate-from-moq-to-nsubstitute"&gt;How to migrate from Moq to NSubstitute&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://itnext.io/how-to-migrate-from-moq-to-nsubstitute-cdb6a80404d"&gt;https://itnext.io/how-to-migrate-from-moq-to-nsubstitute-cdb6a80404d&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="suppressgctransition"&gt;SuppressGCTransition&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://minidump.net/suppressgctransition-b9a8a774edbd"&gt;https://minidump.net/suppressgctransition-b9a8a774edbd&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="immutablearrayt"&gt;ImmutableArray&amp;lt;T&amp;gt;の内部配列を参照して高速化&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/benutomo/articles/54083312afca95"&gt;https://zenn.dev/benutomo/articles/54083312afca95&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="visual-studio-2022-v17.8-previews-new-intellitest-visual-studio-magazine"&gt;Visual Studio 2022 v17.8 Previews New IntelliTest -- Visual Studio Magazine&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://visualstudiomagazine.com/articles/2023/08/14/intellitest-preview.aspx?m=1"&gt;https://visualstudiomagazine.com/articles/2023/08/14/intellitest-preview.aspx?m=1&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="moq-nsubstitute"&gt;Moq から NSubstitute へ移行する&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/masakura/articles/9b97948a11b40d"&gt;https://zenn.dev/masakura/articles/9b97948a11b40d&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-8-blazor-server-blazor-server-1"&gt;.NET 8 で Blazor Server をする方法 (消えた Blazor Server テンプレート)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/microsoft/articles/blazor-server-on-net8-pre6?redirected=1"&gt;https://zenn.dev/microsoft/articles/blazor-server-on-net8-pre6?redirected=1&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="system.text.jsonbase64"&gt;System.Text.Jsonでは改行入りのBase64文字列に対応していない&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/shimat/articles/3d319d50b3f0c3"&gt;https://zenn.dev/shimat/articles/3d319d50b3f0c3&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-annotated-monthly-august-2023-the.net-tools-blog"&gt;.NET Annotated Monthly | August 2023 | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/08/07/net-annotated-monthly-august-2023/"&gt;https://blog.jetbrains.com/dotnet/2023/08/07/net-annotated-monthly-august-2023/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="polyfills-in.net-to-ease-multi-targeting-gerald-barre"&gt;Polyfills in .NET to ease multi-targeting - Gérald Barré&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.meziantou.net/polyfills-in-dotnet-to-ease-multi-targeting.htm"&gt;https://www.meziantou.net/polyfills-in-dotnet-to-ease-multi-targeting.htm&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="how-to-benchmark-different.net-versions"&gt;How to benchmark different .NET versions&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://steven-giesel.com/blogPost/59cfb6f8-8b87-4707-a99e-e372541b696a"&gt;https://steven-giesel.com/blogPost/59cfb6f8-8b87-4707-a99e-e372541b696a&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net.gcdump-internals"&gt;.NET .gcdump Internals&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://chnasarre.medium.com/net-gcdump-internals-fcce5d327be7"&gt;https://chnasarre.medium.com/net-gcdump-internals-fcce5d327be7&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="cstruct-annulus-games"&gt;【C#】構造体(struct)を完全に理解する - Annulus Games&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://annulusgames.com/blog/understanding-struct/"&gt;https://annulusgames.com/blog/understanding-struct/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="giannoudistimeperiodlibrary-extensive-time-period-calculations-and-individual-calendar-periods"&gt;Giannoudis/TimePeriodLibrary: Extensive time period calculations and individual calendar periods.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/Giannoudis/TimePeriodLibrary"&gt;https://github.com/Giannoudis/TimePeriodLibrary&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.codeproject.com/Articles/168662/Time-Period-Library-for-NET"&gt;Time Period Library for .NET&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="powerrule-powerrule-gitlab"&gt;PowerRule / PowerRule · GitLab&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://gitlab.com/power-rule/power-rule"&gt;https://gitlab.com/power-rule/power-rule&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/masakura/articles/9253061846d90c"&gt;PowerRule で複雑なルールを書く&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="le-nnmemento-a-simple-client-side-state-management-container-for-blazor.net-includes-redoundo-and-reduxdevtools-support"&gt;le-nn/memento: A simple client-side state management container for Blazor/.NET includes redo/undo and ReduxDevTools support..&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/le-nn/memento"&gt;https://github.com/le-nn/memento&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/remrem/articles/0768982b3cdc92"&gt;BlazorでもReduxDevToolsでデバッグできるようにしてみた&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/remrem/articles/32ee38e79f4cf0"&gt;Blazor向けにコンポーネント間で状態を共有する状態管理ライブラリを作った&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="asp.net-core-in-action-third-edition-is-now-in-print"&gt;ASP.NET Core in Action, Third Edition is now in print&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/asp-dotnet-core-in-action-third-edition-is-now-in-print/"&gt;https://andrewlock.net/asp-dotnet-core-in-action-third-edition-is-now-in-print/&lt;/a&gt;&lt;/p&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2023/08/06/updates</id>
		<title>2023-08-06: ILSpy 8.1, Unity extension for Visual Studio Code, Rider &amp; ReSharper 2023.2</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2023/08/06/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2023-08-06T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="release-ilspy-8.1-icsharpcodeilspy"&gt;Release ILSpy 8.1 · icsharpcode/ILSpy&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/icsharpcode/ILSpy/releases/tag/v8.1"&gt;https://github.com/icsharpcode/ILSpy/releases/tag/v8.1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ILSpy 8.1 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは C# 11 のいくつかの記法への対応や様々な修正が含まれている。&lt;/p&gt;
&lt;h3 id="announcing-the-unity-extension-for-visual-studio-code-visual-studio-blog"&gt;Announcing the Unity extension for Visual Studio Code - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/announcing-the-unity-extension-for-visual-studio-code/"&gt;https://devblogs.microsoft.com/visualstudio/announcing-the-unity-extension-for-visual-studio-code/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio Code 向けの Unity 拡張がプレビュー公開された。&lt;/p&gt;
&lt;p&gt;この拡張は C# Dev Kit を元に構築され、コード編集に AI 支援や Roslyn の Analyzer といった機能の利用や Unity でのゲームのデバッグをサポートする。記事では Unity での使用方法についても紹介している。&lt;/p&gt;
&lt;p&gt;またこの拡張は C# Dev Kit と同様のライセンスモデルで提供され Visual Studio の Community ライセンスまたはサブスクリプションが必要となる。&lt;/p&gt;
&lt;h3 id="rider-2023.2-better-c-support-uxui-enhancements-ai-powered-features-and-more-the-jetbrains-blog"&gt;Rider 2023.2: Better C# Support, UX/UI Enhancements, AI-Powered Features, and More | The JetBrains Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/08/02/rider-2023-2-release/"&gt;https://blog.jetbrains.com/dotnet/2023/08/02/rider-2023-2-release/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider 2023.2 がリリースされた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C# のアップデート&lt;/li&gt;
&lt;li&gt;UI/UX の改善
&lt;ul&gt;
&lt;li&gt;ビルドツールウィンドウの改善&lt;/li&gt;
&lt;li&gt;既定の外観が新しい UI となる&lt;/li&gt;
&lt;li&gt;カスタマイズと合理化
&lt;ul&gt;
&lt;li&gt;プロジェクトヘッダー、メインツールバーカスタマイズ、Run の構成のピン止め&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AI 支援 (限定アクセス)&lt;/li&gt;
&lt;li&gt;バージョンコントロール
&lt;ul&gt;
&lt;li&gt;GitLab 統合&lt;/li&gt;
&lt;li&gt;バックグラウンドコミットチェック&lt;/li&gt;
&lt;li&gt;行のコミットのオプション&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;パフォーマンス向上
&lt;ul&gt;
&lt;li&gt;キャッシュデータの削減 (I/O の削減)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ゲーム開発
&lt;ul&gt;
&lt;li&gt;Unity
&lt;ul&gt;
&lt;li&gt;AI 支援、ShaderLab サポート、Unity DOTS サポート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unreal Engine
&lt;ul&gt;
&lt;li&gt;ブループリントインデックス改善、ホットリロードとライブコーディング、Perforce サポート改善&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;.NET SDK
&lt;ul&gt;
&lt;li&gt;Source Generator テンプレートと Source Generator の再起動&lt;/li&gt;
&lt;li&gt;Docker fast モード&lt;/li&gt;
&lt;li&gt;.NET MAUI ホットリロード&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="resharper-2023.2-more-c-c-20-and-c-23-features-the-ability-to-create-and-navigate-through-unit-tests-predictive-debugger-mode-and-more-the-jetbrains-blog"&gt;ReSharper 2023.2: More C#, C++ 20, And C++ 23 Features, the Ability To Create And Navigate Through Unit Tests, Predictive Debugger Mode, And More | The JetBrains Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/08/02/resharper-2023-2-release/"&gt;https://blog.jetbrains.com/dotnet/2023/08/02/resharper-2023-2-release/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper 2023.2 がリリースされた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C# のアップデート&lt;/li&gt;
&lt;li&gt;C++ のアップデート&lt;/li&gt;
&lt;li&gt;パフォーマンス向上
&lt;ul&gt;
&lt;li&gt;ソリューション読み込み時間の短縮&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ユニットテストの作成とナビゲーション&lt;/li&gt;
&lt;li&gt;AI 支援 (限定アクセス)&lt;/li&gt;
&lt;li&gt;Predictive Debugger (ベータ)&lt;/li&gt;
&lt;li&gt;デコンパイラーでのアセンブリーの差分&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="net-conf-2023-celebrating-the-release-of.net-8-save-the-date.net-blog"&gt;.NET Conf 2023 - Celebrating the Release of .NET 8! - Save the Date! - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-conf-2023-celebrating-the-release-of-dotnet-8-save-the-date/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-conf-2023-celebrating-the-release-of-dotnet-8-save-the-date/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Conf 2023 についてのアナウンス。&lt;/p&gt;
&lt;p&gt;.NET Conf 2023 は11月14日から16日までの3日間で、.NET 8 のリリースをはじめとして様々なセッションが行われる。&lt;/p&gt;
&lt;h3 id="the-microsoft-author-signing-certificate-will-be-updated-as-soon-as-august-14th-2023-the-nuget-blog"&gt;The Microsoft author-signing certificate will be updated as soon as August 14th, 2023 - The NuGet Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/"&gt;https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoft がリリースする NuGet パッケージの署名に使用する証明書が8月14日以降に更新される。&lt;/p&gt;
&lt;p&gt;この対応で既存のパッケージが更新されることはなく、今後リリースされるパッケージの署名が新しい証明書で行われるようになる。&lt;/p&gt;
&lt;p&gt;NuGet のクライアントポリシーで信頼者許可リストを持ち、検証している場合に影響を受ける。&lt;/p&gt;
&lt;h3 id="dotcover-dotmemory-dotpeek-and-dottrace-2023.2-released-the-jetbrains-blog"&gt;dotCover, dotMemory, dotPeek, and dotTrace 2023.2 Released! | The JetBrains Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/08/02/2023-2-dottools-release/"&gt;https://blog.jetbrains.com/dotnet/2023/08/02/2023-2-dottools-release/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;dotCover, dotMemory, dotPeek, dotTrace 2023.2 がリリースされた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dotMemory
&lt;ul&gt;
&lt;li&gt;Rider でのスナップショット解析&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;dotTrace
&lt;ul&gt;
&lt;li&gt;サンプリング、トレース、行ごとのスナップショットのスレッド別のグループ化&lt;/li&gt;
&lt;li&gt;Linux と macOS での Source View ツールウィンドウ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;dotPeek
&lt;ul&gt;
&lt;li&gt;アセンブリーの比較&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;dotCover
&lt;ul&gt;
&lt;li&gt;バグ修正と安定性の向上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="c-12-interceptors-an-insane-feature"&gt;C# 12 Interceptors ! An insane feature !&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/bugandfix/c-12-interceptors-an-insane-feature--517l"&gt;https://dev.to/bugandfix/c-12-interceptors-an-insane-feature--517l&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 12 でプレビューされている Interceptor を動かしてみるという記事。&lt;/p&gt;
&lt;h3 id="which-rdbms-has-the-fastest.net-bulk-insert-implementation"&gt;Which RDBMS has the fastest .NET Bulk Insert implementation?&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://servicestack.net/posts/bulk-insert-performance"&gt;https://servicestack.net/posts/bulk-insert-performance&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;様々な RDBMS とアーキテクチャーや OS でバルクインサートする際のパフォーマンスの比較。&lt;/p&gt;
&lt;h3 id="class-vs-struct-in-c-making-informed-choices-ndepend"&gt;Class vs Struct in C#: Making Informed Choices - NDepend&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.ndepend.com/class-vs-struct-in-c-making-informed-choices/"&gt;https://blog.ndepend.com/class-vs-struct-in-c-making-informed-choices/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;クラスと構造体の利点と欠点をまとめてどちらを使えばいいのかについて。&lt;/p&gt;
&lt;h3 id="c-di-qiita"&gt;C# 汎用ホストのDIにデータベースプロバイダを組み込む - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/mxProject/items/232ee4d0feb30a41a2f3"&gt;https://qiita.com/mxProject/items/232ee4d0feb30a41a2f3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Generic Host のサービスにデータベースプロバイダー (ADO.NET) を組み込んで使えるようにする方法について。&lt;/p&gt;
&lt;h3 id="plugin-architecture-in-asp.net-core-how-to-master-it"&gt;Plugin Architecture in ASP.NET Core – How To Master It&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/devleader/plugin-architecture-in-aspnet-core-how-to-master-it-1824"&gt;https://dev.to/devleader/plugin-architecture-in-aspnet-core-how-to-master-it-1824&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core アプリケーションでプラグインアーキテクチャーを実現する方法について。&lt;/p&gt;
&lt;h3 id="keyed-services-in.net8s-dependency-injection"&gt;Keyed Services in .NET8's Dependency Injection&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/xelit3/keyed-services-in-net8s-dependency-injection-2gni"&gt;https://dev.to/xelit3/keyed-services-in-net8s-dependency-injection-2gni&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 8 の M.E.DependencyInjection と ASP.NET Core でサポートされるキー付きサービスについて。&lt;/p&gt;
&lt;h3 id="leveraging-custom-postgresql-functions-in-efcore-a-guide-to-mapping-and-usage"&gt;Leveraging Custom PostgreSQL Functions in EFCore: A Guide to Mapping and Usage&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://gor-grigoryan.medium.com/leveraging-custom-postgresql-functions-in-efcore-a-guide-to-mapping-and-usage-53941b10fe89"&gt;https://gor-grigoryan.medium.com/leveraging-custom-postgresql-functions-in-efcore-a-guide-to-mapping-and-usage-53941b10fe89&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core で PostgreSQL のカスタム関数をマッピングして使用する方法について。&lt;/p&gt;
&lt;h3 id="accelerating-your-testing-workflow-with-unit-test-creation-and-navigation-the-jetbrains-blog"&gt;Accelerating Your Testing Workflow with Unit Test Creation and Navigation | The JetBrains Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/08/01/accelerating-your-testing-workflow-with-unit-test-creation-and-navigation/"&gt;https://blog.jetbrains.com/dotnet/2023/08/01/accelerating-your-testing-workflow-with-unit-test-creation-and-navigation/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper でのユニットテスト作成とナビゲーション機能についての紹介。コード間の移動や新しいユニットテストの作成などで利用できる機能を紹介している。&lt;/p&gt;
&lt;h3 id="visualstudio.extensibility-qiita"&gt;VisualStudio.Extensibilityを用いた拡張機能開発の導入 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/mngreen/items/d712930b5894aa6ea17f"&gt;https://qiita.com/mngreen/items/d712930b5894aa6ea17f&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio の新しい拡張モデルである VisualStudio.Extensibility を使用して拡張実装の導入について。&lt;/p&gt;
&lt;h3 id="instrumenting-system.commandline-based.net-applications"&gt;Instrumenting System.CommandLine-based .NET applications&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/asimmon/instrumenting-systemcommandline-based-net-applications-1p88"&gt;https://dev.to/asimmon/instrumenting-systemcommandline-based-net-applications-1p88&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;System.CommandLine を使用したアプリケーションでカスタムインストルメンテーションを組み込む方法について。&lt;/p&gt;
&lt;h3 id="datetime.maxvalue-qiita"&gt;DateTime.MaxValueの翻訳の誤り - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/hiro_t/items/0a8e5ce1c1552366a8f4"&gt;https://qiita.com/hiro_t/items/0a8e5ce1c1552366a8f4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;DateTime.MaxValue の日本語ドキュメントの説明の誤りについて。&lt;/p&gt;
&lt;h3 id="immutablearrayt-iteration-performance-in-c"&gt;ImmutableArray&amp;lt;T&amp;gt; iteration performance in C#&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://antao-almada.medium.com/immutablearray-t-iteration-performance-in-c-99e490d4d352"&gt;https://antao-almada.medium.com/immutablearray-t-iteration-performance-in-c-99e490d4d352&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ImmutableArray&amp;lt;T&amp;gt;&lt;/code&gt; の列挙操作のパフォーマンスについて。 List や配列などとの比較。&lt;/p&gt;
&lt;h3 id="learn-resharper-postfix-and-source-templates"&gt;Learn Resharper PostFix and Source Templates&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/karenpayneoregon/learn-resharper-postfix-and-source-templates-32lo"&gt;https://dev.to/karenpayneoregon/learn-resharper-postfix-and-source-templates-32lo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper と Rider で使用できる postfix 展開テンプレートの使い方と作り方について。&lt;/p&gt;
&lt;h3 id="generate-sitemaps-for-all-of-asp.net-core"&gt;Generate Sitemaps for All of ASP.NET Core&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://khalidabuhakmeh.com/generate-sitemaps-for-all-of-aspnet-core"&gt;https://khalidabuhakmeh.com/generate-sitemaps-for-all-of-aspnet-core&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;DotnetSitemapGenerator を使用した ASP.NET Core Web アプリケーションでのサイトマップ(XML)を生成する方法について。&lt;/p&gt;
&lt;h3 id="translating-exceptions-into-problem-details-responses"&gt;Translating Exceptions into Problem Details Responses&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://timdeschryver.dev/blog/translating-exceptions-into-problem-details-responses"&gt;https://timdeschryver.dev/blog/translating-exceptions-into-problem-details-responses&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core で例外を Problem Details レスポンスに変換して返す方法について。&lt;/p&gt;
&lt;h3 id="net-8-timeprovider-and-unit-tests"&gt;.NET 8 TimeProvider and Unit Tests&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://khalidabuhakmeh.com/dotnet-8-timeprovider-and-unit-tests"&gt;https://khalidabuhakmeh.com/dotnet-8-timeprovider-and-unit-tests&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 8 で導入される TimeProvider API とそれを使用したユニットテストの書き方について。&lt;/p&gt;
&lt;h3 id="unleashing-the-power-of.net-source-code-generators"&gt;Unleashing the Power of .NET Source Code Generators&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;bnayae/unleashing-the-power-of-net-source-code-generators-3115156df775"&gt;https://medium.com/&amp;#64;bnayae/unleashing-the-power-of-net-source-code-generators-3115156df775&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Source Generator を使用したライブラリーの紹介。記事では Refit, System.Text.Json, Dunet, Mapperly, Generator.Equals を紹介している。&lt;/p&gt;
&lt;h3 id="application-insights-code-optimizations-asp.net-core"&gt;Application Insights の Code Optimizations 機能を ASP.NET Core アプリケーションで試してみた - しばやん雑記&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.shibayan.jp/entry/20230805/1691227089"&gt;https://blog.shibayan.jp/entry/20230805/1691227089&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Application Insights の Code Optimizations を ASP.NET Core アプリケーションに適用する方法について。&lt;/p&gt;
&lt;p&gt;Code Optimizations ではアプリケーションのパフォーマンスの問題点について AI ベースで検出/提案するといったものとなっている。&lt;/p&gt;
&lt;h3 id="length-based-switch-dispatch-c-c"&gt;Length-based switch dispatch | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2023/8/lengthbasedswitch/"&gt;https://ufcpp.net/blog/2023/8/lengthbasedswitch/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;文字列に対する switch の分岐が Roslyn 4.6 以降で新しい手法で分岐するようになったことについて。&lt;/p&gt;
&lt;h3 id="netwebsocket-castaneai"&gt;.NETのWebSocketと、切断の扱い - castaneaiのブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://castaneai.hatenablog.com/entry/closing-websocket-connection-in-dotnet"&gt;https://castaneai.hatenablog.com/entry/closing-websocket-connection-in-dotnet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET の WebSocket での切断処理について。CloseAsync、CloseOutputAsync、Dispose といったメソッドの違いについて。&lt;/p&gt;
&lt;h3 id="c-qiita"&gt;[C#][備忘録]ビルド時に不要な言語フォルダが出力されないように設定する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/minoura_a/items/092b141bc6ecde5bbb24"&gt;https://qiita.com/minoura_a/items/092b141bc6ecde5bbb24&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ビルド時に不要な言語のローカライズリソースを含めないようにする方法について。&lt;/p&gt;
&lt;h3 id="azure-functions.net-6-nuget-jsakamoto"&gt;Azure Functions (.NET 6) のプロジェクトで、NuGet パッケージ参照のバージョンを上げたらエラー | &amp;#64;jsakamoto&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devadjust.exblog.jp/29654451/"&gt;https://devadjust.exblog.jp/29654451/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure Functions (.NET 6) のプロジェクトの NuGet パッケージをアップデートした際にエラーが発生したことについて。&lt;/p&gt;
&lt;p&gt;インプロセスモードで稼働している場合、 Azure Functions のランタイムでは Microsoft.Extensions.* の 6.0 を使用されているため、アプリケーションが依存しているパッケージで 7.0 にアップデートするとバージョンの不整合が発生することによる。&lt;/p&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2023/07/30/updates</id>
		<title>2023-07-30: ReSharper &amp; Rider 2023.2 RC, Avalonia for Visual Studio Code, ODP.NET 23c Dev Release</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2023/07/30/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2023-07-30T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="resharper-2023.2-release-candidate-is-available-the.net-tools-blog"&gt;ReSharper 2023.2 Release Candidate Is Available | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/07/26/resharper-2023-2-rc/"&gt;https://blog.jetbrains.com/dotnet/2023/07/26/resharper-2023-2-rc/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="rider-2023.2-release-candidate-is-available-the.net-tools-blog"&gt;Rider 2023.2 Release Candidate Is Available | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/07/26/rider-2023-2-rc/"&gt;https://blog.jetbrains.com/dotnet/2023/07/26/rider-2023-2-rc/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="avalonia-for-visual-studio-code-early-access"&gt;Avalonia for Visual Studio Code (Early Access)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/avalonia/avalonia-for-visual-studio-code-early-access-34bh"&gt;https://dev.to/avalonia/avalonia-for-visual-studio-code-early-access-34bh&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="announcing-odp.net-23c-dev-release"&gt;Announcing ODP.NET 23c Dev Release&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;alex.keh/announcing-odp-net-23c-dev-release-fbd92861e466"&gt;https://medium.com/&amp;#64;alex.keh/announcing-odp-net-23c-dev-release-fbd92861e466&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="new-syntax-for-string-interpolation-in-f.net-blog"&gt;New syntax for string interpolation in F# - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/new-syntax-for-string-interpolation-in-fsharp/"&gt;https://devblogs.microsoft.com/dotnet/new-syntax-for-string-interpolation-in-fsharp/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="introducing-predictive-debugging-a-game-changing-look-into-the-future-the.net-tools-blog"&gt;Introducing Predictive Debugging: A Game-Changing Look into the Future | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/07/27/introducing-predictive-debugging-a-game-changing-look-into-the-future/"&gt;https://blog.jetbrains.com/dotnet/2023/07/27/introducing-predictive-debugging-a-game-changing-look-into-the-future/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-framework-july-2023-cumulative-update-preview.net-blog"&gt;.NET Framework July 2023 Cumulative Update Preview - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-framework-july-2023-cumulative-update-preview/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-framework-july-2023-cumulative-update-preview/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="release-2.2.7-mysql-netmysqlconnector"&gt;Release 2.2.7 · mysql-net/MySqlConnector&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/mysql-net/MySqlConnector/releases/tag/2.2.7"&gt;https://github.com/mysql-net/MySqlConnector/releases/tag/2.2.7&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="avaloniauiandroid-qiita"&gt;AvaloniaUIでAndroidビルドする🚀 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/tkhshiq/items/f3a363d24cbdf5bd2793"&gt;https://qiita.com/tkhshiq/items/f3a363d24cbdf5bd2793&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="how-to-set-global-setting-for-xunit-tests-event-driven.io"&gt;How to set global setting for XUnit tests - Event-Driven.io&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://event-driven.io/en/xunit_global_settings/"&gt;https://event-driven.io/en/xunit_global_settings/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="five-years-of-fuzzing.net-with-sharpfuzz"&gt;Five years of fuzzing .NET with SharpFuzz&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://mijailovic.net/2023/07/23/sharpfuzz-anniversary/"&gt;https://mijailovic.net/2023/07/23/sharpfuzz-anniversary/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="using-azure-web-pubsub-with-protobuf-subprotocol-in.net"&gt;Using Azure Web PubSub with Protobuf subprotocol in .NET&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/corcav/using-azure-web-pubsub-with-protobuf-subprotocol-in-net-58li"&gt;https://dev.to/corcav/using-azure-web-pubsub-with-protobuf-subprotocol-in-net-58li&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="new-features-or-bug-fixes-you-might-have-missed-in.net-8"&gt;7 New Features (or bug fixes🐛) You Might Have Missed in .NET 8&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/bytehide/7-new-features-or-bug-fixes-you-might-have-missed-in-net-8-4f11"&gt;https://dev.to/bytehide/7-new-features-or-bug-fixes-you-might-have-missed-in-net-8-4f11&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="subscribe-to-the-visual-studio-blog-via-email-visual-studio-blog"&gt;Subscribe to the Visual Studio Blog via email - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/subscribe-to-the-visual-studio-blog-via-email/"&gt;https://devblogs.microsoft.com/visualstudio/subscribe-to-the-visual-studio-blog-via-email/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="debugging.net-containers-with-visual-studio-code-docker-tools.net-blog"&gt;Debugging .NET Containers with Visual Studio Code Docker Tools - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/debugging-dotnet-containers-with-visual-studio-code-docker-tools/"&gt;https://devblogs.microsoft.com/dotnet/debugging-dotnet-containers-with-visual-studio-code-docker-tools/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="rock-your-debugging-game-parallel-stack-window-tips-you-need-to-know-visual-studio-blog"&gt;Rock Your Debugging Game: Parallel Stack Window Tips You Need to Know! - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/rock-your-debugging-game-parallel-stack-window-tips-you-need-to-know/"&gt;https://devblogs.microsoft.com/visualstudio/rock-your-debugging-game-parallel-stack-window-tips-you-need-to-know/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="improvements-to-unity-shader-files-in-rider-2023.2-the.net-tools-blog"&gt;Improvements to Unity shader files in Rider 2023.2 | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/07/25/improvements-to-unity-shader-files-in-rider-2023-2/"&gt;https://blog.jetbrains.com/dotnet/2023/07/25/improvements-to-unity-shader-files-in-rider-2023-2/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="replacing-method-calls-with-interceptors-exploring-the.net-8-preview-part-5"&gt;Replacing method calls with Interceptors: Exploring the .NET 8 preview - Part 5&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/exploring-the-dotnet-8-preview-changing-method-calls-with-interceptors/"&gt;https://andrewlock.net/exploring-the-dotnet-8-preview-changing-method-calls-with-interceptors/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="ga4-data-api-with.net"&gt;GA4 Data API with .NET&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/chuac/ga4-data-api-with-net-1n00"&gt;https://dev.to/chuac/ga4-data-api-with-net-1n00&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="background-tasks-and-scheduled-jobs-in.net-meet-hangfire"&gt;Background Tasks and Scheduled Jobs in .NET? Meet Hangfire🔥&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/bytehide/background-tasks-and-scheduled-jobs-in-net-meet-hangfire-30pd"&gt;https://dev.to/bytehide/background-tasks-and-scheduled-jobs-in-net-meet-hangfire-30pd&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="enhancing-test-visualization-on-gitlab-with.net-projects"&gt;Enhancing Test Visualization on GitLab with .NET Projects&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;dejandjenic/enhancing-test-visualization-on-gitlab-with-net-projects-47f65a90c19"&gt;https://medium.com/&amp;#64;dejandjenic/enhancing-test-visualization-on-gitlab-with-net-projects-47f65a90c19&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="turn-your-chromebook-into-a.net-developer-machine"&gt;Turn your Chromebook into a .Net developer machine!&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/brunosilvadev/turn-your-chromebook-into-a-net-developer-machine-2bk6"&gt;https://dev.to/brunosilvadev/turn-your-chromebook-into-a-net-developer-machine-2bk6&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-framework-4.8-to.net-6-migration"&gt;.NET Framework 4.8 to .NET 6 migration&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://steven-giesel.com/blogPost/f531dded-44af-4341-871c-d54875877900"&gt;https://steven-giesel.com/blogPost/f531dded-44af-4341-871c-d54875877900&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="log-formatters-in-c-bruno-sonnino"&gt;Log Formatters in C# - Bruno Sonnino&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.revolution.com.br/2023/07/17/log-formatters-in-c/"&gt;https://blog.revolution.com.br/2023/07/17/log-formatters-in-c/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="how-to-run-integration-tests-using-testcontainers-with-wsl"&gt;How to run integration tests using Testcontainers with WSL&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;NelsonBN/how-to-run-integration-tests-using-testcontainers-with-wsl-52c77a2acbbb"&gt;https://medium.com/&amp;#64;NelsonBN/how-to-run-integration-tests-using-testcontainers-with-wsl-52c77a2acbbb&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="using-session-and-localstorage-in-blazor-and-maui"&gt;Using Session- and LocalStorage in Blazor and MAUI&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;kxmliebl/using-session-and-localstorage-in-blazor-and-maui-b01fbb41d14c"&gt;https://medium.com/&amp;#64;kxmliebl/using-session-and-localstorage-in-blazor-and-maui-b01fbb41d14c&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="cysharpyetanotherhttphandler-yetanotherhttphandler-brings-the-power-of-http2-and-grpc-to-unity-and.net-standard"&gt;Cysharp/YetAnotherHttpHandler: YetAnotherHttpHandler brings the power of HTTP/2 (and gRPC) to Unity and .NET Standard.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/Cysharp/YetAnotherHttpHandler"&gt;https://github.com/Cysharp/YetAnotherHttpHandler&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://neue.cc/2023/07/28_yetanotherhttphandler.html"&gt;neue cc - Unity用のHTTP/2(gRPC) Client、YetAnotherHttpHandlerを公開しました&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="matthewrdevunityuaal.maui-embedding-the-unity-game-engine-into.net-maui"&gt;matthewrdev/UnityUaal.Maui: Embedding the Unity game engine into .NET MAUI.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/matthewrdev/UnityUaal.Maui"&gt;https://github.com/matthewrdev/UnityUaal.Maui&lt;/a&gt;&lt;/p&gt;
&lt;!-- https://twitter.com/matthewrdev/status/1684349416210337793?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Did you know, with some native binding trickery, you can embed &lt;a href="https://twitter.com/hashtag/unity3d?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#unity3d&lt;/a&gt; into your &lt;a href="https://twitter.com/hashtag/Dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#Dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/Maui?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#Maui&lt;/a&gt; app!&lt;br&gt;&lt;br&gt;This makes consuming 3D content and building AR/VR experiences way, waaaay easier.&lt;br&gt;&lt;br&gt;I&amp;#39;ve created an itty bitty sample on my Github here:&lt;a href="https://t.co/2Q3IClcVZE"&gt;https://t.co/2Q3IClcVZE&lt;/a&gt;&lt;br&gt;&lt;br&gt;Enjoy! 😙👌&lt;/p&gt;&amp;mdash; Matthew Robbins (&amp;#64;matthewrdev) &lt;a href="https://twitter.com/matthewrdev/status/1684349416210337793?ref_src=twsrc%5Etfw"&gt;July 26, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/mariohewardt/status/1684254752891346944?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;ProcDump 2.0 for Linux just released!&lt;br&gt;&lt;br&gt;Want to trigger core dumps based on .NET memory usage?&lt;br&gt;&lt;br&gt;-gcm allows you to specify per generation or heap (LOH and POH) thresholds.&lt;br&gt;&lt;br&gt;-gcgen allows you to create a dump at the start and end of a GC.&lt;a href="https://t.co/NbFzOYA0nu"&gt;https://t.co/NbFzOYA0nu&lt;/a&gt; &lt;a href="https://t.co/Q56v3k66yr"&gt;https://t.co/Q56v3k66yr&lt;/a&gt;&lt;/p&gt;&amp;mdash; Mario Hewardt 🦆 (&amp;#64;MarioHewardt) &lt;a href="https://twitter.com/MarioHewardt/status/1684254752891346944?ref_src=twsrc%5Etfw"&gt;July 26, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;!-- https://twitter.com/davidfowl/status/1683956501570879489?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;.NET 8&amp;#39;s dependency injection container will support &amp;quot;keyed services&amp;quot;. A long-requested feature that has finally landed. This is useful when type alone isn&amp;#39;t enough to determine the right implementation. &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://t.co/6a4KowNSPu"&gt;pic.twitter.com/6a4KowNSPu&lt;/a&gt;&lt;/p&gt;&amp;mdash; David Fowler (&amp;#64;davidfowl) &lt;a href="https://twitter.com/davidfowl/status/1683956501570879489?ref_src=twsrc%5Etfw"&gt;July 25, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;!-- https://twitter.com/mkristensen/status/1683909106783105025?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;I like the idea of rendering XML doc comments inside Visual Studio to improve readability of code. What do you think? Vote and comment here: &lt;a href="https://t.co/wcVXmOWpzj"&gt;https://t.co/wcVXmOWpzj&lt;/a&gt; &lt;a href="https://t.co/pdE2e6iJQ7"&gt;pic.twitter.com/pdE2e6iJQ7&lt;/a&gt;&lt;/p&gt;&amp;mdash; Mads Kristensen (&amp;#64;mkristensen) &lt;a href="https://twitter.com/mkristensen/status/1683909106783105025?ref_src=twsrc%5Etfw"&gt;July 25, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2023/07/23/updates</id>
		<title>2023-07-23: .NET Lambda Annotations Framework GA, Appwrite .NET SDK (Beta), NATS .NET Client v2 Alpha</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2023/07/23/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2023-07-23T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="net-lambda-annotations-framework-is-now-generally-available-amazon-web-services"&gt;.NET Lambda Annotations Framework is now generally available | Amazon Web Services&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/jp/blogs/developer/net-lambda-annotations-framework/"&gt;https://aws.amazon.com/jp/blogs/developer/net-lambda-annotations-framework/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Lambda Annotations Framework が一般提供開始となった。&lt;/p&gt;
&lt;p&gt;.NET Lambda Annotations Framework は Source Generator をベースとした属性を設定することで AWS Lambda の関数を実装できるようにする仕組み。&lt;/p&gt;
&lt;h3 id="announcing-the-appwrite.net-sdk-beta-appwriteappwrite-discussion-5820"&gt;Announcing the Appwrite .NET SDK (Beta) 🚀 · appwrite/appwrite · Discussion #5820&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/appwrite/appwrite/discussions/5820"&gt;https://github.com/appwrite/appwrite/discussions/5820&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Appwrite (セルフホスト可能な BaaS) の .NET SDK が Beta リリースされた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/appwrite/build-a-todo-api-with-net-and-appwrite-218d"&gt;Build A Todo API With .NET And Appwrite&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="nats.net-client-v2-alpha-released-with-core-nats-support"&gt;NATS .NET Client v2 Alpha Released with Core NATS Support&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://nats.io/blog/nats-dotnet-v2-alpha-release/"&gt;https://nats.io/blog/nats-dotnet-v2-alpha-release/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NATS の .NET 向けクライアント v2 のアルファー版がリリースされた。&lt;/p&gt;
&lt;p&gt;新しいバージョンは AlterNats をベースとしたものでモダンな .NET 機能を使用したハイパフォーマンスなライブラリーを目指すものとなっている。現バージョンでは Core NATS のサポートだけとなっているが、将来的には JetStream のサポートなども予定している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://neue.cc/2023/07/20_nats_client_v2.html"&gt;neue cc - AlterNats は 公式の NATS .NET Client v2 に引き継がれました&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="the-resharper-and-rider-2023.1.4-bug-fix-release-is-here-the.net-tools-blog"&gt;The ReSharper and Rider 2023.1.4 Bug-fix Release Is Here! | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/07/18/rsrp-rd-2023-1-4-bugfix/"&gt;https://blog.jetbrains.com/dotnet/2023/07/18/rsrp-rd-2023-1-4-bugfix/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper と Rider 2023.1.4 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースではいくつかの不具合が修正されている。&lt;/p&gt;
&lt;h3 id="rider-2023.2-eap-10-is-out-the.net-tools-blog"&gt;Rider 2023.2 EAP 10 Is Out! | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/07/21/rider-2023-2-eap-10/"&gt;https://blog.jetbrains.com/dotnet/2023/07/21/rider-2023-2-eap-10/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider 2023.2 EAP 10 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは AI アシスタントのプラグインへの分離、Unreal 向けのライブコーディングとホットリロードのサポートが追加された。&lt;/p&gt;
&lt;h3 id="resharper-2023.2-eap-10-is-here-the.net-tools-blog"&gt;ReSharper 2023.2 EAP 10 Is Here! | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/07/21/resharper-2023-2-eap-10/"&gt;https://blog.jetbrains.com/dotnet/2023/07/21/resharper-2023-2-eap-10/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper 2023.2 EAP 10 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは AI アシスタントがアンバンドルされ、dotUltimate の別製品としてインストールする形となった。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="introducing-a-powerful-new-extension-manager-visual-studio-blog"&gt;Introducing a powerful new Extension Manager - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/introducing-a-powerful-new-extension-manager/"&gt;https://devblogs.microsoft.com/visualstudio/introducing-a-powerful-new-extension-manager/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 17.7 Preview 3 の新しい拡張マネージャーの紹介。&lt;/p&gt;
&lt;h3 id="reverse-engineering-existing-databases-with-entity-framework-core-the.net-tools-blog"&gt;Reverse Engineering Existing Databases with Entity Framework Core | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/07/20/reverse-engineering-existing-databases-with-entity-framework-core/"&gt;https://blog.jetbrains.com/dotnet/2023/07/20/reverse-engineering-existing-databases-with-entity-framework-core/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core で既存のデータベースから定義を作る(スキャフォールディング)方法について。&lt;/p&gt;
&lt;h3 id="azure-openai-function-calling.net-sdk"&gt;Azure OpenAI に Function calling が来たので .NET SDK で動作確認してみた&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/microsoft/articles/dotnet-sdk-openai-functioncalling"&gt;https://zenn.dev/microsoft/articles/dotnet-sdk-openai-functioncalling&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure.AI.OpenAI で Azure OpenAI Service の Function calling を試してみたことについて。&lt;/p&gt;
&lt;h3 id="response-compression-in-asp.net"&gt;Response Compression in ASP.NET&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/fabriziobagala/response-compression-in-aspnet-8ba"&gt;https://dev.to/fabriziobagala/response-compression-in-aspnet-8ba&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core のレスポンス圧縮について。&lt;/p&gt;
&lt;p&gt;有効化の設定方法のほか、カスタムな圧縮プロバイダーの実装についてなどについても触れている。&lt;/p&gt;
&lt;h3 id="semantic-kernel-ai"&gt;Semantic Kernel を使ってアプリ内に AI を組み込んでみた&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/microsoft/articles/semantic-kernel-17"&gt;https://zenn.dev/microsoft/articles/semantic-kernel-17&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Web アプリケーションに Semantic Kernel を使用して AI を組み込むことについて。&lt;/p&gt;
&lt;h3 id="net-8-preview-6blazorwebapp"&gt;.NET 8 Preview 6の新しいBlazorWebAppテンプレート&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/tomokusaba/articles/0eb9cdbb616d10"&gt;https://zenn.dev/tomokusaba/articles/0eb9cdbb616d10&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 8 Preview 6 での新しい Blazor Web アプリケーションのテンプレートの紹介。&lt;/p&gt;
&lt;h3 id="editorconfig-code-style-and-configuring-code-inspections-the.net-tools-blog"&gt;EditorConfig, Code Style, and Configuring Code Inspections | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/07/18/editorconfig-code-style-and-configuring-code-inspections/"&gt;https://blog.jetbrains.com/dotnet/2023/07/18/editorconfig-code-style-and-configuring-code-inspections/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;EditorConfig による Rider と ReSharper でのコードスタイルやコードインスペクションの紹介。&lt;/p&gt;
&lt;h3 id="x-performance-with-simd-vectorized-code-in-c.net-xoofx"&gt;10x Performance with SIMD Vectorized Code in C#/.NET | xoofx&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://xoofx.com/blog/2023/07/09/10x-performance-with-simd-in-csharp-dotnet/"&gt;https://xoofx.com/blog/2023/07/09/10x-performance-with-simd-in-csharp-dotnet/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SIMD でパフォーマンスを最適化して10倍の速度を出す方法についての解説。&lt;/p&gt;
&lt;p&gt;汎用 SIMD バージョンと CPU 固有の SIMD での最適化など。&lt;/p&gt;
&lt;h3 id="exploring-the-new-minimal-api-source-generator-exploring-the.net-8-preview-part-4"&gt;Exploring the new minimal API source generator: Exploring the .NET 8 preview - Part 4&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/exploring-the-dotnet-8-preview-exploring-the-new-minimal-api-source-generator/"&gt;https://andrewlock.net/exploring-the-dotnet-8-preview-exploring-the-new-minimal-api-source-generator/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 8 プレビューでの ASP.NET Core Minimal API での Source Generator 対応とその仕組みについての解説。&lt;/p&gt;
&lt;h3 id="too-many-tabs-open-no-problem-visual-studio-blog"&gt;Too many tabs open? No problem! - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/too-many-tabs-open-no-problem/"&gt;https://devblogs.microsoft.com/visualstudio/too-many-tabs-open-no-problem/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio で多くのタブを表示した際にスクロールできるようにする試みについて。&lt;/p&gt;
&lt;p&gt;現在拡張機能として提供され、フィードバックを受け付けている。&lt;/p&gt;
&lt;p&gt;-&lt;a href="https://marketplace.visualstudio.com/items?itemName=MadsKristensen.ScrollTabs"&gt;Scroll Tabs - Visual Studio Marketplace&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="c"&gt;(C#) ジェネリック型制約違いのオーバーロード - ネコのために鐘は鳴る&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ikorin2.hatenablog.jp/entry/2023/07/18/145555"&gt;https://ikorin2.hatenablog.jp/entry/2023/07/18/145555&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ジェネリック制約が異なるオーバーロードのメソッドを作るテクニックについて。&lt;/p&gt;
&lt;h3 id="controlling-my-ac-unit-with-nanoframework"&gt;Controlling My AC Unit With nanoFramework&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/mrcsharp/controlling-my-ac-unit-with-nanoframework-1a5k"&gt;https://dev.to/mrcsharp/controlling-my-ac-unit-with-nanoframework-1a5k&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;nanoFramework と ESP32 でエアコンをコントロールする試み。&lt;/p&gt;
&lt;h3 id="asp.net-core"&gt;明日から使える ASP.NET Core ロギング術！&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://speakerdeck.com/nenonaninu/ming-ri-karashi-eru-asp-dot-net-core-rogingushu"&gt;https://speakerdeck.com/nenonaninu/ming-ri-karashi-eru-asp-dot-net-core-rogingushu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core のロギングについての解説。リクエストのトレースといったことについても紹介している。&lt;/p&gt;
&lt;script defer class="speakerdeck-embed" data-id="001c248c5efc4473accff9d8aac4bd40" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="microsoftsemantic-memory-index-and-query-any-data-using-llm-and-natural-language"&gt;microsoft/semantic-memory: Index and query any data using LLM and natural language.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/microsoft/semantic-memory"&gt;https://github.com/microsoft/semantic-memory&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Semantic Kernel と連携するカスタムデータパイプラインによるインデックスの作成とクエリーを行うライブラリー。&lt;/p&gt;
&lt;h3 id="riokmapperly-a.net-source-generator-for-generating-object-mappings.no-runtime-reflection"&gt;riok/mapperly: A .NET source generator for generating object mappings. No runtime reflection.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/riok/mapperly"&gt;https://github.com/riok/mapperly&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Source Generator ベースのオブジェクトのマッピング (データの移し替え) を行うライブラリー。&lt;/p&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;p&gt;異なるプラットフォーム、OS 向けの NativeAOT を行えるようにする NuGet パッケージ。&lt;/p&gt;
&lt;!-- https://twitter.com/mstrehovsky/status/1681170442269364225?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;PublishAotCross: NuGet package to help you cross-compile .NET Native AOT apps to different OSes/architectures. Works on .NET 8 Preview 6+ &lt;a href="https://t.co/t7dya09n89"&gt;https://t.co/t7dya09n89&lt;/a&gt;&lt;/p&gt;&amp;mdash; Michal Strehovský (&amp;#64;MStrehovsky) &lt;a href="https://twitter.com/MStrehovsky/status/1681170442269364225?ref_src=twsrc%5Etfw"&gt;July 18, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Avalonia XPF (クロスプラットフォーム WPF 製品) の Private Preview の応募が開始。&lt;/p&gt;
&lt;!-- https://twitter.com/avaloniaui/status/1681189307023851520?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Thrilled to announce we&amp;#39;ve rolled out the first trials of Avalonia XPF! &lt;br&gt;&lt;br&gt;Ready to take your WPF app to new platforms? Join the journey and apply for a trial today. &lt;br&gt;&lt;br&gt;👉 &lt;a href="https://t.co/B8Q6ELEe35"&gt;https://t.co/B8Q6ELEe35&lt;/a&gt; &lt;a href="https://t.co/qy6d3ki9u5"&gt;pic.twitter.com/qy6d3ki9u5&lt;/a&gt;&lt;/p&gt;&amp;mdash; Avalonia UI (&amp;#64;AvaloniaUI) &lt;a href="https://twitter.com/AvaloniaUI/status/1681189307023851520?ref_src=twsrc%5Etfw"&gt;July 18, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Visual Studio には固有のクリップボード履歴があるという話。&lt;/p&gt;
&lt;!-- https://twitter.com/hassanrezkhabib/status/1680748023729762304?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Did you know Visual Studio has it&amp;#39;s own clipboard history (keyboard buffer ring) where you can get values you copied before in your code? All you gotta do is to hit CTRL + SHIFT + V&lt;a href="https://twitter.com/hashtag/visualstudio?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#visualstudio&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/productivity?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#productivity&lt;/a&gt; &lt;a href="https://t.co/KU2gvvfux4"&gt;pic.twitter.com/KU2gvvfux4&lt;/a&gt;&lt;/p&gt;&amp;mdash; Hassan Habib (&amp;#64;HassanRezkHabib) &lt;a href="https://twitter.com/HassanRezkHabib/status/1680748023729762304?ref_src=twsrc%5Etfw"&gt;July 17, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="tentative-c-12-feature-list-dotnetroslyn-discussion-69074"&gt;Tentative C# 12 feature list · dotnet/roslyn · Discussion #69074&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/roslyn/discussions/69074"&gt;https://github.com/dotnet/roslyn/discussions/69074&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;現時点での暫定的な C# 12 の機能リスト。&lt;/p&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
</feed>