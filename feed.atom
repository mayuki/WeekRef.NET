<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<id>/</id>
	<title>WeekRef.NET</title>
	<author>
		<name>Mayuki Sawatari</name>
	</author>
	<link rel="self" href="/" />
	<rights>Copyright © Mayuki Sawatari &lt;mayuki@misuzilla.org&gt;</rights>
	<updated>2022-12-31T09:14:45Z</updated>
	<logo>/img/logo.png</logo>
	<subtitle>.NET 関連の情報をほぼ週刊配信</subtitle>
	<entry>
		<id>/2022/12/31/updates</id>
		<title>2022-12-31: BenchmarkDotNet 0.13.3</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2022/12/31/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2022-12-31T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="benchmarkdotnet-v0.13.3-benchmarkdotnet"&gt;BenchmarkDotNet v0.13.3 | BenchmarkDotNet&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://benchmarkdotnet.org/changelog/v0.13.3.html"&gt;https://benchmarkdotnet.org/changelog/v0.13.3.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;BenchmarkDotNet 0.13.3 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは ARM64 逆アセンブラー、.NET 8 の初期サポート、.NET 6/7 の Mono VM サポート、armv6 と ppc64le のサポートといったプラットフォーム技術への対応が追加された。
その他 WASM や NativeAOT、 Android でのさまざまな改善や ExceptionDiagnoser や PerfCollectProfiler といった機能の追加が行われている。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="practicing-algorithms-using-polyglot-notebooks-part-1-setup"&gt;Practicing algorithms using Polyglot Notebooks - part 1 (setup)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/kkoziarski/practicing-algorithms-using-polyglot-notebooks-part-1-setup-1fp3"&gt;https://dev.to/kkoziarski/practicing-algorithms-using-polyglot-notebooks-part-1-setup-1fp3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Polyglot Notebooks (.NET Interactive) を使用したアルゴリズムの勉強記事シリーズ。セットアップやヘルパーなどを紹介している。&lt;/p&gt;
&lt;h3 id="json-c-c"&gt;JSON とかの中身確認ツール | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2022/12/binarytool/"&gt;https://ufcpp.net/blog/2022/12/binarytool/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MessagePack や JSON などのデータをパースして表示、再シリアライズするといったツールを Blazor WebAssembly で作成したという記事。&lt;/p&gt;
&lt;h3 id="how-to-use-change-tokens-in.net-7"&gt;How to Use Change Tokens in .NET 7?&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;gokerakce/how-to-use-change-tokens-in-net-7-3db9cc43910f"&gt;https://medium.com/&amp;#64;gokerakce/how-to-use-change-tokens-in-net-7-3db9cc43910f&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;IOptionsMonitor などで使用される ChangeToken の使い方を紹介している記事。&lt;/p&gt;
&lt;h3 id="semgrep-sql-injection-1"&gt;Semgrep で SQL Injection と戦う #1&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/masakura/articles/3e65ba04401256"&gt;https://zenn.dev/masakura/articles/3e65ba04401256&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;静的コード解析ツールの Semgrep で C# のコードを解析し、SQL インジェクションを検出する方法についての記事。
記事では Dapper での対応と、いくつかの C# のコードパターンに対応させる方法を紹介している。&lt;/p&gt;
&lt;h3 id="udp-qiita"&gt;UDPでパケットが失われたり入れ替わることを検証 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/diontools/items/822772f8f2d54be8260a"&gt;https://qiita.com/diontools/items/822772f8f2d54be8260a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;UDP で送受信した際にどこ程度ドロップや並び替えが発生するのかを検証してみたという記事。&lt;/p&gt;
&lt;h3 id="a-heavy-lift-bringing-kestrel-yarp-to-azure-app-services-qiita"&gt;A Heavy Lift: Bringing Kestrel + YARP to Azure App Services をピックアップして訳しつつ補足する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/nt-7/items/786ec694b17d8816c2c9"&gt;https://qiita.com/nt-7/items/786ec694b17d8816c2c9&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure App Service のフロントエンドを Kestrel + YARP へ移行したことについての公式ブログ記事を訳して紹介している記事。&lt;/p&gt;
&lt;h3 id="fun-with-nanoframework-running.net-c-on-esp32"&gt;Fun with NanoFramework, running .Net C# on ESP32&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://sandervandevelde.wordpress.com/2022/12/15/fun-with-nanoframework-running-net-charp-on-esp32/"&gt;https://sandervandevelde.wordpress.com/2022/12/15/fun-with-nanoframework-running-net-charp-on-esp32/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ESP32 で .NET nanoFramework 使用して C# のコードを動かす方法を解説している記事。&lt;/p&gt;
&lt;p&gt;記事では MP3 の再生や Wi-Fi への接続方法なども紹介している。&lt;/p&gt;
&lt;h3 id="visual-studio-qiita"&gt;Visual Studioから利用できるプロジェクトテンプレートを作成する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/kamikawa_m/items/75c337f101d9d2f6080e"&gt;https://qiita.com/kamikawa_m/items/75c337f101d9d2f6080e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio で使用できるプロジェクトテンプレートを作成する手順を紹介している記事。&lt;/p&gt;
&lt;h3 id="asp.net-core-identity-qiita"&gt;ASP.NET Core Identity の拡張性を探る - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/MugeSo/items/7ada1f2713b8917970c3"&gt;https://qiita.com/MugeSo/items/7ada1f2713b8917970c3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core Identity のユーザーデータやパスワード関連など細かく拡張するためのインターフェースを紹介している記事。&lt;/p&gt;
&lt;h3 id="top.net-blog-posts-of-2022.net-blog"&gt;Top .NET Blog Posts of 2022 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/top-dotnet-blog-posts-of-2022/"&gt;https://devblogs.microsoft.com/dotnet/top-dotnet-blog-posts-of-2022/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Blog の2022年のトップ投稿を改めて紹介している記事。&lt;/p&gt;
&lt;h3 id="top.net-videos-live-streams-of-2022.net-blog"&gt;Top .NET Videos &amp;amp; Live Streams of 2022 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/top-dotnet-videos-live-streams-of-2022/"&gt;https://devblogs.microsoft.com/dotnet/top-dotnet-videos-live-streams-of-2022/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET チームによる2022年のトップ動画とライブストリーミングを紹介している記事。&lt;/p&gt;
&lt;h3 id="c-qiita"&gt;C#のソースコードから差分のあるメソッドだけを抜き出す - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/myosotis/items/fa48b8aa940f53405218"&gt;https://qiita.com/myosotis/items/fa48b8aa940f53405218&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Roslyn を使用してソースコードを解析して、二つのソースコード間のメソッドを比較して追加、削除、変更を抽出を試みるという記事。&lt;/p&gt;
&lt;h3 id="asp.net-core-7.0-blazor"&gt;ASP.NET Core 7.0 Blazor の新機能のカスタム エレメントを使ってみよう&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/okazuki/articles/blazor-customtag"&gt;https://zenn.dev/okazuki/articles/blazor-customtag&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 の Blazor で対応した、コンポーネントを一般的な HTML の要素のように使用できる仕組みであるカスタムエレメントを使用する方法についての記事。&lt;/p&gt;
&lt;h3 id="better-assertions-for-your-unit-tests"&gt;Better assertions for your unit tests&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.johansmarius.dev/2022/12/better-assertions-for-your-unit-tests.html?m=1"&gt;https://www.johansmarius.dev/2022/12/better-assertions-for-your-unit-tests.html?m=1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ユニットテストでアサーションを Fluent な形で記述する FluentAssertions の紹介をしている記事。&lt;/p&gt;
&lt;h3 id="keycloak-as-authorization-server-in.net"&gt;Keycloak as Authorization Server in .NET&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/nikiforovall/keycloak-as-authorization-server-in-net-91m"&gt;https://dev.to/nikiforovall/keycloak-as-authorization-server-in-net-91m&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Keycloak をASP.NET Core の認証サーバーとして使用する方法について紹介している記事。&lt;/p&gt;
&lt;h3 id="accelerate-ml.net-training-with-intel-onedal"&gt;Accelerate ML.NET training with Intel oneDAL&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/accelerate-ml-net-training-with-intel-onedal/"&gt;https://devblogs.microsoft.com/dotnet/accelerate-ml-net-training-with-intel-onedal/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ML.NET 3.0 のプレビューリリースで Intel oneDAL バックエンドを利用できるようになったというアナウンス。&lt;/p&gt;
&lt;h3 id="vb.netmodvb-qiita"&gt;【VB.NET】拡張コンパイラModVBの紹介(インストール編) - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/yaju/items/2c154a939b9896c855e2"&gt;https://qiita.com/yaju/items/2c154a939b9896c855e2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;VB.NET を拡張したコンパイラー ModVB の導入方法を紹介している記事。&lt;/p&gt;
&lt;h3 id="blazor-javascript"&gt;Blazor から JavaScript のクラスのコンストラクタを呼びたい&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/okazuki/articles/call-js-constructor-from-blazor"&gt;https://zenn.dev/okazuki/articles/call-js-constructor-from-blazor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor の C# 側から JavaScript のクラスのインスタンスを作る方法についての記事。
.NET 8 では直接インスタンスを作ることができるが、.NET 7 では生成用の関数を呼び出すといった形をとる必要がある。&lt;/p&gt;
&lt;h3 id="net-maui-entityframeworkcore"&gt;【.NET MAUI 】EntityFrameworkCore のマイグレーションができない時の対処法&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/tomori_k/articles/9cb07c31a1fdca"&gt;https://zenn.dev/tomori_k/articles/9cb07c31a1fdca&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI プロジェクトでは Entity Framework Core のマイグレーションを実行できない問題とその対処についての記事。&lt;/p&gt;
&lt;h3 id="c-tipudp-qiita"&gt;[C#] メモtip:UDPマルチキャストを受信する(送受信同一ホスト対応) - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/Yothuba3/items/ae6d7822b6b3cfe63be7"&gt;https://qiita.com/Yothuba3/items/ae6d7822b6b3cfe63be7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;UDP マルチキャストを同一ホストでの送信も含めて受信する方法についての記事。&lt;/p&gt;
&lt;h3 id="cdapper-qiita"&gt;【C#】Dapper忘備録【基本編】 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/YuMo_tea/items/ee4182260a0e3216237e"&gt;https://qiita.com/YuMo_tea/items/ee4182260a0e3216237e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Dapper の基本的なメソッドと使い方を紹介している記事。&lt;/p&gt;
&lt;h3 id="ctencent-trtc-sdk-qiita"&gt;C#でTencent TRTC SDK使ってみた！ - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/SoeAtsu/items/6085c647b2c61feed5cb"&gt;https://qiita.com/SoeAtsu/items/6085c647b2c61feed5cb&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Tencent Real-Time Communication の SDK を使用して WPF アプリケーションにビデオ通話を組み込んでみるという記事。&lt;/p&gt;
&lt;h3 id="system.threading.ratelimiting-qiita"&gt;種類を分けて流量制限をする(System.Threading.RateLimiting) - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/skitoy4321/items/265111dd440041e66e5a"&gt;https://qiita.com/skitoy4321/items/265111dd440041e66e5a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 で導入されたレートリミットの API でURLやリソースといった種類ごとに流量制限を行うための PartitionedRateLimiter クラスの解説記事。&lt;/p&gt;
&lt;h3 id="ix.netmaxby.net-6maxbywithties-qiita"&gt;Ix.NETのMaxBy、.NET 6から加わった標準メソッドと名称が衝突したので、MaxByWithTiesになってた - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/RyotaMurohoshi/items/9072987415bcab80b703"&gt;https://qiita.com/RyotaMurohoshi/items/9072987415bcab80b703&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 で LINQ に MaxBy などが追加された影響で Ix.NET の同名のメソッドが変わったことについての記事。&lt;/p&gt;
&lt;h3 id="azure-app-service-asp.net-core-app-service-getconnectionstring-jsakamoto"&gt;Azure App Service に配置した ASP.NET Core アプリで、App Service 上に設定した接続文字列を GetConnectionString で取得できない? | &amp;#64;jsakamoto&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devadjust.exblog.jp/29454749/"&gt;https://devadjust.exblog.jp/29454749/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure App Service の接続文字列設定 (Configuration の  Connection strings) で PostgreSQL のみ正しく取得できない問題について。&lt;/p&gt;
&lt;p&gt;App Service で設定した接続文字列には各データベース種類ごとのプレフィックスがついており、M.E.Configuration は環境変数から読み取る際にそれらを考慮しているが PostgreSQL のみ考慮されていない問題がある。&lt;/p&gt;
&lt;h3 id="generatedregex-qiita"&gt;GeneratedRegexで遊ぶ - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/kurema/items/068385ba2f8bbe3858e1"&gt;https://qiita.com/kurema/items/068385ba2f8bbe3858e1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 で導入された正規表現の処理をあらかじめソースジェネレーターで生成する GeneratedRegex について解説している記事。&lt;/p&gt;
&lt;p&gt;記事では使用方法のほか、実装についての解説、パフォーマンスの比較といったことに触れている。&lt;/p&gt;
&lt;h3 id="hybrid-blazor-nativeaot"&gt;Hybrid Blazor + NativeAOT = ❤️&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://codevision.medium.com/hybrid-blazor-nativeaot-%EF%B8%8F-a6c93de6ede3"&gt;https://codevision.medium.com/hybrid-blazor-nativeaot-%EF%B8%8F-a6c93de6ede3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor Hybrid を Windows Forms 上の WebView2 で表示し、NativeAOT で動作させる方法についての記事。&lt;/p&gt;
&lt;h3 id="net-conf-2022-recap-event.net-7-windows"&gt;.NET Conf 2022 Recap Event 福岡で .NET 7 時代の Windows アプリケーション開発について話しました - しばやん雑記&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.shibayan.jp/entry/20221226/1671991195"&gt;https://blog.shibayan.jp/entry/20221226/1671991195&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Conf 2022 Recap Event 福岡での .NET 7 時代の Windows アプリケーション開発についてのセッションの振り返りとスライドの記事。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="kareaditakavita-kavita-is-a-fast-feature-rich-cross-platform-reading-server.built-with-a-focus-for-manga-and-the-goal-of-being-a-full-solution-for-all-your-reading-needs.setup-your-own-server-and-share-your-reading-collection-with-your-friends-and-family"&gt;Kareadita/Kavita: Kavita is a fast, feature rich, cross platform reading server. Built with a focus for manga and the goal of being a full solution for all your reading needs. Setup your own server and share your reading collection with your friends and family.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/Kareadita/Kavita"&gt;https://github.com/Kareadita/Kavita&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Web ベースの書籍リーダーアプリケーション。&lt;/p&gt;
&lt;p&gt;ZIP ファイルなどを取り扱えるいわゆる自炊などのマンガビューアー。&lt;/p&gt;
&lt;h3 id="mkaringconfuserex-an-open-source-free-protector-for.net-applications"&gt;mkaring/ConfuserEx: An open-source, free protector for .NET applications&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/mkaring/ConfuserEx"&gt;https://github.com/mkaring/ConfuserEx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET アプリケーションの難読化を行うツール。&lt;/p&gt;
&lt;p&gt;コマンドラインツールや MSBuild タスクといった形での利用が可能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/myosotis/items/e14e6e448eeaef574172"&gt;.Netの単一実行ファイルを難読化する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="mrdave1999dotenv.core-dotenv.core-is-a-class-library-for-read-and-parsing.env-files-in.net-core"&gt;MrDave1999/dotenv.core: dotenv.core is a class library for read and parsing .env files in .NET Core&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/MrDave1999/dotenv.core?hss_channel=tw-2384354214"&gt;https://github.com/MrDave1999/dotenv.core?hss_channel=tw-2384354214&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.env (環境変数を記述したファイル) を .NET から取り扱うライブラリー。&lt;/p&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="soysign"&gt;SoySign | シンプルな電子契約サービス&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://soysign.com/"&gt;https://soysign.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor で実装された電子サインサービス。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/nekojoker/articles/11942566354b49"&gt;【Blazor】電子サインができるWebサービスを4ヶ月かけて作った話&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2022/12/23/updates</id>
		<title>2022-12-23: Oracle Entity Framework Core 7, ReSharper and Rider 2022.3.1</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2022/12/23/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2022-12-23T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;p&gt;今週は都合によりリンクだけの紹介となっていますことご了承ください。&lt;/p&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="announcing-oracle-entity-framework-core-7"&gt;Announcing Oracle Entity Framework Core 7&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/oracledevs/announcing-oracle-entity-framework-core-7-d89a2495b7db"&gt;https://medium.com/oracledevs/announcing-oracle-entity-framework-core-7-d89a2495b7db&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="resharper-and-rider-2022.3.1-bug-fixes-are-here"&gt;ReSharper and Rider 2022.3.1 Bug Fixes Are Here&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/12/21/resharper-and-rider-2022-3-1-bug-fixes/"&gt;https://blog.jetbrains.com/dotnet/2022/12/21/resharper-and-rider-2022-3-1-bug-fixes/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="write-markdown-without-leaving-visual-studio-visual-studio-blog"&gt;Write markdown without leaving Visual Studio - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/write-markdown-without-leaving-visual-studio/"&gt;https://devblogs.microsoft.com/visualstudio/write-markdown-without-leaving-visual-studio/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://forest.watch.impress.co.jp/docs/news/1466186.html"&gt;「Visual Studio 2022」にMarkdownエディターが導入へ ～拡張機能なしで編集・プレビュー／「Visual Studio 2022 17.5 Preview 2」でテスト中 - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="sticky-scroll-now-in-preview-visual-studio-blog"&gt;Sticky Scroll now in preview - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/sticky-scroll-now-in-preview/"&gt;https://devblogs.microsoft.com/visualstudio/sticky-scroll-now-in-preview/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://forest.watch.impress.co.jp/docs/news/1464242.html"&gt;「VS Code」でも人気の「固定スクロール」が「Visual Studio 2022」に／「Visual Studio 2022 17.5 Preview 2」でテスト中 - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="kb5022083-wpf-xps-microsoft"&gt;KB5022083 WPF ベースのアプリケーションが XPS ドキュメントをレンダリングする方法の変更 - Microsoft サポート&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://support.microsoft.com/ja-jp/topic/kb5022083-wpf-%E3%83%99%E3%83%BC%E3%82%B9%E3%81%AE%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%8C-xps-%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E3%82%92%E3%83%AC%E3%83%B3%E3%83%80%E3%83%AA%E3%83%B3%E3%82%B0%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95%E3%81%AE%E5%A4%89%E6%9B%B4-a4ae4fa4-bc58-4c37-acdd-5eebc4e34556"&gt;https://support.microsoft.com/ja-jp/topic/kb5022083-wpf-%E3%83%99%E3%83%BC%E3%82%B9%E3%81%AE%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%8C-xps-%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E3%82%92%E3%83%AC%E3%83%B3%E3%83%80%E3%83%AA%E3%83%B3%E3%82%B0%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95%E3%81%AE%E5%A4%89%E6%9B%B4-a4ae4fa4-bc58-4c37-acdd-5eebc4e34556&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://forest.watch.impress.co.jp/docs/news/1465037.html"&gt;2022年12月「.NET」セキュリティ更新に問題、WPFアプリでXPS文書が正しく表示されない／セキュリティ強化策の影響、Microsoftが回避策を案内 - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="unsafe-c-c"&gt;Unsafe クラスの敗北 (関数ポインター) | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2022/12/unsafer-unsafe/"&gt;https://ufcpp.net/blog/2022/12/unsafer-unsafe/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-7-bindafter-input-qiita"&gt;.NET 7 の新機能 &amp;#64;bind:after で input 入力を即時処理する (そしてもう一度死ぬ) - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/jsakamoto/items/0a265288cacea70634b4"&gt;https://qiita.com/jsakamoto/items/0a265288cacea70634b4&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="app-service-authentication-easy-auth-asp.net"&gt;App Service Authentication (Easy Auth) と ASP.NET のフォーム認証を共存させつつ利用する - しばやん雑記&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.shibayan.jp/entry/20221218/1671348695"&gt;https://blog.shibayan.jp/entry/20221218/1671348695&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="c-interface"&gt;(C#) interface の静的仮想メンバーでジェネリックコンストラクタ - ネコのために鐘は鳴る&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ikorin2.hatenablog.jp/entry/2022/12/17/212228"&gt;https://ikorin2.hatenablog.jp/entry/2022/12/17/212228&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="neue-cc-2022c-incremental-source-generator"&gt;neue cc - 2022年のC# (Incremental) Source Generator開発手法&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://neue.cc/2022/12/16_IncrementalSourceGenerator.html"&gt;https://neue.cc/2022/12/16_IncrementalSourceGenerator.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="libraryimportattribute.net-7"&gt;LibraryImportAttributeが.NET 7で追加されたので触ってみました - プログラム系統備忘録ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://tan.hatenadiary.jp/entry/2022/12/16/002739"&gt;https://tan.hatenadiary.jp/entry/2022/12/16/002739&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="t4-c-c"&gt;必ず、かの邪知暴虐の T4 を除かねばならぬと決意した | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2022/12/no-more-t4/"&gt;https://ufcpp.net/blog/2022/12/no-more-t4/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="experimenting-with.net-webassembly-running.net-based-spin-application-on-wasi-node-pool-in-aks"&gt;Experimenting With .NET &amp;amp; WebAssembly - Running .NET Based Spin Application On WASI Node Pool in AKS&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.tpeczek.com/2022/12/experimenting-with-net-webassembly.html"&gt;https://www.tpeczek.com/2022/12/experimenting-with-net-webassembly.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="gitlab-code-quality-sast"&gt;GitLab でも好きな静的解析ツール (Code Quality &amp;amp; SAST) を使う&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/masakura/articles/ff74864c9af28d"&gt;https://zenn.dev/masakura/articles/ff74864c9af28d&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="blazordatafactoryel-qiita"&gt;BlazorとDataFactoryで作るお手軽ELアプリ - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/bitflyer/items/3b4ef34a9bdf5991b8f6"&gt;https://qiita.com/bitflyer/items/3b4ef34a9bdf5991b8f6&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="adding-new-files-just-got-a-lot-faster-visual-studio-blog"&gt;Adding new files just got a lot faster - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/adding-new-files-just-got-a-lot-faster/"&gt;https://devblogs.microsoft.com/visualstudio/adding-new-files-just-got-a-lot-faster/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-ibm-power-1-qiita"&gt;.NET をIBM Powerで動かしてみた話 #1 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/Nakaji1106/items/f0761c4d1dce58c0b8d5"&gt;https://qiita.com/Nakaji1106/items/f0761c4d1dce58c0b8d5&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/Nakaji1106/items/7ac09e9579a8b3f271f3"&gt;.NET をIBM Powerで動かしてみた話 #2 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/Nakaji1106/items/d6360a44b52ab360f76d"&gt;.NET をIBM Powerで動かしてみた話 #3 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="c11"&gt;C#11ではリストパターンが使えるようになった。&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/yuchiki/articles/csharp-list-pattern"&gt;https://zenn.dev/yuchiki/articles/csharp-list-pattern&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="c-inumbert-qiita"&gt;[C#] INumberTの実装総覧 (分数型の実装例付き) - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/YuHima03/items/20b59013d42d294b9839"&gt;https://qiita.com/YuHima03/items/20b59013d42d294b9839&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="build-your-own-podcast-app-with.net-7-blazor-and.net-maui.net-blog"&gt;Build Your Own Podcast App with .NET 7, Blazor, and .NET MAUI - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/build-your-own-podcast-app-with-dotnet-blazor-and-dotnet-maui/"&gt;https://devblogs.microsoft.com/dotnet/build-your-own-podcast-app-with-dotnet-blazor-and-dotnet-maui/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="nanoframeworknode-redmqtt"&gt;nanoFrameworkでNode-REDにMQTT通信してみた&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/matsuataru/articles/0237a66beb73db"&gt;https://zenn.dev/matsuataru/articles/0237a66beb73db&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="xamarin.android.net6-qiita"&gt;Xamarin.Androidを.NET6に移行する方法について。 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/secile/items/10266c6b6bd5b179dc23"&gt;https://qiita.com/secile/items/10266c6b6bd5b179dc23&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="when-pulumi-met-nuke-a.net-love-story"&gt;When Pulumi met Nuke: a .NET love story&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/techwatching/when-pulumi-met-nuke-a-net-love-story-4omd"&gt;https://dev.to/techwatching/when-pulumi-met-nuke-a-net-love-story-4omd&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="windowsc-qiita"&gt;Windowsの画面ロックをC#で検知する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/unasenohkoku/items/380e4fb4613b5abe96ea"&gt;https://qiita.com/unasenohkoku/items/380e4fb4613b5abe96ea&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-framework-nuget-nu5218-qiita"&gt;.NET Framework の NuGet パッケージに依存関係が設定されない件に対処する（NU5218警告） - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/mxProject/items/f031321ef0d229659f25"&gt;https://qiita.com/mxProject/items/f031321ef0d229659f25&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-mauiazure-ad-b2cmicrosoftaccount-qiita"&gt;.NET MAUIでAzure AD B2Cで認証する(まずはMicrosoftAccountでやってみる) - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/MAUIHighSchool/items/b8faf3aba00082b023ac"&gt;https://qiita.com/MAUIHighSchool/items/b8faf3aba00082b023ac&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/MAUIHighSchool/items/dbc288e0997003cb242e"&gt;.NET MAUIでAzure AD B2Cで認証する(Googleアカウント認証追加してみる) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asyncsync-qiita"&gt;Asyncとsync混ぜるな危険 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/superriver/items/1f1b83d2d2c6b70ba408"&gt;https://qiita.com/superriver/items/1f1b83d2d2c6b70ba408&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="string.format-qiita"&gt;String.Formatメソッドを再実装してみる - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/t0r/items/f83f6ee4ddca1bcf27eb"&gt;https://qiita.com/t0r/items/f83f6ee4ddca1bcf27eb&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="unity-2021.2-c-qiita"&gt;Unity 2021.2 から新しく使えるようになったC#のクラスを眺める - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/Gaku_Ishii/items/23d85defb8339fe3e9c0"&gt;https://qiita.com/Gaku_Ishii/items/23d85defb8339fe3e9c0&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="blazorexcel-jshandsontable-qiita"&gt;BlazorでExcel ライクなグリッドJSライブラリ「Handsontable」を使ってみる - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/yaju/items/bcca337af393f15a6795"&gt;https://qiita.com/yaju/items/bcca337af393f15a6795&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="rider-2022.3jsonc-qiita"&gt;Rider 2022.3から、JSONからC#のクラスやレコードを作る機能が追加された - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/RyotaMurohoshi/items/0c6730d0988b022378e6"&gt;https://qiita.com/RyotaMurohoshi/items/0c6730d0988b022378e6&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="rider-2022.3resharper-2022.3il-viewerilc-qiita"&gt;Rider 2022.3とReSharper 2022.3のIL Viewerで、ILをC#にデコンパイルできるようになった - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/RyotaMurohoshi/items/1f8244f0af50ad30583e"&gt;https://qiita.com/RyotaMurohoshi/items/1f8244f0af50ad30583e&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="c-how-to-write-a-source-generator-part-15-planning"&gt;C# How to Write a Source Generator Part 1/5: Planning&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://kafkawannafly.medium.com/c-how-to-write-a-source-generator-part-1-5-planning-6b4ab6ea5f63"&gt;https://kafkawannafly.medium.com/c-how-to-write-a-source-generator-part-1-5-planning-6b4ab6ea5f63&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="blazor-wasm-azure-ad"&gt;Blazor WASM でログイン後に Azure AD のセキュリティグループで認可をする&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/okazuki/articles/auth-securitygroup-blazorwasm"&gt;https://zenn.dev/okazuki/articles/auth-securitygroup-blazorwasm&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="blazor-webassembly-mark2-qiita"&gt;Blazor WebAssemblyでつくったマークシートシステム Mark2をオープンソースとして公開 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/kaorumori/items/5b7255e3244159b082d3"&gt;https://qiita.com/kaorumori/items/5b7255e3244159b082d3&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="netcode-firstgrpcgrpc-web-qiita"&gt;.NETでCode-firstなgRPC（gRPC-Web）を使う - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/michi_wkwk/items/194276f0014df74cac41"&gt;https://qiita.com/michi_wkwk/items/194276f0014df74cac41&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-7-suspicious-places-and-errors-in-the-source-code"&gt;.NET 7: suspicious places and errors in the source code&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/_sergvasiliev_/net-7-suspicious-places-and-errors-in-the-source-code-cgd"&gt;https://dev.to/_sergvasiliev_/net-7-suspicious-places-and-errors-in-the-source-code-cgd&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="cardboard-qiita"&gt;今年もクリスマスプレゼントにCardboardでゲームを作ろう。 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/secile/items/69928aa1e52152034489"&gt;https://qiita.com/secile/items/69928aa1e52152034489&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="blazor-webassembly"&gt;Blazor WebAssemblyで新規の業務システムを開発している話&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/rkatsura/articles/4b0e0b3dbb9a59"&gt;https://zenn.dev/rkatsura/articles/4b0e0b3dbb9a59&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="unityindexrange-qiita"&gt;UnityでもIndex/Rangeを使おう！ - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/Euglenach/items/c433afe78d72fc1a18fc"&gt;https://qiita.com/Euglenach/items/c433afe78d72fc1a18fc&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="csoundmaker-qiita"&gt;C#で昔のゲームのような音を生成する「SoundMaker」を公開しました - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/DTB_AutumnSky/items/8d78520567211d9a8dd2"&gt;https://qiita.com/DTB_AutumnSky/items/8d78520567211d9a8dd2&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="frognote-qiita"&gt;ノートの作成・管理・ふりかえりソフトウェア 「FrogNote」を開発しました - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/DTB_AutumnSky/items/1d691e2428ac7fa9330c"&gt;https://qiita.com/DTB_AutumnSky/items/1d691e2428ac7fa9330c&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="system.text.jsonunity-yucchiys-note"&gt;System.Text.Jsonのソース生成をUnityで試す | Yucchiy's Note&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.yucchiy.com/2022/12/csharp-advent-calendar-system-text-json-unity/"&gt;https://blog.yucchiy.com/2022/12/csharp-advent-calendar-system-text-json-unity/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="nenonaninutypedsignalr.client.typescript-typescript-source-generator-to-provide-strongly-typed-signalr-clients-by-analyzing-c-type-definitions"&gt;nenoNaninu/TypedSignalR.Client.TypeScript: TypeScript source generator to provide strongly typed SignalR clients by analyzing C# type definitions.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/nenoNaninu/TypedSignalR.Client.TypeScript"&gt;https://github.com/nenoNaninu/TypedSignalR.Client.TypeScript&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.neno.dev/entry/2022/12/21/100259"&gt;【C#】SignalR にも SwaggerUI 的なのがほしい！ - ねののお庭。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="mxprojectwindowsformgenerichost-this-is-an-extension-library-for-generic-host.runs-a-windows-forms-application-on-generic-host"&gt;mxProject/WindowsFormGenericHost: This is an extension library for Generic Host. Runs a Windows Forms application on Generic Host.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/mxProject/WindowsFormGenericHost"&gt;https://github.com/mxProject/WindowsFormGenericHost&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/mxProject/items/432f7b63b15bf270f842"&gt;汎用ホストでWindowsフォームアプリケーションを実行する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="introduction-cadl"&gt;Introduction | Cadl&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://microsoft.github.io/cadl/"&gt;https://microsoft.github.io/cadl/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/niku/scraps/130738ff4eef50"&gt;おためしcadl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/timheuer/status/1603880562204495877?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;🔐 &lt;br&gt;Now in &lt;a href="https://twitter.com/VisualStudio?ref_src=twsrc%5Etfw"&gt;&amp;#64;VisualStudio&lt;/a&gt; more text visualizers -- need to double-check that JWT token claim data, no problem... &lt;a href="https://t.co/sx1KnDtXlL"&gt;pic.twitter.com/sx1KnDtXlL&lt;/a&gt;&lt;/p&gt;&amp;mdash; Tim (&amp;#64;timheuer) &lt;a href="https://twitter.com/timheuer/status/1603880562204495877?ref_src=twsrc%5Etfw"&gt;December 16, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;!-- https://twitter.com/ufcpp/status/1605378308882935809?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="ja" dir="ltr"&gt;&lt;a href="https://t.co/varu5oDw8H"&gt;https://t.co/varu5oDw8H&lt;/a&gt;&lt;br&gt;VBでもちゃんとrequiredメンバーに対応するよ！&lt;br&gt;(毎年恒例、数か月遅れ。)&lt;/p&gt;&amp;mdash; ++C++; // 管理人: 岩永 (&amp;#64;ufcpp) &lt;a href="https://twitter.com/ufcpp/status/1605378308882935809?ref_src=twsrc%5Etfw"&gt;December 21, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2022/12/15/updates</id>
		<title>2022-12-15: .NET 7 Networking Improvements, Visual Studio 2022 version 17.5 Preview 2, .NET 7.0.1, .NET 6.0.12, .NET Core 3.1.32, IronPython 3.4.0</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2022/12/15/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2022-12-15T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="net-7-networking-improvements.net-blog"&gt;.NET 7 Networking Improvements - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-7-networking-improvements/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-7-networking-improvements/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 のネットワーク関連の改善について紹介している記事。&lt;/p&gt;
&lt;p&gt;記事では次の項目について詳しく説明している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接続の施行に失敗した際のハンドリングの改善&lt;/li&gt;
&lt;li&gt;HttpHeaders の読み取りスレッドセーフティ&lt;/li&gt;
&lt;li&gt;HTTP/2 と HTTP/3 のプロトコルエラーの検出&lt;/li&gt;
&lt;li&gt;HTTP/3&lt;/li&gt;
&lt;li&gt;QUIC
&lt;ul&gt;
&lt;li&gt;.NET での QUIC&lt;/li&gt;
&lt;li&gt;API (QuicListener, QuicConnection, QuicStream)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;セキュリティ
&lt;ul&gt;
&lt;li&gt;Negotiate API (Windows 認証)&lt;/li&gt;
&lt;li&gt;証明書検証のオプション&lt;/li&gt;
&lt;li&gt;パフォーマンス&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;WebSockets
&lt;ul&gt;
&lt;li&gt;WebSockets のハンドシェイクレスポンスの詳細&lt;/li&gt;
&lt;li&gt;外部 HTTP クライアントの提供&lt;/li&gt;
&lt;li&gt;WebSockets over HTTP/2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="try-out-visual-studio-2022-version-17.5-preview-2-visual-studio-blog"&gt;Try out Visual Studio 2022 version 17.5 Preview 2 - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/try-out-visual-studio-2022-17-5-preview-2/"&gt;https://devblogs.microsoft.com/visualstudio/try-out-visual-studio-2022-17-5-preview-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 version 17.5 Preview 2 がリリースされた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;オールインワン検索の改善&lt;/li&gt;
&lt;li&gt;編集時のスティッキースクロール&lt;/li&gt;
&lt;li&gt;デバッガーテキストビジュアライザーでの  URL エンコード文字列や Base64、JWT といった文字列のデコード&lt;/li&gt;
&lt;li&gt;クイック追加&lt;/li&gt;
&lt;li&gt;再認証ワークフローの改善&lt;/li&gt;
&lt;li&gt;ASP.NET Core アプリケーションの Azure Container Apps への発行&lt;/li&gt;
&lt;li&gt;ASP.NET Core プロジェクトのアプリケーション出力の統合ターミナルへの出力&lt;/li&gt;
&lt;li&gt;さまざまな C++ の改善&lt;/li&gt;
&lt;li&gt;.config ファイルを使用したインストールレイアウトのカスタマイズ&lt;/li&gt;
&lt;li&gt;終了時に更新する機能&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="net-december-2022-updates.net-7.0.1.net-6.0.12.net-core-3.1.32.net-blog"&gt;.NET December 2022 Updates – .NET 7.0.1, .NET 6.0.12, .NET Core 3.1.32 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/december-2022-updates/"&gt;https://devblogs.microsoft.com/dotnet/december-2022-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7.0.1, .NET 6.0.12, .NET Core 3.1.32 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは一件のセキュリティー修正が含まれ、細工された XPS ファイルを開くことでコードを実行できる、リモートコード実行の脆弱性が修正されている。&lt;/p&gt;
&lt;p&gt;また、.NET Core 3.1 は2022年12月13日でサポート終了となるため、このリリースが最後のリリースとなる。&lt;/p&gt;
&lt;h3 id="net-framework-december-2022-security-and-quality-rollup-updates.net-blog"&gt;.NET Framework December 2022 Security and Quality Rollup Updates - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-framework-december-2022-security-and-quality-rollup-updates/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-framework-december-2022-security-and-quality-rollup-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework のセキュリティーと累積ロールアップ更新の2022年12月リリース。&lt;/p&gt;
&lt;p&gt;このリリースでは一件のセキュリティー修正が含まれ、細工された XPS ファイルを開くことでコードを実行できる、リモートコード実行の脆弱性が修正されている。&lt;/p&gt;
&lt;h3 id="release-ironpython-3.4.0-ironlanguagesironpython3"&gt;Release IronPython 3.4.0 · IronLanguages/ironpython3&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/IronLanguages/ironpython3/releases/tag/v3.4.0"&gt;https://github.com/IronLanguages/ironpython3/releases/tag/v3.4.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;IronPython 3.4.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは Python 3.4 の構文と標準ライブラリーをサポートする。また一部の新しいバージョンの構文などもサポートしている。&lt;/p&gt;
&lt;p&gt;ランタイムターゲットは .NET Framework 4.6.2, .NET Core 3.1, .NET 6 となっている。&lt;/p&gt;
&lt;p&gt;.NET Tools としても配布され、&lt;code&gt;dotnet tool install -g IronPython.Console&lt;/code&gt; といった形でのインストールと実行も可能となった。&lt;/p&gt;
&lt;p&gt;-&lt;a href="https://forest.watch.impress.co.jp/docs/news/1463122.html"&gt;「IronPython 3.4.0」がようやく正式版に ～.NETと統合されたPython言語のオープンソース実装／「Python 2」から「Python 3」へ移行- 窓の杜&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="polyglot-notebooks-december-2022-release.net-blog"&gt;Polyglot Notebooks - December 2022 Release - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/polyglot-notebooks-december-2022-release/"&gt;https://devblogs.microsoft.com/dotnet/polyglot-notebooks-december-2022-release/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Polyglot Notebooks (旧 .NET Interactive) の2022年12月のリリース。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.NET 7 へのアップグレード&lt;/li&gt;
&lt;li&gt;C# 11 と F# 7 のサポート&lt;/li&gt;
&lt;li&gt;新しい動的カーネルピッカーによる SQL と KQL の改善&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="release-2.2.2-mysql-netmysqlconnector"&gt;Release 2.2.2 · mysql-net/MySqlConnector&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/mysql-net/MySqlConnector/releases/tag/2.2.2"&gt;https://github.com/mysql-net/MySqlConnector/releases/tag/2.2.2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Async MySqlConnector 2.2.2 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは TLS 接続初期化時のメモリーリークや接続時の例外発生時のオブジェクト破棄の問題が修正されている。&lt;/p&gt;
&lt;h3 id="visual-studio-code-november-2022"&gt;Visual Studio Code November 2022&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://code.visualstudio.com/updates/v1_74"&gt;https://code.visualstudio.com/updates/v1_74&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio Code 1.74 (1.74.1) がリリースされた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;アクセシビリティの改善&lt;/li&gt;
&lt;li&gt;エクスプローラーの自動表示のカスタマイズ&lt;/li&gt;
&lt;li&gt;ノートブックと差分表示のオーディオキュー&lt;/li&gt;
&lt;li&gt;マージエディターでのアンドゥ/リドゥ&lt;/li&gt;
&lt;li&gt;安全ではないリポジトリの管理&lt;/li&gt;
&lt;li&gt;JavaScript &lt;code&gt;console.profile&lt;/code&gt; による収集&lt;/li&gt;
&lt;li&gt;return からの定義へ移動 (JavaScript/TypeScript)&lt;/li&gt;
&lt;li&gt;リモートトンネル&lt;/li&gt;
&lt;li&gt;Jupyter Notebook の &amp;quot;Just My Code&amp;quot; デバッグ&lt;/li&gt;
&lt;li&gt;Dev Container の GPU サポート&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;また、1.74 リリース後に様々な不具合を修正した 1.74.1 がリリースされている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://forest.watch.impress.co.jp/docs/news/1462989.html"&gt;「Visual Studio Code」でのリモート開発が手軽に ～リモートトンネル機能が提供開始／「SSH」は不要。「VS Code Server」で簡単セットアップ - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="migrating-from-asp.net-to-asp.net-core-with-project-migrations-part-5.net-blog"&gt;Migrating from ASP.NET to ASP.NET Core with Project Migrations Part 5 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/migrating-from-asp-net-to-asp-net-core-part-5/"&gt;https://devblogs.microsoft.com/dotnet/migrating-from-asp-net-to-asp-net-core-part-5/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET から ASP.NET Core への移行記事シリーズ。System.Web.Adapter 1.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;記事では移行の Visual Studio 拡張機能と System.Web.Adapter の更新について紹介している。&lt;/p&gt;
&lt;h3 id="dev-tunnels-in-visual-studio-for-asp.net-core-projects-visual-studio-blog"&gt;Dev tunnels in Visual Studio for ASP.NET Core projects - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/dev-tunnels-in-visual-studio-for-asp-net-core-projects/"&gt;https://devblogs.microsoft.com/visualstudio/dev-tunnels-in-visual-studio-for-asp-net-core-projects/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio の ASP.NET Core プロジェクトで使用できるプレビュー機能である Dev tunnels (開発トンネル) についての紹介記事。&lt;/p&gt;
&lt;p&gt;Dev tunnels は ngrok のような外部からローカル環境へアクセスできるようにポートフォワーディングを行う機能。&lt;/p&gt;
&lt;p&gt;記事では最新の更新内容と、機能の使用方法、永続トンネルと一時トンネルの違い、ツールウィンドウ、環境変数のサポートといったものを紹介している。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="typeloadexception-c-c"&gt;未使用ジェネリック型引数で TypeLoadException が起こる問題 | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2022/12/unused-generic-type-parameter/"&gt;https://ufcpp.net/blog/2022/12/unused-generic-type-parameter/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;構造体のジェネリクスとそれを含む構造体に関する、ランタイムの挙動の問題についての記事。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;struct A&amp;lt;T&amp;gt; {}&lt;/code&gt; を &lt;code&gt;struct B { A&amp;lt;B&amp;gt; Value; }&lt;/code&gt; のように定義した場合、再帰しているわけではないが防衛的に例外をスローするという話。&lt;/p&gt;
&lt;h3 id="net-lambda-native-aot-developersio"&gt;.NET Lambda の Native AOT を実際に試してみた | DevelopersIO&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.classmethod.jp/articles/net-lambda-native-aot/"&gt;https://dev.classmethod.jp/articles/net-lambda-native-aot/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AWS Lambda でサポートされた .NET アプリケーションの Native AOT を実際に試した記事。&lt;/p&gt;
&lt;p&gt;記事では動作させる手順に加え、実際の起動時間などについても計測して触れている。(Native AOT の方が遅くなっている、など)&lt;/p&gt;
&lt;h3 id="net-maui"&gt;.NET MAUI でクロスプラットフォーム対応(予定)のメモアプリ作った&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/tomori_k/articles/966f34daea405a"&gt;https://zenn.dev/tomori_k/articles/966f34daea405a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI でメモアプリケーションを実装してみたという記事。&lt;/p&gt;
&lt;h3 id="nuget-6.4-central-package-management"&gt;NuGet 6.4 の Central Package Management を使って複数プロジェクト間のバージョン管理を改善する - しばやん雑記&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.shibayan.jp/entry/20221211/1670748155"&gt;https://blog.shibayan.jp/entry/20221211/1670748155&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NuGet 6.4 の Central Package Management を使用してプロジェクトのパッケージバージョン管理を一元化することについての記事。&lt;/p&gt;
&lt;p&gt;記事ではコンバーターの存在や Dependabot での注意にも触れている。&lt;/p&gt;
&lt;h3 id="blazor-webassembly.dll-qiita"&gt;Blazor WebAssembly - どこからも参照されていないコードが削除されるようにして .dll のサイズを小さくする - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/jsakamoto/items/91c86a0f34de6e6d77b9"&gt;https://qiita.com/jsakamoto/items/91c86a0f34de6e6d77b9&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor WebAssembly でアセンブリトリミングを行なってファイルサイズを削減する方法についての記事。&lt;/p&gt;
&lt;h3 id="blazor-server-playwright-e2e-playwright-qiita"&gt;[助けを求む] Blazor Server を Playwright で E2E テストするとき、Playwright の初動が早すぎてテストが失敗する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/jsakamoto/items/3d749a9ba4f8523b5291"&gt;https://qiita.com/jsakamoto/items/3d749a9ba4f8523b5291&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor Server を Playwright でテストする際に、プリレンダーされたコンテンツにイベントハンドラーが接続されるよりも前に Playwright が読み込み完了として動いてしまう問題についての記事。&lt;/p&gt;
&lt;h3 id="whats-new-in-visual-studio-productivity-visual-studio-blog"&gt;What’s new in Visual Studio productivity - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/whats-new-in-visual-studio-productivity/"&gt;https://devblogs.microsoft.com/visualstudio/whats-new-in-visual-studio-productivity/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio の生産性向上のための新しい機能を紹介している記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;出力ウィンドウのタイムスタンプ&lt;/li&gt;
&lt;li&gt;選択範囲の一致&lt;/li&gt;
&lt;li&gt;マウスホイールで水平方向にスクロールする&lt;/li&gt;
&lt;li&gt;音を手がかりにコードを追う&lt;/li&gt;
&lt;li&gt;行番号の強調表示&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="c-c"&gt;拡張メソッドは暗黙型変換を見ない | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2022/12/extension-resolution/"&gt;https://ufcpp.net/blog/2022/12/extension-resolution/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;暗黙型変換するものに対する拡張メソッドは利用できないということについて解説している記事。&lt;/p&gt;
&lt;h3 id="new-mvc-features-in.net-7"&gt;5 new MVC features in .NET 7&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/5-new-mvc-features-in-dotnet-7/"&gt;https://andrewlock.net/5-new-mvc-features-in-dotnet-7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 の ASP.NET Core MVC の新機能7つを紹介している記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;プリミティブバインディングの &lt;code&gt;IParseable&lt;/code&gt;, &lt;code&gt;TryParse&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;MVC コントローラは自動的に &lt;code&gt;[FromServices]&lt;/code&gt; であると推測する&lt;/li&gt;
&lt;li&gt;必須かどうかの推測に nullable アノテーションを使用する&lt;/li&gt;
&lt;li&gt;MVC での &lt;code&gt;IResult&lt;/code&gt; サポート&lt;/li&gt;
&lt;li&gt;カスタマイズされたメタデータプロバイダーはレスポンスでより良いエラー名提供する&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="use-keycloak-as-identity-provider-from-blazor-webassembly-wasm-applications"&gt;Use Keycloak as Identity Provider from Blazor WebAssembly (WASM) applications&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/nikiforovall/use-keycloak-as-identity-provider-from-blazor-webassembly-wasm-applications-3an6"&gt;https://dev.to/nikiforovall/use-keycloak-as-identity-provider-from-blazor-webassembly-wasm-applications-3an6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor WebAssembly から Keycloak を IdP として使用する方法についての記事。&lt;/p&gt;
&lt;h3 id="vs2022-devtunnel-azure-qiita"&gt;VS2022 の新機能 DevTunnel (開発トンネル)でローカルデバッグ環境に Azure から簡単アクセス - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/seuharuka/items/6f77983a179042b48e59"&gt;https://qiita.com/seuharuka/items/6f77983a179042b48e59&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 のプレビュー機能である Dev tunnels の機能の紹介と使用方法の記事。&lt;/p&gt;
&lt;h3 id="c11.net-6.0.net-framework-4.8-qiita"&gt;C#11の.NET 6.0と.NET Framework 4.8に対する互換性 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/skitoy4321/items/77aff330a4ce63dd977c"&gt;https://qiita.com/skitoy4321/items/77aff330a4ce63dd977c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 でサポートされる C# 11 の機能が .NET 6 や .NET Framework 4.8 でどこまで使用できるか(サポートされるわけではない)ということをまとめている記事。&lt;/p&gt;
&lt;h3 id="maui-github-actions"&gt;MAUI アプリを GitHub Actions 上でビルドする&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/proudust/articles/2022-12-06-build-maui-on-gh-actions"&gt;https://zenn.dev/proudust/articles/2022-12-06-build-maui-on-gh-actions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI アプリケーションを GitHub Actions でビルドする対応状況と手順についての記事。&lt;/p&gt;
&lt;h3 id="blazor"&gt;動的に入力項目を増やしたり出来るフォームを Blazor で作ってみよう&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/okazuki/articles/dynamic-items-form-in-blazor"&gt;https://zenn.dev/okazuki/articles/dynamic-items-form-in-blazor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor でフォーム中の項目を動的に増減し、バリデーションも行うといったことを実現する方法についての記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/okazuki/articles/dynamic-master-details-form-on-blazor2"&gt;動的に詳細項目が増えるマスター詳細フォームを Blazor で作ってみよう&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="background-audio-streaming-with-communitytoolkit.maui.mediaelement-preview-for-android-and-ios"&gt;Background audio streaming with CommunityToolkit.Maui.MediaElement (Preview) for Android and iOS&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/mephisztoe/background-audio-streaming-with-communitytoolkitmauimediaelement-preview-for-android-and-ios-340p"&gt;https://dev.to/mephisztoe/background-audio-streaming-with-communitytoolkitmauimediaelement-preview-for-android-and-ios-340p&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CommunityToolkit.Maui.MediaElement (Preview) を使用して Android と iOS でバックグラウンドで音声をストリーミング再生する方法についての記事。&lt;/p&gt;
&lt;h3 id="msbuild-dotnet-test-qiita"&gt;【調査】MSBuild でビルドした直後に dotnet test を実行するとリビルドされる - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/lx-sasabo/items/557ff31eee36429d229e"&gt;https://qiita.com/lx-sasabo/items/557ff31eee36429d229e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MSBuild でビルドした後に dotnet test を実行すると再度ビルドが実行されることがあるケースについて調査したという記事。&lt;/p&gt;
&lt;p&gt;記事では Microsoft.NET.Build.Extensions の使用の有無によって結果が変わっていたとのこと。&lt;/p&gt;
&lt;h3 id="schedule-jobs-with-quartz.net-code-maze"&gt;Schedule Jobs with Quartz.NET - Code Maze&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://code-maze.com/schedule-jobs-with-quartz-net/"&gt;https://code-maze.com/schedule-jobs-with-quartz-net/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Quartz.NET でジョブをスケジュールして、バックグラウンドで処理をする方法について紹介している記事。&lt;/p&gt;
&lt;h3 id="introducing-wolverine-for-effective-server-side.net-development"&gt;Introducing Wolverine for Effective Server Side .NET Development&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://jeremydmiller.com/2022/12/12/introducing-wolverine-for-effective-server-side-net-development/"&gt;https://jeremydmiller.com/2022/12/12/introducing-wolverine-for-effective-server-side-net-development/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Wolverine という Mediator/Message Bus を使用してサーバー開発を行うという紹介。&lt;/p&gt;
&lt;h3 id="blazor-webassemblyasp.net-corefly.ioef-corepostgresql-qiita"&gt;Blazor WebAssembly(ASP.NET Coreホスト)を無料利用可能なFly.ioにデプロイする(EF Core+PostgreSQL使用) - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/nobu17/items/824c39493f7b12e94f7b"&gt;https://qiita.com/nobu17/items/824c39493f7b12e94f7b&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor WebAssembly を fly.io にデプロイしてサーバーサイドは EF Core で PostgreSQL に接続するといったことを行う記事。&lt;/p&gt;
&lt;h3 id="figma.net-maui-ui-qiita"&gt;Figmaで作る.NET MAUI UIコンポーネント - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/MAUIHighSchool/items/232e1bb3d65080f2c548"&gt;https://qiita.com/MAUIHighSchool/items/232e1bb3d65080f2c548&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Figma のデザインから .NET MAUI のコードを生成して UI コンポーネントを作成するサンプル記事。&lt;/p&gt;
&lt;h3 id="reduce-the-2fas-token-provider-length-in-asp.net-core-identity-to-4-digits-instead-of-6-digits-in.net-7"&gt;Reduce The 2FA'S Token Provider Length in ASP.NET Core Identity To 4 Digits Instead Of 6 Digits in .NET 7&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/mohammedahmed/reduce-the-2fas-token-provider-length-in-aspnet-core-identity-to-4-digits-instead-of-6-digits-in-net-7-6fh"&gt;https://dev.to/mohammedahmed/reduce-the-2fas-token-provider-length-in-aspnet-core-identity-to-4-digits-instead-of-6-digits-in-net-7-6fh&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core Identity の 2FA のトークンプロバイダーをカスタマイズすることで6桁から４桁に変更を試みる方法についての記事。&lt;/p&gt;
&lt;h3 id="communitytoolkit.mvvm-v8-qiita"&gt;CommunityToolkit.Mvvm V8 入門 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/kk-river/items/d974b02f6c4010433a9e"&gt;https://qiita.com/kk-river/items/d974b02f6c4010433a9e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CommunityToolkit.Mvvm 8.0.0　の紹介記事。&lt;/p&gt;
&lt;p&gt;プロパティやコマンドのコード生成、メッセンジャーなどを紹介している。&lt;/p&gt;
&lt;h3 id="new-argumentexception-and-argumentoutofrangeexception-helpers-in.net-8"&gt;New ArgumentException and ArgumentOutOfRangeException helpers in .NET 8&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://steven-giesel.com/blogPost/f4bc6fcc-5691-4f72-b9bb-75aeeb59230a"&gt;https://steven-giesel.com/blogPost/f4bc6fcc-5691-4f72-b9bb-75aeeb59230a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 8 で &lt;code&gt;ArgumentException&lt;/code&gt; と &lt;code&gt;ArgumentOutOfRangeException&lt;/code&gt; に追加を検討しているヘルパーメソッドについて紹介している記事。&lt;/p&gt;
&lt;h3 id="is-the-regression-in-gc-or-something-else"&gt;Is the regression in GC or something else?&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://maoni0.medium.com/is-the-regression-in-gc-or-something-else-38f10018dd21"&gt;https://maoni0.medium.com/is-the-regression-in-gc-or-something-else-38f10018dd21&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GC のリグレッションについての記事。&lt;/p&gt;
&lt;p&gt;ランタイムを変更した時など GC のリグレッションのように見えるがそうではないものもあること、GC を変更することでリグレッションかどうかを確認できることなどを説明している。&lt;/p&gt;
&lt;h3 id="text-classification-in-c-with-ml.net-2.0"&gt;Text Classification in C# with ML.NET 2.0&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/accessibleai/text-classification-in-c-with-ml-net-2-0-bc979dfd8ca9"&gt;https://medium.com/accessibleai/text-classification-in-c-with-ml-net-2-0-bc979dfd8ca9&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ML.NET 2.0 を使用してテキスト分類を行う方法についての記事。&lt;/p&gt;
&lt;h3 id="net-maui-stripe-c-qiita"&gt;.NET MAUI × Stripe C#クロスプラットフォームで楽々クレジット決済 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/MAUIHighSchool/items/393ba93e2eade7f8c9b9"&gt;https://qiita.com/MAUIHighSchool/items/393ba93e2eade7f8c9b9&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI で Stripe SDK を組み込んでクレジット決済をアプリケーション内に実装する方法についての記事。&lt;/p&gt;
&lt;h3 id="c-11-qiita"&gt;C# 11（コーディングで使える）新しい機能 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/sh1ch/items/0b6add41584b5ba7f698"&gt;https://qiita.com/sh1ch/items/0b6add41584b5ba7f698&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 での新しい機能をコードとともに紹介している記事。&lt;/p&gt;
&lt;h3 id="managing-multiple-versions-of-your-api-with.net-and-swagger"&gt;Managing Multiple Versions of Your API with .NET and Swagger&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;saeedeldah/managing-multiple-versions-of-your-api-with-net-and-swagger-47b4143e8bf5"&gt;https://medium.com/&amp;#64;saeedeldah/managing-multiple-versions-of-your-api-with-net-and-swagger-47b4143e8bf5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core Web API のバージョニングと API Explorer を使用した Swagger を組み合わせて使用する方法についての記事。&lt;/p&gt;
&lt;h3 id="cphpgo-qiita"&gt;C#で書いたライブラリをPHPやGoから呼び出す - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/Gaku_Ishii/items/ad4abb1e0073519877d7"&gt;https://qiita.com/Gaku_Ishii/items/ad4abb1e0073519877d7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET のコードを Native AOT でネイティブライブラリーとしてビルドし、PHP や Go から呼び出す方法を紹介している記事。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="ugainarabemi-quick-side-by-side-video-comparison-tool"&gt;ugai/narabemi: Quick side-by-side video comparison tool&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/ugai/narabemi"&gt;https://github.com/ugai/narabemi&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;映像を並べてサイドバイサイドで比較できるツール。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/ugai/items/26c7ee7b58fb26d70124"&gt;WPFで映像比較ツールを作った - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="hadashiavyaml-the-extra-fast-low-memory-footprint-yaml-library-for-c-focued-on.net-and-unity"&gt;hadashiA/VYaml: The extra fast, low memory footprint YAML library for C#, focued on .NET and Unity.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/hadashiA/VYaml"&gt;https://github.com/hadashiA/VYaml&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Standard 2.1 移行をターゲットとしたハイパフォーマンスで省メモリーな YAML ライブラリー。&lt;/p&gt;
&lt;h3 id="davidfowlsmartloadbalancer-sticky-sessions-without-sticky-sessions"&gt;davidfowl/SmartLoadBalancer: Sticky sessions without sticky sessions&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/davidfowl/SmartLoadBalancer/"&gt;https://github.com/davidfowl/SmartLoadBalancer/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SignalR のようなもののためにスティッキーセッションを持たず、スティッキーセッションを実現する実験的実装。&lt;/p&gt;
&lt;p&gt;YARP で当たりの SignalR サーバーを引くまでリクエストの転送を試行繰り返すという仕組み。&lt;/p&gt;
&lt;!-- https://twitter.com/davidfowl/status/1601616025405239296?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;OK here&amp;#39;s my latest experiment, smart load balancer (or maybe it&amp;#39;s dumb...) &lt;a href="https://t.co/LTJl4wc9mY"&gt;https://t.co/LTJl4wc9mY&lt;/a&gt;. Sticky sessions without sticky sessions for SignalR. &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/aspnetcore?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#aspnetcore&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/signalr?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#signalr&lt;/a&gt;&lt;/p&gt;&amp;mdash; hachyderm.io/&amp;#64;davidfowl (&amp;#64;davidfowl) &lt;a href="https://twitter.com/davidfowl/status/1601616025405239296?ref_src=twsrc%5Etfw"&gt;December 10, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;p&gt;Newtonsoft.Json 13.0.1 には大多数は影響を受けない小さなリグレッションがあり、それが使い物にならないものとして勘違いされ(パッチはされているけど使い物にならないから 13.0.2 にみたいな)、脆弱なバージョンとしてマークされてしまったという話。&lt;/p&gt;
&lt;!-- https://twitter.com/jamesnk/status/1600844999783903233?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Someone has retro-actively flagged Newtonsoft.Json 13.0.1 as vulnerable 😡 Their reason is that because 13.0.1 has a small regression in it, it&amp;#39;s literally unsable.&lt;br&gt;&lt;br&gt;Now, thousands of projects are to get notifications that they are vulnerable, dispite successfully using 13.0.1.&lt;/p&gt;&amp;mdash; James Newton-King ♔ (&amp;#64;JamesNK) &lt;a href="https://twitter.com/JamesNK/status/1600844999783903233?ref_src=twsrc%5Etfw"&gt;December 8, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="rms-v3.0-planning-issue-258-microsoftmicrosoft.io.recyclablememorystream"&gt;RMS v3.0 Planning · Issue #258 · microsoft/Microsoft.IO.RecyclableMemoryStream&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/microsoft/Microsoft.IO.RecyclableMemoryStream/issues/258"&gt;https://github.com/microsoft/Microsoft.IO.RecyclableMemoryStream/issues/258&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;RecyclableMemoryStream の v3.0 のプランニング Issue。&lt;/p&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2022/12/08/updates</id>
		<title>2022-12-08: C# Advent Calendar, Rider and ReShrper 2022.3 Released</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2022/12/08/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2022-12-08T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="c-advent-calendar-2022-qiita"&gt;C#のカレンダー | Advent Calendar 2022 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/advent-calendar/2022/csharplang"&gt;https://qiita.com/advent-calendar/2022/csharplang&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2022年の C# Advent Calendar。&lt;/p&gt;
&lt;h3 id="c-advent-2022"&gt;C# Advent 2022&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://csadvent.christmas/"&gt;https://csadvent.christmas/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2022年の英語圏での C# Advent Calendar。&lt;/p&gt;
&lt;h3 id="rider-2022.3-support-for.net-7-sdk-the-latest-from-c11-major-performance-improvements-and-more-the.net-tools-blog"&gt;Rider 2022.3: Support for .NET 7 SDK, the Latest From C#11, Major Performance Improvements, and More! | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/12/07/rider-2022-3/"&gt;https://blog.jetbrains.com/dotnet/2022/12/07/rider-2022-3/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider 2022.3 がリリースされた。&lt;/p&gt;
&lt;p&gt;記事ではこのリリースに含まれる次のトピックについて紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;パフォーマンスの改善&lt;/li&gt;
&lt;li&gt;.NET 7 SDK サポート&lt;/li&gt;
&lt;li&gt;WSL2 サポート&lt;/li&gt;
&lt;li&gt;UX/UI 改善
&lt;ul&gt;
&lt;li&gt;ドッキングツールウィンドウ&lt;/li&gt;
&lt;li&gt;新しいメインツールバー&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最新の C# 機能&lt;/li&gt;
&lt;li&gt;Web 開発のアップデート&lt;/li&gt;
&lt;li&gt;ゲーム開発のアップデート&lt;/li&gt;
&lt;li&gt;NuGet サポート
&lt;ul&gt;
&lt;li&gt;Central Package Management や脆弱なバージョンの検出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ARM64 サポートの早期プレビュー
&lt;ul&gt;
&lt;li&gt;ARM プラットフォーム上の Windows と Linux での動作のサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;その他ハイライト
&lt;ul&gt;
&lt;li&gt;組み込み dotMemory の macOS と Linux サポートなど&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="resharper-2022.3-released-with-more-c-11-features-nuget-vulnerabilities-detection-and-support-for-visual-studio-arm64.the.net-tools-blog"&gt;ReSharper 2022.3 Released With More C# 11 Features, NuGet Vulnerabilities Detection, and Support for Visual Studio ARM64. | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/12/07/resharper-2022-3/"&gt;https://blog.jetbrains.com/dotnet/2022/12/07/resharper-2022-3/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper 2022.3 がリリースされた。&lt;/p&gt;
&lt;p&gt;記事ではこのリリースに含まれる次のトピックについて紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C# サポート
&lt;ul&gt;
&lt;li&gt;C# 11 の機能&lt;/li&gt;
&lt;li&gt;言語インジェクション&lt;/li&gt;
&lt;li&gt;グローバルインポート ガターマーク&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;脆弱な依存関係検出&lt;/li&gt;
&lt;li&gt;ARM64 上の Visual Studio のサポート&lt;/li&gt;
&lt;li&gt;Dynamic Program Analysis からのデータベースインスペクション&lt;/li&gt;
&lt;li&gt;C++ サポート&lt;/li&gt;
&lt;li&gt;その他
&lt;ul&gt;
&lt;li&gt;デコンパイラーの更新や型とプロジェクトの依存ダイアグラムの GraphML フォーマットでのインポート/エクスポート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="dotcover-dotmemory-dotpeek-and-dottrace-2022.3-released-the.net-tools-blog"&gt;dotCover, dotMemory, dotPeek, and dotTrace 2022.3 Released! | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/12/07/dotcover-dotmemory-dotpeek-dottrace-2022-3/"&gt;https://blog.jetbrains.com/dotnet/2022/12/07/dotcover-dotmemory-dotpeek-dottrace-2022-3/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;dotCover, dotMemory, dotPeek, dotTrace の 2022.3 がリリースされた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dotCover: ARM64 の Windows のサポートや ARM32 上の Linux でのランナーのサポートなどが追加された&lt;/li&gt;
&lt;li&gt;dotMemory: Linux と macOS の Rider 上で利用可能となり、ARM64 の Windows もサポートされた&lt;/li&gt;
&lt;li&gt;dotPeek: static abstract やジェネリック属性のような新しい機能をサポートした&lt;/li&gt;
&lt;li&gt;dotTrace: ARM64 の Windows のサポートや ARM32 上の Linux でのランナーのサポートが追加され、スナップ解析のいくつかの改善と Performance View の非推奨化&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="upgrade-of.net-agent-for-azure-pipelines-azure-devops-blog"&gt;Upgrade of .NET agent for Azure Pipelines - Azure DevOps Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/devops/upgrade-of-net-agent-for-azure-pipelines/"&gt;https://devblogs.microsoft.com/devops/upgrade-of-net-agent-for-azure-pipelines/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure Pipelines のエージェントが .NET Core 3.1 から .NET 6 へと更新するアナウンス。&lt;/p&gt;
&lt;p&gt;これは新しい OS とアーキテクチャーのサポートを行うためと、.NET Core 3.1 のサポートが12月13日に終了するためとしている。&lt;/p&gt;
&lt;p&gt;新しいエージェントは3つのフェーズで展開される。フェーズ1はプレビューとしてプレスリリース版のダウンロードしてテストが可能、フェーズ2では Microsoft がホストするエージェントプールの更新、フェーズ3でセルフホストしているエージェントの提供。&lt;/p&gt;
&lt;p&gt;記事ではセルフホストプールでの更新に関する注意や FAQ についても書かれている。&lt;/p&gt;
&lt;h3 id="release-ilspy-8.0-preview-3-icsharpcodeilspy"&gt;Release ILSpy 8.0 Preview 3 · icsharpcode/ILSpy&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/icsharpcode/ILSpy/releases/tag/v8.0-preview3"&gt;https://github.com/icsharpcode/ILSpy/releases/tag/v8.0-preview3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ILSpy 8.0 Preview 3 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは C# 11 の必須メンバーの対応や Roslyn のパターン検出の更新、その他不具合や改善が含まれている。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="c"&gt;(C#) 文字列補間されていない文字列補間を取得する - ネコのために鐘は鳴る&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ikorin2.hatenablog.jp/entry/2022/11/29/201801"&gt;https://ikorin2.hatenablog.jp/entry/2022/11/29/201801&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;InterpolatedStringHandler&lt;/code&gt; を使用したハンドラーのコンストラクターの第一引数に対する &lt;code&gt;CallerArgumentExpression&lt;/code&gt; で文字列を受けると、フォーマット前の文字列がとれるというハックを紹介している記事。&lt;/p&gt;
&lt;p&gt;ただしこの挙動は本来期待されている挙動と異なり、修正される可能性がある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/roslyn/issues/59661"&gt;Behavior changed for [CallerArgumentExpression] in constructor for [InterpolatedStringHandler] for the receiver parameter · Issue #59661 · dotnet/roslyn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="improved-startup-performance-in-rider-2022.3-the.net-tools-blog"&gt;Improved Startup Performance in Rider 2022.3 | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/12/01/improved-startup-performance-in-rider-2022-3/"&gt;https://blog.jetbrains.com/dotnet/2022/12/01/improved-startup-performance-in-rider-2022-3/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider 2022.3 (現在 EAP) の起動パフォーマンスの向上についての記事。&lt;/p&gt;
&lt;p&gt;Rider 2022.3 では IDE のコールドスタートやプロジェクト読み込み時間、ファイルとアセンブリのスキャン、ガベージコレクションとメモリー使用量といった部分での改善について紹介している。&lt;/p&gt;
&lt;h3 id="day-1-how-to-write-tests-for-httpclient-using-moq"&gt;Day 1: How to write tests for HttpClient using Moq&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/canro91/how-to-write-tests-for-httpclient-using-moq-2i9e"&gt;https://dev.to/canro91/how-to-write-tests-for-httpclient-using-moq-2i9e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;HttpClient の呼び出しに関するテストを Moq で書くという記事。&lt;/p&gt;
&lt;h3 id="conveying-context-with-asynclocal"&gt;Conveying Context with AsyncLocal&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;norm.bryar/conveying-context-with-asynclocal-91fa474a5b42"&gt;https://medium.com/&amp;#64;norm.bryar/conveying-context-with-asynclocal-91fa474a5b42&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;アンビエントコンテキスト (複数の関数やコンポーネント、タスクをまたいでデータを共有する) を&lt;code&gt;AsyncLocal&amp;lt;T&amp;gt;&lt;/code&gt; で実装するという記事。&lt;/p&gt;
&lt;h3 id="visual-basic-2022-qiita"&gt;Visual Basic 2022年の振り返り - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/yaju/items/882e1de76a763e098fce"&gt;https://qiita.com/yaju/items/882e1de76a763e098fce&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2022年の Visual Basic に関する出来事と記事を紹介している振り返り記事。&lt;/p&gt;
&lt;h3 id="c-positional-records"&gt;C# positional recordsのパラメータ個数上限を探る&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/shimat/articles/5b81d6627491ab"&gt;https://zenn.dev/shimat/articles/5b81d6627491ab&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 9 で導入されたレコード型の positional records の positional parameters の上限を調査した記事。&lt;/p&gt;
&lt;p&gt;記事では JSON シリアライザーでの上限についても触れている。&lt;/p&gt;
&lt;h3 id="net-7linq-qiita"&gt;.NET 7でLINQに追加されたメソッド - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/RyotaMurohoshi/items/71a84fe7a5cf8df57054"&gt;https://qiita.com/RyotaMurohoshi/items/71a84fe7a5cf8df57054&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 の LINQ に追加された &lt;code&gt;Order&lt;/code&gt; と &lt;code&gt;OrderDescending&lt;/code&gt; について紹介している記事。&lt;/p&gt;
&lt;h3 id="catastrophic-backtracking-how-can-a-regular-expression-cause-a-redos-vulnerability"&gt;Catastrophic backtracking: how can a regular expression cause a ReDoS vulnerability?&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/unicorn_developer/catastrophic-backtracking-how-can-a-regular-expression-cause-a-redos-vulnerability-aia"&gt;https://dev.to/unicorn_developer/catastrophic-backtracking-how-can-a-regular-expression-cause-a-redos-vulnerability-aia&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;正規表現のバックトラックによる ReDoS 脆弱性についての記事。&lt;/p&gt;
&lt;p&gt;各種正規表現パターンとその実行時間、壊滅的なバックトラッキングを回避する方法の紹介などが書かれている。&lt;/p&gt;
&lt;h3 id="c-11-qiita"&gt;C# 11 の新機能をいくつか試してみました - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/haruka_kotani/items/6f470579b86b005c6cb9"&gt;https://qiita.com/haruka_kotani/items/6f470579b86b005c6cb9&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 の新機能である生文字列リテラル、文字列補完の改行、UTF-8 文字列リテラル、必須メンバー、ファイルローカル型を簡単に紹介している記事。&lt;/p&gt;
&lt;h3 id="rider-on-windows-wsl"&gt;Rider on Windows 開発環境構築 (コンテナだけWSL)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/dynamitecoolguy/articles/17612f6624da4d"&gt;https://zenn.dev/dynamitecoolguy/articles/17612f6624da4d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows 上の Rider で WSL のコンテナーを使用した ASP.NET Core 開発環境の構築手順についての記事。&lt;/p&gt;
&lt;h3 id="net-open-source-is-heavily-under-funded-says-aws"&gt;.NET open source is 'heavily under-funded' says AWS&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.theregister.com/AMP/2022/12/01/net_open_source_heavily_underfunded/"&gt;https://www.theregister.com/AMP/2022/12/01/net_open_source_heavily_underfunded/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AWS がオープンソースな .NET への投資を行っていることについての記事。&lt;/p&gt;
&lt;h3 id="visual-studio-2022-intellicode"&gt;Visual Studio 2022 の IntelliCode の入力候補の適用キーを変えたい | ブチザッキ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.azure.moe/2022/12/03/visual-studio-2022-%E3%81%AE-intellicode-%E3%81%AE%E5%85%A5%E5%8A%9B%E5%80%99%E8%A3%9C%E3%81%AE%E9%81%A9%E7%94%A8%E3%82%AD%E3%83%BC%E3%82%92%E5%A4%89%E3%81%88%E3%81%9F%E3%81%84/"&gt;https://blog.azure.moe/2022/12/03/visual-studio-2022-%e3%81%ae-intellicode-%e3%81%ae%e5%85%a5%e5%8a%9b%e5%80%99%e8%a3%9c%e3%81%ae%e9%81%a9%e7%94%a8%e3%82%ad%e3%83%bc%e3%82%92%e5%a4%89%e3%81%88%e3%81%9f%e3%81%84/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;IntelliCode (いわゆる AI コード補完) の確定を Tab キーから変更する方法について紹介している記事。&lt;/p&gt;
&lt;p&gt;Visual Studio の設定で → (右矢印キー) での確定に変更できるとのこと (任意のキーには変更できない)。&lt;/p&gt;
&lt;h3 id="raw-string-c-c"&gt;raw string の空白文字 | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2022/12/rawstringwhitespace/"&gt;https://ufcpp.net/blog/2022/12/rawstringwhitespace/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 の raw string literal の空白文字の取り扱いについての記事。&lt;/p&gt;
&lt;p&gt;様々な空白文字やインデントでの取り扱いなどについて解説している。&lt;/p&gt;
&lt;h3 id="net-annotated-monthly-december-2022-the.net-tools-blog"&gt;.NET Annotated Monthly | December 2022 | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/12/05/net-annotated-monthly-december-2022/"&gt;https://blog.jetbrains.com/dotnet/2022/12/05/net-annotated-monthly-december-2022/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JetBrains による .NET 関連情報のまとめ2022年12月号。&lt;/p&gt;
&lt;h3 id="stackalloc-c-c"&gt;stackalloc の自然な型 | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2022/12/stackalloc-natural-type/"&gt;https://ufcpp.net/blog/2022/12/stackalloc-natural-type/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;変数の型を決定する際の推論として、stackalloc で決定される自然な型 (natural type) が記述方法によって変わることについての記事。&lt;/p&gt;
&lt;p&gt;例えば &lt;code&gt;var a = stackalloc byte[10];&lt;/code&gt; の型はポインター (&lt;code&gt;byte*&lt;/code&gt;) になるが &lt;code&gt;var a = (stackalloc byte[10]);&lt;/code&gt; は &lt;code&gt;Span&amp;lt;byte&amp;gt;&lt;/code&gt; となる、など。&lt;/p&gt;
&lt;h3 id="whats-new-in-the.net-maui-community-toolkit.net-blog"&gt;What's new in the .NET MAUI Community Toolkit - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/whats-new-in-the-dotnet-maui-community-toolkit/"&gt;https://devblogs.microsoft.com/dotnet/whats-new-in-the-dotnet-maui-community-toolkit/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI Community Toolkit の新しい機能について紹介している記事。&lt;/p&gt;
&lt;p&gt;記事では新しく追加されたコンポーネントやプラットフォームサポートについて、リリースされているバージョン(1.4.0, 2.0.0, 3.0.0)の違いなどを説明している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Expander View&lt;/li&gt;
&lt;li&gt;DockLayout&lt;/li&gt;
&lt;li&gt;StateContainer&lt;/li&gt;
&lt;li&gt;Tizen サポート&lt;/li&gt;
&lt;li&gt;.NET 7 サポート&lt;/li&gt;
&lt;li&gt;MAUI.Markup Toolkit&lt;/li&gt;
&lt;li&gt;リリースバージョン&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="building-a-new-javascript-linting-experience-in-visual-studio-visual-studio-blog"&gt;Building a new JavaScript linting experience in Visual Studio - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/building-a-new-javascript-linting-experience-in-visual-studio/"&gt;https://devblogs.microsoft.com/visualstudio/building-a-new-javascript-linting-experience-in-visual-studio/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.4 で新しくなった ESLint による lint サポートの背景を紹介している記事。&lt;/p&gt;
&lt;p&gt;記事では vscode-eslint に触発された LSP 拡張機能について、サービスの有効化の手順といったことが書かれている。&lt;/p&gt;
&lt;h3 id="custom-controls-for-winforms-out-of-process-designer.net-blog"&gt;Custom Controls for WinForm's Out-Of-Process Designer - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/custom-controls-for-winforms-out-of-process-designer/"&gt;https://devblogs.microsoft.com/dotnet/custom-controls-for-winforms-out-of-process-designer/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio で利用する .NET Core 以降の WinForms 向けの外部プロセスで動作するデザイナーでカスタムコントロールをサポートする方法について解説している記事。サンプルプロジェクトを通して移行方法を紹介している。&lt;/p&gt;
&lt;h3 id="logging-to-amazon-cloudwatch-with-serilog-in.net-getting-started-with-cloudwatch"&gt;Logging to Amazon Cloudwatch with Serilog in .NET - Getting Started with Cloudwatch&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://codewithmukesh.com/blog/amazon-cloudwatch-logging-serilog-dotnet/"&gt;https://codewithmukesh.com/blog/amazon-cloudwatch-logging-serilog-dotnet/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Serilog を使用して ASP.NET Core (&lt;code&gt;M.E.L.ILogger&lt;/code&gt;) から Amazon Cloudwatch へログを記録する方法について解説している記事。&lt;/p&gt;
&lt;h3 id="introducing-c11-newlines-in-string-interpolation-expressions"&gt;Introducing C#11: Newlines in string interpolation expressions&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://anthonygiretti.com/2022/12/04/introducing-c11-newlines-in-string-interpolation-expressions/"&gt;https://anthonygiretti.com/2022/12/04/introducing-c11-newlines-in-string-interpolation-expressions/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 では文字列補間のブレース中で改行が可能となったということについての記事。&lt;/p&gt;
&lt;h3 id="github-actions.net"&gt;GitHub Actions で .NETプロジェクトのコードカバレッジを計測する&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/shimat/articles/03ad92427cbed6"&gt;https://zenn.dev/shimat/articles/03ad92427cbed6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GitHub Actions で Pull request からビルドする際にコードカバレッジを計測し、レポートをコメントなどに残すといった方法を紹介している記事。&lt;/p&gt;
&lt;h3 id="c.net-core-3.1.net-6timezoneinfo.localutc-qiita"&gt;C#(.NET Core 3.1, .NET 6)のランタイム上のシステムタイムゾーンを置き換えたい（TimeZoneInfo.LocalがUTCを返すようにしたい） - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/fukasawah/items/c42b586745be56fed674"&gt;https://qiita.com/fukasawah/items/c42b586745be56fed674&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;システムのタイムゾーンを無視して &lt;code&gt;TimeZoneInfo.Local&lt;/code&gt; が UTC となる値を返すにはどうすればよいかという記事。&lt;/p&gt;
&lt;p&gt;記事ではリフレクションで強引に置き換えることで対処する方法や、試みた理由などが書かれている。&lt;/p&gt;
&lt;h3 id="blazor-webassembly.net-8-qiita"&gt;Blazor WebAssemblyでマルチスレッドを使っていくための準備 （.NET 8を待っています） - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/kaorumori/items/d6d68987b8468f8f6b32"&gt;https://qiita.com/kaorumori/items/d6d68987b8468f8f6b32&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 8 の Blazor WebAssembly でサポート予定のマルチスレッド機能を .NET 7 で実験的機能として WebAssembly Browser App (Blazor ではない) で動かしてみる手順を紹介している記事。&lt;/p&gt;
&lt;p&gt;記事では実際に負荷をかけた際に複数のコアが使用されていることを確認している。&lt;/p&gt;
&lt;h3 id="macwindowsios.net-maui-qiita"&gt;Macを使わずWindowsだけでiOSアプリをデバッグする方法(.NET MAUI) - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/MAUIHighSchool/items/1ffcfa508342fc250757"&gt;https://qiita.com/MAUIHighSchool/items/1ffcfa508342fc250757&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows の Visual Studio から直接 iOS アプリケーションをデプロイしてデバッグする方法についての記事。&lt;/p&gt;
&lt;h3 id="new-features-in-c-11-net-7-with-interactive-examples"&gt;New features in C# 11 (NET 7) with interactive examples&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/entech-solutions/new-features-in-c-11-net-7-with-interactive-examples-c8e4e5ea1e5a"&gt;https://medium.com/entech-solutions/new-features-in-c-11-net-7-with-interactive-examples-c8e4e5ea1e5a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 の機能を使った例とそのコードの .NET Fiddle で実行できるようにして紹介している記事。&lt;/p&gt;
&lt;h3 id="processing-data-in-parallel-using-channels"&gt;Processing data in parallel using Channels&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://maciejz.dev/processing-data-in-parallel-channels/"&gt;https://maciejz.dev/processing-data-in-parallel-channels/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;System.Threading.Channels を使用して並列でデータを処理するコードを実装する方法について紹介している記事。&lt;/p&gt;
&lt;h3 id="detect-and-remove-dead-code-with-roslyn"&gt;Detect and Remove Dead Code with Roslyn&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://jason-ge.medium.com/detect-and-remove-dead-code-with-roslyn-26e741b20d3c"&gt;https://jason-ge.medium.com/detect-and-remove-dead-code-with-roslyn-26e741b20d3c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Roslyn を使用してデッドコード(使用されていない型)の検出と削除を行う方法についての記事。&lt;/p&gt;
&lt;h3 id="how-to-use-swiftui-components-in-maui"&gt;How to use SwiftUI components in MAUI&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;tema.denisoff/how-to-use-swiftui-components-in-maui-f43c54d2173c"&gt;https://medium.com/&amp;#64;tema.denisoff/how-to-use-swiftui-components-in-maui-f43c54d2173c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI で Swift UI のコンポーネントを使用する方法についての記事。&lt;/p&gt;
&lt;p&gt;Swift UI に対する UIKit ラッパーの作成とその利用方法など。&lt;/p&gt;
&lt;h3 id="functional-maui-control-based-on-swiftui-view"&gt;Functional MAUI control based on SwiftUI view&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;tema.denisoff/functional-maui-control-based-on-swiftui-view-e23135d1f2bc"&gt;https://medium.com/&amp;#64;tema.denisoff/functional-maui-control-based-on-swiftui-view-e23135d1f2bc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI から SwiftUI のコンポーネントをプロパティーのバインディングなどを含めて機能する形で実装する方法についての記事。&lt;/p&gt;
&lt;h3 id="cnull-qiita"&gt;C#におけるnull合体演算子 ?? の優先順位と結合規則 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/denkiuo604/items/87345ce8031640b37e7a"&gt;https://qiita.com/denkiuo604/items/87345ce8031640b37e7a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# の null 合体演算子 (&lt;code&gt;??&lt;/code&gt;) の優先順位と結合規則について解説している記事。&lt;/p&gt;
&lt;h3 id="net-7c-simd"&gt;.NET 7こそがC# SIMDプログラミングを始めるのに最適である理由&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/pcysl5edgo/articles/d3e787599c5c8b"&gt;https://zenn.dev/pcysl5edgo/articles/d3e787599c5c8b&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 で C# で SIMD を活用したコードを書く際に .NET 6 の時よりも fixed が不要であったり x64 と ARM64 での分岐が不要となり、より書きやすくなっていることを紹介している記事。&lt;/p&gt;
&lt;h3 id="net-annotations-lambda-framework.net-6-api-developersio"&gt;.NET Annotations Lambda Framework を使って .NET 6 のサーバーレス API を作成する | DevelopersIO&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.classmethod.jp/articles/net-annotations-lambda-framework/"&gt;https://dev.classmethod.jp/articles/net-annotations-lambda-framework/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AWS のプレビューリリースしている .NET Annotations Lambda Framework を使用して .NET 6 でサーバーレス API (Lambda + API Gateway) を実装する方法を紹介している記事。&lt;/p&gt;
&lt;h3 id="c11-memorypack-speaker-deck"&gt;C#11 による世界最速バイナリシリアライザー「MemoryPack」の作り方 - Speaker Deck&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://speakerdeck.com/neuecc/c-number-11-niyorushi-jie-zui-su-bainarisiriaraiza-memorypack-nozuo-rifang"&gt;https://speakerdeck.com/neuecc/c-number-11-niyorushi-jie-zui-su-bainarisiriaraiza-memorypack-nozuo-rifang&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MemoryPack という高速なシリアライザーを実装する上での工夫を元に C# 11 の言語機能や Source Generator、.NET のライブラリーのモダンな活用の仕方を紹介しているスライド。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="dotnetbrowser.net-web-browser-for-wpf-and-winforms-apps"&gt;DotNetBrowser | .NET web browser for WPF and WinForms apps&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.teamdev.com/dotnetbrowser"&gt;https://www.teamdev.com/dotnetbrowser&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WPF や Windows Forms で埋め込みブラウザー(いわゆる WebView)を実現する Chromium ベースの商用コンポーネントライブラリー。&lt;/p&gt;
&lt;p&gt;CefSharp との違いとしてホストするモデル(CefSharp よりも外部プロセスで動作する)や動画サポートの有効化を簡単に行えるなどがあるとのこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.teamdev.com/embedding-browser-into-net-app-dotnetbrowser-or-cefsharp-cc94ae17f3bb"&gt;Embedding Browser into .NET App: DotNetBrowser or CefSharp?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="featbitfeatbit-a-scalable-high-performance-feature-management-and-progressive-experimentation-platform"&gt;featbit/featbit: A scalable, high-performance feature management and progressive experimentation platform&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/featbit/featbit"&gt;https://github.com/featbit/featbit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;フィーチャーフラグを管理するアプリケーションサーバー。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://featbit.medium.com/introducing-featbit-e0cef61572a"&gt;Introducing FeatBit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/cosmicflood/how-to-build-a-feature-flags-service-in-a-few-minutes-4hj0"&gt;How to build a feature flags service in a few minutes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="developer-news-visual-studio-marketplace"&gt;Developer News - Visual Studio Marketplace&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=MadsKristensen.DeveloperNews"&gt;https://marketplace.visualstudio.com/items?itemName=MadsKristensen.DeveloperNews&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 内に開発者向けのニュースを復活させるための実験的な拡張。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/get-your-developer-news/"&gt;Get your developer news - Visual Studio Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="fastendpoints"&gt;FastEndpoints&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://fast-endpoints.com/"&gt;https://fast-endpoints.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Minimal API や MVC に変わって Request-Endpoint-Response (REPR) パターンと呼ばれる実装を行うための ASP.NET 向けフレームワーク。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ilgaz.medium.com/securing-endpoints-with-jwt-bearer-authentication-in-net-6-minimal-api-using-fastendpoints-51cbb5d633b9"&gt;Securing Endpoints with JWT Bearer Authentication in .NET 6 Minimal API using FastEndpoints&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="marafdotnet-wasm-react.net-on-wasm-inside-a-react-component"&gt;maraf/dotnet-wasm-react: .NET on WASM inside a react component&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/maraf/dotnet-wasm-react"&gt;https://github.com/maraf/dotnet-wasm-react&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;React コンポーネントから .NET WebAssembly を扱うサンプルコード。&lt;/p&gt;
&lt;h3 id="vscode-pets-visual-studio-marketplace"&gt;vscode-pets - Visual Studio Marketplace&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=tonybaloney.vscode-pets"&gt;https://marketplace.visualstudio.com/items?itemName=tonybaloney.vscode-pets&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio Code 内にペットを飼うことのできる拡張。&lt;code&gt;mod&lt;/code&gt; というペットを呼び出すと dotnet-bot (紫のあれ) が出てくる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mod-dotnet-bot.net/"&gt;Mod the dotnet-bot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;p&gt;.NET Conf 2022 の動画とその内容についてのメモのマインドマップ。&lt;/p&gt;
&lt;!-- https://twitter.com/jsakamoto/status/1597555960951631872?s=12&amp;t=yjMpM4TnEEFCnbK7AUbr1A --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="ja" dir="ltr"&gt;本日の資料 (マインドマップ) はこちらの URL からご覧いただけますー。&lt;a href="https://t.co/fkxmbDWGo1"&gt;https://t.co/fkxmbDWGo1&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/tnrspr?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#tnrspr&lt;/a&gt;&lt;/p&gt;&amp;mdash; &amp;#64;jsakamoto (&amp;#64;jsakamoto) &lt;a href="https://twitter.com/jsakamoto/status/1597555960951631872?ref_src=twsrc%5Etfw"&gt;November 29, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;.NET 7 の MAUI で Xamarin.Forms の MessageCenter は非推奨となったので .NET Community Toolkit の WeekReferenceMessenger を使用が推奨という話。&lt;/p&gt;
&lt;!-- https://twitter.com/JamesMontemagno/status/1599101553813880839 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;It&amp;#39;s official, MessagingCenter has been deprecated in .NET 7 for .NET MAUI apps. Time to upgrade to the WeakReferenceMessenger in the .NET Community Toolkit! I got you covered with my recent video: &lt;a href="https://t.co/VNL2mPH8bu"&gt;https://t.co/VNL2mPH8bu&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/dotnetmaui?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnetmaui&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/dotnet7?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet7&lt;/a&gt; &lt;a href="https://t.co/DPEQTk4kXo"&gt;pic.twitter.com/DPEQTk4kXo&lt;/a&gt;&lt;/p&gt;&amp;mdash; James Montemagno (&amp;#64;JamesMontemagno) &lt;a href="https://twitter.com/JamesMontemagno/status/1599101553813880839?ref_src=twsrc%5Etfw"&gt;December 3, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;C# の言語デザインのディスカッションとワーキンググループのミーティングノートのありか。&lt;/p&gt;
&lt;!-- https://twitter.com/davidfowl/status/1600001951970000896 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;You can follow the C# language design discussions and working groups by reading the meeting notes here &lt;a href="https://t.co/ZkiH8jFLHK"&gt;https://t.co/ZkiH8jFLHK&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/csharp?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#csharp&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/oss?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#oss&lt;/a&gt;&lt;/p&gt;&amp;mdash; hachyderm.io/&amp;#64;davidfowl (&amp;#64;davidfowl) &lt;a href="https://twitter.com/davidfowl/status/1600001951970000896?ref_src=twsrc%5Etfw"&gt;December 6, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="breaking-change-webapplicationbuilder-gives-aspnet_-prefixed-environment-variables-lower-precedence-issue-498-aspnetannouncements"&gt;[Breaking change]: &lt;code&gt;WebApplicationBuilder&lt;/code&gt; gives &lt;code&gt;ASPNET_&lt;/code&gt;-prefixed environment variables lower precedence · Issue #498 · aspnet/Announcements&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/aspnet/Announcements/issues/498"&gt;https://github.com/aspnet/Announcements/issues/498&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ASPNET_&lt;/code&gt; プレフィックスの環境変数由来の構成は .NET 7 以前の ASP.NET Core でコマンドライン引数や &lt;code&gt;DOTNET_&lt;/code&gt; プレフィックスの値を上書きしていたが、.NET 7 以降では &lt;code&gt;ASPNET_&lt;/code&gt; プレフィックスでの指定はコマンドライン引数や &lt;code&gt;DOTNET_&lt;/code&gt; プレフィックスによる指定で上書きされるという破壊的変更。&lt;/p&gt;
&lt;h3 id="vs2022-search-results-on-nuget-visual-studio-feedback"&gt;VS2022 Search results on Nuget - Visual Studio Feedback&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://developercommunity.visualstudio.com/t/VS2022-Search-results-on-Nuget/10163787"&gt;https://developercommunity.visualstudio.com/t/VS2022-Search-results-on-Nuget/10163787&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 の NuGet 管理の画面で検索後に少しスクロールしていて1件目が見えないことがあるという不具合。&lt;/p&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2022/11/30/updates</id>
		<title>2022-11-30: AppHarbor is Shutting Down, C# for Babies, Newtonsoft.Json 13.0.2, ComputeSharp 2.0</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2022/11/30/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2022-11-30T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="appharbor-is-shutting-down-appharbor"&gt;AppHarbor is Shutting Down - AppHarbor&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.appharbor.com/2022/11/09/shutting-down-appharbor"&gt;https://blog.appharbor.com/2022/11/09/shutting-down-appharbor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET アプリケーションのホスティングサービス AppHabor が12月5日にサービス終了のアナウンス。(11月9日付)&lt;/p&gt;
&lt;p&gt;期日以降は Web サイトやアプリケーション、データベースなどを含め、すべてのデータにアクセスできなくなる。&lt;/p&gt;
&lt;h3 id="c-for-babies"&gt;C# for Babies&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://lp.jetbrains.com/csharp-for-babies/"&gt;https://lp.jetbrains.com/csharp-for-babies/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JetBrains による赤ちゃんに C# を理解できるようにするための電子書籍。&lt;/p&gt;
&lt;p&gt;A から Z までの単語についてイラストと簡単な説明をつけている絵本。&lt;/p&gt;
&lt;h3 id="release-13.0.2-jamesnknewtonsoft.json"&gt;Release 13.0.2 · JamesNK/Newtonsoft.Json&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/JamesNK/Newtonsoft.Json/releases/tag/13.0.2"&gt;https://github.com/JamesNK/Newtonsoft.Json/releases/tag/13.0.2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Newtonsoft.Json (JSON.NET) 13.0.2 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは DateOnly や TimeOnly のサポートや UnixDateTimeConverter.AllowPreEpoch の追加などいくつかの新機能と不具合の修正が行われている。&lt;/p&gt;
&lt;h3 id="announcing-computesharp-2.0-run-c-on-the-gpu-with-ease-through-directx-12-and-d2d1"&gt;Announcing ComputeSharp 2.0 — run C# on the GPU with ease through DirectX 12 and D2D1!&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://sergiopedri.medium.com/announcing-computesharp-2-0-run-c-on-the-gpu-with-ease-through-directx-12-and-d2d1-be4f3f2312b4"&gt;https://sergiopedri.medium.com/announcing-computesharp-2-0-run-c-on-the-gpu-with-ease-through-directx-12-and-d2d1-be4f3f2312b4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ComputeSharp 2.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;2.0 では大きく書き直され、ランタイムコード生成の代わりとなるソースジェネレーターや多くの新しい API、D2D1 ピクセルシェーダーのサポート、UWP と WinUI 3.1 との統合のための XAML コントロールの導入といった変更が行われた。&lt;/p&gt;
&lt;p&gt;記事では ComputeSharp の紹介、動作の仕組み、XAML サポートと D2D1 ピクセルシェーダーといった部分を紹介している。&lt;/p&gt;
&lt;h3 id="net-maui-is-now-available-in-visual-studio-for-mac-17.4-visual-studio-blog"&gt;.NET MAUI is now available in Visual Studio for Mac 17.4 - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/net-maui-is-now-available-in-visual-studio-for-mac-17-4/"&gt;https://devblogs.microsoft.com/visualstudio/net-maui-is-now-available-in-visual-studio-for-mac-17-4/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio for Mac 17.4 での .NET MAUI の対応がリリースされた。&lt;/p&gt;
&lt;p&gt;Windows の Visual Studio と同様に .NET MAUI の開発に必要な機能の多くが利用可能となった。
また、XCode 14.1 への対応は近日中にリリースされ、今後は C# のホットリロードや XAML のライブプレビューといった機能の実装も予定しているとのこと。&lt;/p&gt;
&lt;h3 id="rider-2022.3-eap-9"&gt;Rider 2022.3 EAP 9&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.jetbrains.com/rider/nextversion/"&gt;https://www.jetbrains.com/rider/nextversion/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider 2022.3 EAP 9 (早期アクセスプレビュー) がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは .NET 7 SDK のサポート(プロジェクトテンプレートの更新や Central Package Management、C# 11 など)、Unreal Engine 5.1 のサポート、バックエンドの .NET 7 への移行によるパフォーマンス改善、新しいツールバー UI のデフォルト化、C# の機械学習によるコード補完といったものが含まれている。&lt;/p&gt;
&lt;!-- https://twitter.com/jetbrainsrider/status/1596198425745391621?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Rider 2022.3 EAP 9 just landed with support for .NET 7 SDK and Unreal Engine 5.1, plus a new Main Toolbar. Learn more and download it here: &lt;a href="https://t.co/QBOAmxsSLu"&gt;https://t.co/QBOAmxsSLu&lt;/a&gt; &lt;a href="https://t.co/4mHW6FUUmd"&gt;pic.twitter.com/4mHW6FUUmd&lt;/a&gt;&lt;/p&gt;&amp;mdash; JetBrains Rider (&amp;#64;JetBrainsRider) &lt;a href="https://twitter.com/JetBrainsRider/status/1596198425745391621?ref_src=twsrc%5Etfw"&gt;November 25, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="resharper-2022.3-eap-9"&gt;ReSharper 2022.3 EAP 9&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.jetbrains.com/resharper/nextversion/"&gt;https://www.jetbrains.com/resharper/nextversion/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper 2022.3 EAP 9 (早期アクセスプレビュー) がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは EAP 8 での ARM64 サポートが拡充され、dotCover, dotTrace, dotMemory そして ReSharper のコマンドラインツールが ARM64 に対応した。その他正式リリースに向けて不具合の修正が行われている。&lt;/p&gt;
&lt;!-- https://twitter.com/resharper/status/1596198977795657729?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;ReSharper 2022.3 EAP 9 has just been published! Follow the link to learn more and download: &lt;a href="https://t.co/pzUrLvdYJy"&gt;https://t.co/pzUrLvdYJy&lt;/a&gt; &lt;a href="https://t.co/M76wRl0W68"&gt;pic.twitter.com/M76wRl0W68&lt;/a&gt;&lt;/p&gt;&amp;mdash; JetBrains ReSharper (&amp;#64;resharper) &lt;a href="https://twitter.com/resharper/status/1596198977795657729?ref_src=twsrc%5Etfw"&gt;November 25, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="net-serialization-roundup-2022"&gt;.NET Serialization Roundup 2022&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://aloiskraus.wordpress.com/2022/11/23/net-serialization-roundup-2022/"&gt;https://aloiskraus.wordpress.com/2022/11/23/net-serialization-roundup-2022/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET の様々なシリアライザー(バイナリーや JSON)のシリアライズ、デシリアライズのパフォーマンス比較を行っている記事。&lt;/p&gt;
&lt;p&gt;記事ではシリアライズ/デシリアライズのパフォーマンスのほか、起動時のパフォーマンスに関しても計測、比較している。&lt;/p&gt;
&lt;h3 id="improve-your-productivity-with-web-live-preview-and-telerik-visual-studio-blog"&gt;Improve your productivity with Web Live Preview and Telerik - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/improve-your-productivity-with-web-live-preview-and-telerik/"&gt;https://devblogs.microsoft.com/visualstudio/improve-your-productivity-with-web-live-preview-and-telerik/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 での ASP.NET Web フォームを実行時プレビューを行う Web Live Preview についての紹介記事。&lt;/p&gt;
&lt;p&gt;記事では Web Live Preview の有効化と利用方法、Telerik のコンポーネントのようなサードパーティーコンポーネントとの統合の様子などを紹介している。&lt;/p&gt;
&lt;h3 id="c-list-pattern-examples-youve-been-haacked"&gt;C# List Pattern Examples | You've Been Haacked&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://haacked.com/archive/2022/11/22/csharp-list-pattern/"&gt;https://haacked.com/archive/2022/11/22/csharp-list-pattern/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 のリストパターンのコード例を紹介している記事。&lt;/p&gt;
&lt;h3 id="net-7-removes-its-insecure-xmlsecureresolver"&gt;.NET 7 Removes Its Insecure XmlSecureResolver&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.infoq.com/news/2022/11/XmlSecureResolver/"&gt;https://www.infoq.com/news/2022/11/XmlSecureResolver/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 では XmlSecureResolver が廃止されたことについての記事。&lt;/p&gt;
&lt;p&gt;XmlSecureResolver は外部リソースを参照することで発生する XXE を回避するため使用が推奨されていたが、コードアクセスセキュリティー (CAS) を元に実装されていたが .NET Core 以降は CAS を持たず制限がかからない状態となっていたため .NET 7 で廃止となった。型は残っているものの参照するとビルド時に警告が出力され、実行時には例外が発生する。&lt;/p&gt;
&lt;p&gt;外部リソースを制限するには XmlSecureResolver の代わりに XmlResolver.ThrowingResolver を使用することが推奨のアクションとなっている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/ja-jp/dotnet/core/compatibility/xml/7.0/xmlsecureresolver-obsolete"&gt;.NET 7 の破壊的変更: XmlSecureResolver は廃止されました - .NET | Microsoft Learn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asp.net-core-razor-pagesiasyncpagefilter-qiita"&gt;ASP.NET Core Razor PagesでIAsyncPageFilterを実装する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/gushwell/items/bcf39aaf708b9a483cf5"&gt;https://qiita.com/gushwell/items/bcf39aaf708b9a483cf5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core Razor Pages におけるページのフィルター処理を実装する方法についての記事。&lt;/p&gt;
&lt;h3 id="azure-adblazor-wasmasp.net-core-webapims-graph-api"&gt;Azure ADでログインしてBlazor WASM→ASP.NET Core WebAPI→MS Graph APIを呼びたい&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/okazuki/articles/auth-blazorwasm-aspnetcore-obo"&gt;https://zenn.dev/okazuki/articles/auth-blazorwasm-aspnetcore-obo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure AD にログインする Blazor WebAssembly のアプリケーションから ASP.NET Core Web API で Microsoft Graph API を呼び出す方法についての記事。&lt;/p&gt;
&lt;p&gt;クライアントから直接 Graph API を呼び出すのではなく、代わりにサーバーアプリケーションが呼び出すフロー(On-Behalf-Of フロー)の使用と構築方法。&lt;/p&gt;
&lt;h3 id="the-dangers-and-gotchas-of-using-scoped-services-in-optionsbuilder"&gt;The dangers and gotchas of using scoped services in OptionsBuilder&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/the-dangers-and-gotchas-of-using-scoped-services-when-configuring-options-with-options-builder/"&gt;https://andrewlock.net/the-dangers-and-gotchas-of-using-scoped-services-when-configuring-options-with-options-builder/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OptionsBuilder を使用した構成の構築にスコープ付きサービスを使用する場合の危険性と落とし穴についての記事。&lt;/p&gt;
&lt;h3 id="net-7-adds-aggressive-garbage-collection-for-kubernetes"&gt;.NET 7 Adds Aggressive Garbage Collection for Kubernetes&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.infoq.com/news/2022/11/GCCollectionMode-Aggressive/"&gt;https://www.infoq.com/news/2022/11/GCCollectionMode-Aggressive/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 で導入された &lt;code&gt;GCCollectionMode.Aggressive&lt;/code&gt; についての記事。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GCCollectionMode.Aggressive&lt;/code&gt; は &lt;code&gt;GC.Collect&lt;/code&gt; で GC を行う際に可能な限りメモリーを開放するというモード。これはコンテナー上のワーカーのようなアイドル時間が長く、待機中はメモリーも殆ど使用しないというケースで、完全にシャットダウンはしたくないが待機中のリソースの使用量は押さえたいというようなケースで役立つ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/runtime/issues/66037"&gt;[API Proposal]: Let the application author tell us to be idle. · Issue #66037 · dotnet/runtime&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="build-and-publish-visual-studio-extensions-with-github-actions"&gt;Build and publish Visual Studio extensions with GitHub Actions&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.elmah.io/build-and-publish-visual-studio-extensions-with-github-actions/"&gt;https://blog.elmah.io/build-and-publish-visual-studio-extensions-with-github-actions/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GitHub Actions で Visual Studio 拡張をビルドしてパブリッシュ(VSIX パッケージの生成)を行う方法についての記事。&lt;/p&gt;
&lt;h3 id="androidasp.net-core-qiita"&gt;AndroidでASP.NET Coreを動かす - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/karuakun/items/c8439d0aadb2e798cf08"&gt;https://qiita.com/karuakun/items/c8439d0aadb2e798cf08&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Android で Termux を使い、Ubuntu を動作させ .NET SDK をインストールして ASP.NET Core アプリケーションを実行するという記事。&lt;/p&gt;
&lt;h3 id="net.net-semgrep"&gt;.NET でも .NET でなくても静的セキュリティコード検査 (Semgrep 編)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/masakura/articles/b84642b5bd680f"&gt;https://zenn.dev/masakura/articles/b84642b5bd680f&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;静的セキュリティコード検査を行うオープンソースの Semgrep を使用して C# のコードを検査する使い方についての記事。&lt;/p&gt;
&lt;h3 id="magiconion-qiita"&gt;MagicOnionで大きな複合データオブジェクトを送受信する方法 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/mxProject/items/838ef3e5e2856c66a29c"&gt;https://qiita.com/mxProject/items/838ef3e5e2856c66a29c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MagicOnion でストリーミングを使用することで大きなデータを送受信する方法についての記事。&lt;/p&gt;
&lt;h3 id="confusing.net-decompilers-the-callvirt-opcode"&gt;Confusing .NET Decompilers: The CallVirt OpCode&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://washi.dev/blog/posts/confusing-decompilers-with-callvirt/"&gt;https://washi.dev/blog/posts/confusing-decompilers-with-callvirt/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;仮想関数テーブルのインデックスが同じであれば異なる型でも IL 上は CallVirt で呼び出すことができてしまい、デコンパイラーはそれをうまく取り扱えないといったことについての記事。&lt;/p&gt;
&lt;h3 id="lambda-cold-starts.net-7-native-aot-vs.net-6-managed-runtime-no-dogma-blog"&gt;Lambda Cold Starts - .NET 7 Native AOT vs .NET 6 Managed Runtime | no dogma blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://nodogmablog.bryanhogan.net/2022/11/lambda-cold-starts-net-7-native-aot-vs-net-6-managed-runtime/"&gt;https://nodogmablog.bryanhogan.net/2022/11/lambda-cold-starts-net-7-native-aot-vs-net-6-managed-runtime/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AWS Lambda でのコールドスタートの時間を .NET 7 の Native AOT と .NET 6 のランタイムで比較した記事。&lt;/p&gt;
&lt;h3 id="parsing-the-nettrace-stream-of-not-only-events"&gt;Parsing the “nettrace” stream of (not only) events&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://chnasarre.medium.com/parsing-the-nettrace-stream-of-not-only-events-8b95c7f82ec4"&gt;https://chnasarre.medium.com/parsing-the-nettrace-stream-of-not-only-events-8b95c7f82ec4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET の診断プロトコルの &amp;quot;nettrace&amp;quot; ストリームの形式とパースする方法についての記事&lt;/p&gt;
&lt;h3 id="dotnetconf2022maineventtechnical-at-main-dotnet-presentationsdotnetconf-github"&gt;dotNETConf/2022/MainEvent/Technical at main · dotnet-presentations/dotNETConf · GitHub&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet-presentations/dotNETConf/tree/main/2022/MainEvent/Technical"&gt;https://github.com/dotnet-presentations/dotNETConf/tree/main/2022/MainEvent/Technical&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Conf 2022 で使用されたスライド集。&lt;/p&gt;
&lt;h3 id="qiita"&gt;デスクトップのブラウザやプレーヤーのサウンドデータを横取りしてスペアナ風の表示をしてみた - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/osamus/items/5093cefe20e8f817bbef"&gt;https://qiita.com/osamus/items/5093cefe20e8f817bbef&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;BASS というオーディオを扱うライブラリーを使用してスペアナ風のビジュアライザーを実装した際のポイントなどをまとめている記事。&lt;/p&gt;
&lt;h3 id="cmemorypack7-1"&gt;[C#]MemoryPackを使ってみたい7 - ある程度動くサンプル1&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://spacekey.dev/memorypack-7"&gt;https://spacekey.dev/memorypack-7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MemoryPack を使用して ASP.NET Core の API サーバーと Nuxt による Web フロントエンドで通信処理を行うアプリケーションを実装してみたという記事。&lt;/p&gt;
&lt;h3 id="frozen-collections-in.net-8"&gt;Frozen collections in .NET 8&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://steven-giesel.com/blogPost/34e0fd95-0b3f-40f2-ba2a-36d1d4eb5601"&gt;https://steven-giesel.com/blogPost/34e0fd95-0b3f-40f2-ba2a-36d1d4eb5601&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 8 で導入予定の Frozen Collections についての記事。&lt;/p&gt;
&lt;p&gt;Frozen Collections と既存の &lt;code&gt;IReadOnlyList&amp;lt;T&amp;gt;&lt;/code&gt; や Immutable Collections との違い、パフォーマンスなどについて紹介している。&lt;/p&gt;
&lt;h3 id="removing-out-of-support-components-from-your-visual-studio-installations-visual-studio-blog"&gt;Removing out-of-support components from your Visual Studio installations - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/removing-out-of-support-components-from-your-visual-studio-installations/"&gt;https://devblogs.microsoft.com/visualstudio/removing-out-of-support-components-from-your-visual-studio-installations/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.4 のインストーラーからサポート対象外となったコンポーネントを削除する機能についての解説記事。&lt;/p&gt;
&lt;p&gt;新しいインストーラーではサポート対象外となったコンポーネントを一括で削除できるようになり、記事ではその操作方法などを紹介している。&lt;/p&gt;
&lt;p&gt;この削除機能はインストーラーが新しくなっていれば Visual Studio 2022 のすべてのバージョンに対して実行可能となり、Visual Studio 2019 や 2017 の環境であっても 2022 インストーラーをインストールすることで対応が可能とのこと。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="michalstrehovskypublishaotcompressed"&gt;MichalStrehovsky/PublishAotCompressed&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/MichalStrehovsky/PublishAotCompressed"&gt;https://github.com/MichalStrehovsky/PublishAotCompressed&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Native AOT でパブリッシュする際に UPX で実行ファイルを圧縮するという MSBuild の拡張パッケージ。&lt;/p&gt;
&lt;!-- https://twitter.com/MStrehovsky/status/1595941448326602752 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Build fully self-contained .NET 7 command line apps starting at ~800 kB with PublishAot and PublishAotCompressed! The new version of PublishAotCompressed bumps the UPX compressor to version 4.0.1 that shipped a couple days ago. Grab it from NuGet: &lt;a href="https://t.co/q4UBeXqq45"&gt;https://t.co/q4UBeXqq45&lt;/a&gt;&lt;/p&gt;&amp;mdash; Michal Strehovský (&amp;#64;MStrehovsky) &lt;a href="https://twitter.com/MStrehovsky/status/1595941448326602752?ref_src=twsrc%5Etfw"&gt;November 25, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="dhq-boilerboilerse2e-support-your-e2e-testing"&gt;dhq-boiler/boilersE2E: Support your E2E testing&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dhq-boiler/boilersE2E"&gt;https://github.com/dhq-boiler/boilersE2E&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows デスクトップアプリケーションの E2E テストを行う際のヘルパーとなるライブラリー。Windows Application Driver の起動と終了、タイムアウト付き要素検索など。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/dhq_boiler/items/0a8e1352abd161be9a3c"&gt;【C#】.NET デスクトップアプリ向けE2Eテスト用ライブラリを実装しました - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="kalk"&gt;kalk&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://kalk.dev/"&gt;https://kalk.dev/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;様々な計算や変換、Hardware Intrinsics の実行などが行える開発者向けコマンドライン計算機。&lt;/p&gt;
&lt;h3 id="forneveravaloniarider-jetbrains-rider-plugin-for-avalonia-development"&gt;ForNeVeR/AvaloniaRider: JetBrains Rider plugin for Avalonia development&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/ForNeVeR/AvaloniaRider/"&gt;https://github.com/ForNeVeR/AvaloniaRider/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider で Avalonia を開発サポートするためのプラグイン。プレビューやテンプレートなどが提供される。&lt;/p&gt;
&lt;!-- https://twitter.com/fvnever/status/1596592659581345793?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Took me a while (as everything do), but finally I&amp;#39;ve released the first stable release of AvaloniaRider, &lt;a href="https://twitter.com/hashtag/Avalonia?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#Avalonia&lt;/a&gt; previewer plugin for &lt;a href="https://twitter.com/JetBrainsRider?ref_src=twsrc%5Etfw"&gt;&amp;#64;JetBrainsRider&lt;/a&gt; (only EAP builds for now).&lt;br&gt;&lt;br&gt;Fully cross-platform, since it is based on &lt;a href="https://twitter.com/hashtag/Avalonia?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#Avalonia&lt;/a&gt; awesomeness.&lt;a href="https://t.co/zQzNuchGoF"&gt;https://t.co/zQzNuchGoF&lt;/a&gt;&lt;/p&gt;&amp;mdash; Dr. Friedrich von Never (&amp;#64;fvnever) &lt;a href="https://twitter.com/fvnever/status/1596592659581345793?ref_src=twsrc%5Etfw"&gt;November 26, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="lowleveldesignwindbg-ext-template-a-template-for-creating-managed-windbg-extensions"&gt;lowleveldesign/windbg-ext-template: A template for creating managed WinDbg extensions&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/lowleveldesign/windbg-ext-template"&gt;https://github.com/lowleveldesign/windbg-ext-template&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WinDbg で .NET をホストしてマネージドコードで拡張関数を実装するためのテンプレート。&lt;/p&gt;
&lt;!-- https://twitter.com/lowleveldesign/status/1596164757353922560?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;I&amp;#39;m happy to share a sample managed WinDbg extension based on the .NET hosting API and DbgX NuGet package. Thanks to the signatures in DbgX, we may now access all the DbgEng interfaces in dotnet!  🤯 &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/windbg?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#windbg&lt;/a&gt; &lt;a href="https://t.co/ndxyEgPzDv"&gt;https://t.co/ndxyEgPzDv&lt;/a&gt;&lt;/p&gt;&amp;mdash; Sebastian Solnica (&amp;#64;lowleveldesign) &lt;a href="https://twitter.com/lowleveldesign/status/1596164757353922560?ref_src=twsrc%5Etfw"&gt;November 25, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="home-endoflife.date"&gt;Home | endoflife.date&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://endoflife.date/"&gt;https://endoflife.date/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;様々なフレームワークやプロダクトの End-of-Life の日付をまとめているサイト。&lt;/p&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/dotnetfdn/status/1595427955076784133?s=12&amp;t=EDTXeykhwoV--mTr9sPPxw --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;ICYMI - Firmware images of .NET &lt;a href="https://twitter.com/nanoFramework?ref_src=twsrc%5Etfw"&gt;&amp;#64;nanoframework&lt;/a&gt; &lt;a href="https://twitter.com/EspressifSystem?ref_src=twsrc%5Etfw"&gt;&amp;#64;EspressifSystem&lt;/a&gt; ESP32-C3 series have just been released! 🥳🚀&lt;br&gt;.NET now runs on &lt;a href="https://twitter.com/risc_v?ref_src=twsrc%5Etfw"&gt;&amp;#64;risc_v&lt;/a&gt; processors too!&lt;br&gt;How cool is this?!?! 💜🤩 &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://t.co/9UmMpKPkMJ"&gt;pic.twitter.com/9UmMpKPkMJ&lt;/a&gt;&lt;/p&gt;&amp;mdash; .NET Foundation (&amp;#64;dotnetfdn) &lt;a href="https://twitter.com/dotnetfdn/status/1595427955076784133?ref_src=twsrc%5Etfw"&gt;November 23, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;ESP32-C3 向けの .NET nanoFramework ファームウェアイメージがリリースされ、RISC-V で .NET が動くという話。&lt;/p&gt;
&lt;h3 id="alexandre-mutel-one-of-the-super-cool-feature-of-nativeaot-with-mastodon"&gt;Alexandre Mutel: &amp;quot;One of the super cool feature of NativeAOT with .…&amp;quot; - Mastodon&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://mastodon.social/&amp;#64;xoofx/109423020409800983"&gt;https://mastodon.social/&amp;#64;xoofx/109423020409800983&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One of the super cool feature of NativeAOT with .NET 7 is &amp;quot;Direct PInvoke calls&amp;quot; or the ability to link against a static library &lt;a href="https://github.com/dotnet/runtime/blob/main/src/coreclr/nativeaot/docs/interop.md"&gt;https://github.com/dotnet/runtime/blob/main/src/coreclr/nativeaot/docs/interop.md&lt;/a&gt; and call functions directly.
There is no built-in support to distribute such things with NuGet  (e.g like runtime folder) but it's easy to ship a package that would provide dynamic libraries but could also provide support for statically linked libraries and inject it automatically via a MSBuild target. I love this feature! 😎&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;.NET 7 の NativeAOT では直接 P/Invoke 呼び出しと静的ライブラリリンクがサポートされているという話。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/runtime/blob/main/src/coreclr/nativeaot/docs/interop.md"&gt;runtime/interop.md at main · dotnet/runtime · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2022/11/22/updates</id>
		<title>2022-11-22: C# support in Fleet, .NET Virtual Monolithic Repository, How fast is really ASP.NET Core?</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2022/11/22/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2022-11-22T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="c-support-in-fleet-public-preview-the.net-tools-blog"&gt;C# support in Fleet Public Preview | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/11/17/csharp-support-in-fleet/"&gt;https://blog.jetbrains.com/dotnet/2022/11/17/csharp-support-in-fleet/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Fleet での C# サポートがパブリックプレビューとなった。&lt;/p&gt;
&lt;p&gt;現時点では C# の基本的なサポートのみとなり、Razor/Blazor や VB.NET, F# といった言語サポートは行われない(.NET サポートではない理由)。Rider と同様に ReSharper をベースとした実装が行われているが Xamarin や Unity といったサポートがないため Rider と Fleet は当面共存する。また制限として .NET 5 以降を対象とするプロジェクトのみサポートとなる。&lt;/p&gt;
&lt;p&gt;サポートされている機能としてはコード解析、ナビゲーション、名前のリファクタリング、コード補完、テンプレート、フォーマッティング、ドキュメントポップアップ、アプリケーションの構成と実行、ブレークポイントをはじめとしたデバッグがある。&lt;/p&gt;
&lt;p&gt;記事ではサポートの有効化の手順や今後の計画などにも触れている。&lt;/p&gt;
&lt;h3 id="announcing-the.net-virtual-monolithic-repository-issue-241-dotnetannouncements"&gt;Announcing the .NET Virtual Monolithic Repository · Issue #241 · dotnet/announcements&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/announcements/issues/241"&gt;https://github.com/dotnet/announcements/issues/241&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET のバーチャルモノリシックリポジトリーという .NET をビルドするために必要なものを一つのリポジトリーにミラーして集めるというリポジトリーが公開された。&lt;/p&gt;
&lt;p&gt;.NET の製品ビルドはいくつものリポジトリーから構成されるため、Microsoft 以外がビルドを再現することが難しく、またビルドとリリースのインフラストラクチャーが複雑さを増していくことが課題となっているため、ビルドと出荷を簡素化しコミュニティーに対して透過的である状態にするといった目的のリポジトリーとなっている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/dotnet"&gt;dotnet/dotnet: Home of .NET's Virtual Monolithic Repository. Includes all the code needed to build the .NET SDK from source.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="how-fast-is-really-asp.net-core"&gt;How fast is really ASP.NET Core?&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dusted.codes/how-fast-is-really-aspnet-core"&gt;https://dusted.codes/how-fast-is-really-aspnet-core&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core のパフォーマンスに関して近年 TechEmpower Benchmark の結果を元に高速さを宣伝しているが、これに対応するコードはどのようなものとなっているのかを掘り下げている記事。&lt;/p&gt;
&lt;p&gt;ベンチマークのコードには Kestrel や最低限の部分のみで書かれた &amp;quot;Platform&amp;quot;、ASP.NET Core の Middleware を使う &amp;quot;Micro&amp;quot;、Razor テンプレートエンジンまで使う &amp;quot;Full&amp;quot; の構成があり、それぞれの実装を取り上げ、宣伝には Platform での結果が持ち出されているが「他の言語/プラットフォームに比べて速い」と言えるのかどうかといった話など。&lt;/p&gt;
&lt;h3 id="actions-self-hosted-runners-now-support-windows-arm64-issue-616-githubroadmap"&gt;Actions: Self-hosted runners now support Windows ARM64 · Issue #616 · github/roadmap&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/github/roadmap/issues/616#event-7826802074"&gt;https://github.com/github/roadmap/issues/616#event-7826802074&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GitHub Actions の Self-hosted runner が Windows ARM64 環境をサポートした。&lt;/p&gt;
&lt;h3 id="announcing-oracle-support-for.net-7-alex-keh-medium"&gt;Announcing Oracle Support for .NET 7 - Alex Keh - Medium&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;alex.keh/announcing-oracle-support-for-net-7-c011b0dc4558"&gt;https://medium.com/&amp;#64;alex.keh/announcing-oracle-support-for-net-7-c011b0dc4558&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ODP.NET Core が .NET 7 をサポートした。&lt;/p&gt;
&lt;p&gt;NuGet パッケージのバージョン 3.21.80 以降で Oracle Database 11g Release 2 (11.2.0.4) 以降をサポートする。&lt;/p&gt;
&lt;h3 id="visual-studio-2022-version-17.4.1-visual-studio-2022-release-notes-microsoft-learn"&gt;Visual Studio 2022 version 17.4.1 - Visual Studio 2022 Release Notes | Microsoft Learn&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://learn.microsoft.com/en-us/visualstudio/releases/2022/release-notes#17.4.1"&gt;https://learn.microsoft.com/en-us/visualstudio/releases/2022/release-notes#17.4.1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 version 17.4.1 がリリースされた。&lt;/p&gt;
&lt;p&gt;ML.NET Model Builder や統合ターミナルのスクリーンリーダーの問題、Linux での .NET 7 のコアダンプを開いた際にクラッシュする問題などが修正されている。&lt;/p&gt;
&lt;h3 id="multi-repository-support-released-visual-studio-blog"&gt;Multi-repository Support Released! - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/multi-repository-support-released/"&gt;https://devblogs.microsoft.com/visualstudio/multi-repository-support-released/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.4 でリリースされた Git のマルチリポジトリーサポートについての解説記事。&lt;/p&gt;
&lt;p&gt;マルチリポジトリーサポートにより一つのソリューションを開いている最中に複数のリポジトリーを扱えるようになる。なお同時に取り扱えるリポジトリの数はパフォーマンスの制約上現時点では10個までと制限されている。&lt;/p&gt;
&lt;p&gt;記事では複数リポジトリーを跨いだブランチの管理と変更の追跡、プッシュ、Fetch 時の Prune の有無など Git リポジトリーの設定といった点を紹介している。&lt;/p&gt;
&lt;h3 id="public-preview-of-dev-tunnels-in-visual-studio-for-asp.net-core-projects-visual-studio-blog"&gt;Public preview of dev tunnels in Visual Studio for ASP.NET Core projects - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/public-preview-of-dev-tunnels-in-visual-studio-for-asp-net-core-projects/"&gt;https://devblogs.microsoft.com/visualstudio/public-preview-of-dev-tunnels-in-visual-studio-for-asp-net-core-projects/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio で ASP.NET Core 開発時に使用できる開発トンネルのパブリックプレビューについての記事。&lt;/p&gt;
&lt;p&gt;&amp;quot;dev tunnel&amp;quot; はインターネットからローカル環境へのトンネル(ポートフォワーディング)を提供するサービス。プライベートプレビューからパブリックプレビューとなった。
記事ではトンネルを有効にする方法とデバッグ起動時に使用する設定方法、初期リリースからの変更点について紹介している。&lt;/p&gt;
&lt;p&gt;今後のロードマップとして永続 URL やトンネル管理や各種 UI といったものを追加したいとのこと。&lt;/p&gt;
&lt;h3 id="visual-studio-2022-performance-enhancements-17.4-visual-studio-blog"&gt;Visual Studio 2022 Performance Enhancements 17.4 - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2022-performance-enhancements-17-4/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-2022-performance-enhancements-17-4/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.4 でのパフォーマンス改善についての紹介記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;フォルダーを指定して検索&lt;/li&gt;
&lt;li&gt;C++ プロジェクトのインデックス作成の高速化&lt;/li&gt;
&lt;li&gt;Git ブランチの切り替え中のソリューションのリロードの削減&lt;/li&gt;
&lt;li&gt;.NET の構成切り替え時の応答性&lt;/li&gt;
&lt;li&gt;ユニットテスト
&lt;ul&gt;
&lt;li&gt;並列テスト探索&lt;/li&gt;
&lt;li&gt;効率的な並列テスト実行&lt;/li&gt;
&lt;li&gt;Visual Studio とテストランナープロセスのコミュニケーションの最適化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ファイル保存の応答性向上&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="release-release-v2.50.0-grpcgrpc-dotnet"&gt;Release Release v2.50.0 · grpc/grpc-dotnet&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/grpc/grpc-dotnet/releases/tag/v2.50.0"&gt;https://github.com/grpc/grpc-dotnet/releases/tag/v2.50.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;grpc-dotnet 2.50.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは大きな機能変更はなく、主にいくつかの不具合が修正されている。&lt;/p&gt;
&lt;h3 id="net-framework-assembly-support-added-to-azure-logic-apps-standard-xslt-transformations-preview"&gt;.NET Framework assembly support added to Azure Logic Apps (Standard) XSLT transformations (Preview)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://techcommunity.microsoft.com/t5/integrations-on-azure-blog/net-framework-assembly-support-added-to-azure-logic-apps/ba-p/3669120"&gt;https://techcommunity.microsoft.com/t5/integrations-on-azure-blog/net-framework-assembly-support-added-to-azure-logic-apps/ba-p/3669120&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure Logic Apps (Standard) XSLT transformations で .NET Framework のアセンブリーサポートが追加された。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="net-7.0s-performance-improvements-with-dynamic-pgo-are-incredible-petabridge"&gt;.NET 7.0's Performance Improvements with Dynamic PGO are Incredible | Petabridge&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://petabridge.com/blog/dotnet7-pgo-performance-improvements/"&gt;https://petabridge.com/blog/dotnet7-pgo-performance-improvements/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Akka.NET での .NET 7 の DynamicPGO のパフォーマンス改善についての記事。&lt;/p&gt;
&lt;h3 id="net-7"&gt;.NET 7で導入されたビルトインコンテナサポートを試してみた - 銀の光と碧い空&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://tech.tanaka733.net/entry/2022/11/builtin-container-support"&gt;https://tech.tanaka733.net/entry/2022/11/builtin-container-support&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 でのビルトインコンテナーサポート(dotnet publish からコンテナーイメージをビルド)についての記事。&lt;/p&gt;
&lt;p&gt;記事では実際に使用する方法や各種設定についてや制限についてなどを説明している。&lt;/p&gt;
&lt;h3 id="writing-an-obs-plugin-with.net-nativeaot"&gt;Writing an OBS plugin with .NET NativeAOT&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://sharovarskyi.com/blog/posts/dotnet-obs-plugin-with-nativeaot/"&gt;https://sharovarskyi.com/blog/posts/dotnet-obs-plugin-with-nativeaot/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 の NativeAOT で OBS プラグインを書くという記事。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;UnmanagedCallersOnly&lt;/code&gt; で OBS のプラグイン用の関数をエクスポートし、プラグインとして読み込まれた際にログに出力するといった例を実装している。&lt;/p&gt;
&lt;h3 id="entity-framework-coredapper-qiita"&gt;Entity Framework CoreとDapperを同一トランザクションで併用する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/jun1s/items/212a95b73e68625a3674"&gt;https://qiita.com/jun1s/items/212a95b73e68625a3674&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core と Dapper を併用した際のトランザクションやコネクションの扱いについての記事。&lt;/p&gt;
&lt;h3 id="netibm-power-qiita"&gt;.NETがIBM Powerでサポートされたので試してみる - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/tom_m_m/items/9a729f462c0622a5ece3"&gt;https://qiita.com/tom_m_m/items/9a729f462c0622a5ece3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 でサポートされた 64-bit IBM Power (ppc64le) をインストール、実行してみるという記事。&lt;/p&gt;
&lt;h3 id="hashset-vs-sortedset-in-c-code-maze"&gt;HashSet vs SortedSet in C# - Code Maze&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://code-maze.com/csharp-hashset-vs-sortedset/"&gt;https://code-maze.com/csharp-hashset-vs-sortedset/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;HashSet&amp;lt;T&amp;gt;&lt;/code&gt; と &lt;code&gt;SortedSet&amp;lt;T&amp;gt;&lt;/code&gt; の違いと特徴、そのパフォーマンスの差についてまとめている記事。&lt;/p&gt;
&lt;h3 id="authorize-qiita"&gt;[Authorize]を使わなくても有効にする方法 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/mkuwan/items/bd5ff882108998d76dca"&gt;https://qiita.com/mkuwan/items/bd5ff882108998d76dca&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Authorize&lt;/code&gt; 属性をコントローラーやメソッドに指定せず、フォールバック認可ポリシーによって一律に指定する方法についての記事。&lt;/p&gt;
&lt;h3 id="a-quick-comparison-of-security-static-code-analyzers-for-c"&gt;A quick comparison of Security Static Code Analyzers for C#&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/dbalikhin/a-quick-comparison-of-security-static-code-analyzers-for-c-2l5h"&gt;https://dev.to/dbalikhin/a-quick-comparison-of-security-static-code-analyzers-for-c-2l5h&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# の静的コードセキュリティー解析ツールを比較している記事。&lt;/p&gt;
&lt;p&gt;記事では CodeQL, SonarCloud, Semgrep, Security Code Scan, Snyk Code といったツールをサンプルコードに対して実行してその結果を比較している。その他に速度や IDE サポート、価格といった面でも比較している。&lt;/p&gt;
&lt;h3 id="blazorbindings.maui-preview-10"&gt;BlazorBindings.Maui - Preview 10&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/dreamescaper/blazorbindingsmaui-preview-10-5c35"&gt;https://dev.to/dreamescaper/blazorbindingsmaui-preview-10-5c35&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MobileBlazorBindings からフォークした MAUI 向けの BlazorBindings.Maui の Preview 10 についての記事。&lt;/p&gt;
&lt;p&gt;.NET 7 サポートやナビゲーションの改善、シェルプロパティ、コンポーネントジェネレーターの改善などを紹介している。&lt;/p&gt;
&lt;h3 id="assertion-scopes-the-one-fluentassertions-feature-you-didnt-know-you-needed"&gt;Assertion Scopes, the one FluentAssertions feature you didn't know you needed&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/this-is-learning/assertion-scopes-the-one-fluentassertions-feature-you-didnt-know-you-needed-4pn"&gt;https://dev.to/this-is-learning/assertion-scopes-the-one-fluentassertions-feature-you-didnt-know-you-needed-4pn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;FluentAssertions にある Assertion Scope と呼ばれるアサーションのグループ化の仕組みについての記事。&lt;/p&gt;
&lt;p&gt;Assertion Scope 内で失敗したアサートはまとめて報告される(一つ失敗しても後続のアサートも実行される)といったことを実現できる。&lt;/p&gt;
&lt;h3 id="how-to-draw-2d-graphics-in.net-mauis-graphicsview"&gt;How to Draw 2D Graphics in .NET MAUI’s GraphicsView&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/syncfusion/how-to-draw-2d-graphics-in-net-mauis-graphicsview-daj"&gt;https://dev.to/syncfusion/how-to-draw-2d-graphics-in-net-mauis-graphicsview-daj&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI で 2D グラフィックスを描画するビューを作る方法についての記事。&lt;/p&gt;
&lt;p&gt;GraphicsView と Microsoft.Maui.Graphics を使用して図形などを描画することができる。&lt;/p&gt;
&lt;h3 id="intro-to-litedb-for.net-developers.sample-webapp-included"&gt;Intro to LiteDB for .NET Developers. Sample WebApp Included&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://platform.uno/blog/intro-to-litedb-for-net-developers-sample-webapp-included/"&gt;https://platform.uno/blog/intro-to-litedb-for-net-developers-sample-webapp-included/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET の NoSQL データベースである LiteDB の紹介とそれを使った Uno Platform サンプルアプリケーションを実装についての記事。&lt;/p&gt;
&lt;h3 id="c-11-required-members-ndepend"&gt;C# 11 required members - NDepend&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.ndepend.com/c-11-required-members"&gt;https://blog.ndepend.com/c-11-required-members&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 の &lt;code&gt;required&lt;/code&gt; (必須)メンバーについての記事。&lt;/p&gt;
&lt;p&gt;記事では使用方法や制限事項、どのようなケースで役立つのかといったことを紹介している。&lt;/p&gt;
&lt;h3 id="enable-group-policy-settings-with-visual-studio-administrative-templates-admx-visual-studio-blog"&gt;Enable Group Policy Settings with Visual Studio Administrative Templates (ADMX) - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/enable-group-policy-settings-with-visual-studio-administrative-templates-admx/"&gt;https://devblogs.microsoft.com/visualstudio/enable-group-policy-settings-with-visual-studio-administrative-templates-admx/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 管理用テンプレートを使用してグループポリシー設定を有効化することについての記事。&lt;/p&gt;
&lt;h3 id="ef-core-7-is-here-welcome-typed-entity-id"&gt;EF Core 7 is here - Welcome typed entity id 🍾&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/maxx_don/ef-core-7-is-here-welcome-typed-entity-id-1k3p"&gt;https://dev.to/maxx_don/ef-core-7-is-here-welcome-typed-entity-id-1k3p&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core 7 でカスタムな型 ID をもつエンティティーがサポートされたことについての記事。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="le-nnblazor-transition-group-an-easy-way-to-perform-animations-when-a-blazor-component-enters-or-leaves-the-dom"&gt;le-nn/blazor-transition-group: An easy way to perform animations when a Blazor component enters or leaves the DOM&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/le-nn/blazor-transition-group"&gt;https://github.com/le-nn/blazor-transition-group&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor でリストのようなコンポーネントに追加、削除アニメーションを実装するためのライブラリー。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/remrem/articles/3e13d64bcba6b5"&gt;Blazorで簡単にリストの追加/削除アニメーションを実現する [BlazorTransitionGroup]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asmichichildprocess-asmichi.childprocess-is-a.net-library-that-provides-functionality-for-creating-child-processes.an-alternative-to-system.diagnostics.process.start"&gt;asmichi/ChildProcess: Asmichi.ChildProcess is a .NET library that provides functionality for creating child processes. An alternative to &lt;code&gt;System.Diagnostics.Process.Start&lt;/code&gt;.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/asmichi/ChildProcess"&gt;https://github.com/asmichi/ChildProcess&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;子プロセスを生成して入出力などの操作を柔軟に行えるライブラリー。&lt;/p&gt;
&lt;h3 id="arm64-windows-11-dd-gzip-linux-dd-gzip-qiita"&gt;ARM64 版 Windows 11 で動作する dd + gzip 自作ツール (物理ディスクのイメージ化 + リストア、Linux の dd + gzip 互換) の提供 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/dnobori/items/59cc61b7f35449182b98"&gt;https://qiita.com/dnobori/items/59cc61b7f35449182b98&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ARM64 版の Windows で動作する物理ディスクのイメージ化と書き戻しを行うツール。&lt;/p&gt;
&lt;h3 id="pythonnetpythonnet-python-for.net-is-a-package-that-gives-python-programmers-nearly-seamless-integration-with-the.net-common-language-runtime-clr-and-provides-a-powerful-application-scripting-tool-for.net-developers"&gt;pythonnet/pythonnet: Python for .NET is a package that gives Python programmers nearly seamless integration with the .NET Common Language Runtime (CLR) and provides a powerful application scripting tool for .NET developers.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/pythonnet/pythonnet"&gt;https://github.com/pythonnet/pythonnet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET から Python をシームレスに呼び出す (組み込む)、あるいは Python から .NET を呼び出すといったことを実現するライブラリー。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/hiron_rgkr/items/e0f110d75fb35584e6ed"&gt;C# から Python を呼ぶ Pythonnet の使い方 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="monolithic-to-microservice-journey-for.net-applications"&gt;Monolithic to Microservice journey for .NET Applications&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://d1.awsstatic.com/developer/Monolith-to-Microservice-Journey-net-framework-application-v1.5.pdf"&gt;https://d1.awsstatic.com/developer/Monolith-to-Microservice-Journey-net-framework-application-v1.5.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET アプリケーションのためのモノリスからマイクロサービスへのジャーニー (英語)&lt;/p&gt;
&lt;!-- https://twitter.com/dotnetonAWS/status/1593725744554835973 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Learn how to move and modernize Windows workloads to &lt;a href="https://twitter.com/hashtag/AWS?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#AWS&lt;/a&gt; using a combination of strategies including rehosting, replatforming, and refactoring in this 🆕 technical guide. &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt;&lt;br&gt;&lt;br&gt;🔗 &lt;a href="https://t.co/sx48IY6hSQ"&gt;https://t.co/sx48IY6hSQ&lt;/a&gt; &lt;a href="https://t.co/wJN1H3ttb9"&gt;pic.twitter.com/wJN1H3ttb9&lt;/a&gt;&lt;/p&gt;&amp;mdash; .NET on AWS (&amp;#64;dotnetonAWS) &lt;a href="https://twitter.com/dotnetonAWS/status/1593725744554835973?ref_src=twsrc%5Etfw"&gt;November 18, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;p&gt;Azure と gRPC JSON Transcoding と .NET Native AOT (サーバー側?) の組み合わせで動いているという話。&lt;/p&gt;
&lt;!-- https://twitter.com/jamesnk/status/1592634240310861824?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;This app is published with .NET Native AOT:&lt;a href="https://t.co/fAqsdxRtjw"&gt;https://t.co/fAqsdxRtjw&lt;/a&gt;&lt;br&gt;&lt;br&gt;🌎 gRPC on Azure&lt;br&gt;🔥 gRPC JSON transcoding&lt;br&gt;🚀 .NET Native AOT &lt;a href="https://t.co/rPVjbVzSfJ"&gt;pic.twitter.com/rPVjbVzSfJ&lt;/a&gt;&lt;/p&gt;&amp;mdash; James Newton-King ♔ (&amp;#64;JamesNK) &lt;a href="https://twitter.com/JamesNK/status/1592634240310861824?ref_src=twsrc%5Etfw"&gt;November 15, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;PerfView で .NET アプリケーションのパフォーマンスをプロファイリングするという動画。&lt;/p&gt;
&lt;!-- https://twitter.com/aaronontheweb/status/1592275255426711553?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;I promised a video on performance profiling &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; applications with PerfView; I have now published it!&lt;br&gt;&lt;br&gt;&amp;quot;Performance Profiling .NET Applications with PerfView&amp;quot;&lt;a href="https://t.co/dMz6lOsSFR"&gt;https://t.co/dMz6lOsSFR&lt;/a&gt;&lt;/p&gt;&amp;mdash; Aaron Stannard (&amp;#64;Aaronontheweb) &lt;a href="https://twitter.com/Aaronontheweb/status/1592275255426711553?ref_src=twsrc%5Etfw"&gt;November 14, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2022/11/15/updates</id>
		<title>2022-11-15: .NET 7</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2022/11/15/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2022-11-15T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="net-7-is-available-today.net-blog"&gt;.NET 7 is Available Today - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-dotnet-7/"&gt;https://devblogs.microsoft.com/dotnet/announcing-dotnet-7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 がリリースされた。記事では .NET 7 の様々な新機能や変更点について改めてまとめて紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;統合
&lt;ul&gt;
&lt;li&gt;One BCL (一つのベースクラスライブラリー)&lt;/li&gt;
&lt;li&gt;新しい TFM&lt;/li&gt;
&lt;li&gt;ARM64 のネイティブサポート&lt;/li&gt;
&lt;li&gt;Linux 上での .NET サポートの強化
&lt;ul&gt;
&lt;li&gt;64-bit IBM Power プラットフォームのサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;モダン
&lt;ul&gt;
&lt;li&gt;引き続きのパフォーマンス改善&lt;/li&gt;
&lt;li&gt;コンテナーファーストワークフローのような開発生産性の向上&lt;/li&gt;
&lt;li&gt;同じコードベースからのモバイルとデスクトップアプリの構築&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;クラウドネイティブアプリのための .NET
&lt;ul&gt;
&lt;li&gt;分散したクラウドネイティブアプリのビルドとデプロイを簡単に
&lt;ul&gt;
&lt;li&gt;Day 0 での Azure サポート&lt;/li&gt;
&lt;li&gt;ビルトインのコンテナーサポート&lt;/li&gt;
&lt;li&gt;Orleans 7&lt;/li&gt;
&lt;li&gt;Observability&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;シンプル
&lt;ul&gt;
&lt;li&gt;C# 11 でシンプルで少ないコードを記述
&lt;ul&gt;
&lt;li&gt;Generic Math&lt;/li&gt;
&lt;li&gt;Raw String Literals&lt;/li&gt;
&lt;li&gt;.NET ライブラリー&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;クラウドネイティブアプリのための HTTP/3 と Minimal API の改善&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;パフォーマンス
&lt;ul&gt;
&lt;li&gt;沢山のパフォーマンスの改善
&lt;ul&gt;
&lt;li&gt;On Stack Replacement&lt;/li&gt;
&lt;li&gt;Profile-Guided Optimization&lt;/li&gt;
&lt;li&gt;Native AOT&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;.NET 7 は Standard Term Support (標準期間サポート) のためリリースから18か月間のサポートとなる。&lt;/p&gt;
&lt;h3 id="announcing-asp.net-core-in.net-7.net-blog"&gt;Announcing ASP.NET Core in .NET 7 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-asp-net-core-in-dotnet-7/"&gt;https://devblogs.microsoft.com/dotnet/announcing-asp-net-core-in-dotnet-7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 の ASP.NET Core に関するアナウンス記事。&lt;/p&gt;
&lt;p&gt;記事では新しい機能や変更点について過去の記事へのリンクをまとめて紹介している。&lt;/p&gt;
&lt;h3 id="whats-new-in-windows-forms-in.net-7.0.net-blog"&gt;What's new in Windows Forms in .NET 7.0 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/winforms-enhancements-in-dotnet-7/"&gt;https://devblogs.microsoft.com/dotnet/winforms-enhancements-in-dotnet-7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 の Windows Forms の新しい機能や変更点についての記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;アクセシビリティの改善と修正&lt;/li&gt;
&lt;li&gt;高 DPI とスケーリングの改善&lt;/li&gt;
&lt;li&gt;データバインディングの改善&lt;/li&gt;
&lt;li&gt;COM ラッパーと Native AOT&lt;/li&gt;
&lt;li&gt;その他変更点&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="announcing.net-maui-for.net-7-general-availability.net-blog"&gt;Announcing .NET MAUI for .NET 7 General Availability - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-maui-dotnet-7/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-maui-dotnet-7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 の .NET MAUI がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは Map コントロールやモバイルでのレンダリングパフォーマンスの改善、デスクトップでの様々な強化といったものが行われている。&lt;/p&gt;
&lt;h3 id="whats-new-for-wpf-in.net-7.net-blog"&gt;What's new for WPF in .NET 7 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/wpf-on-dotnet-7/"&gt;https://devblogs.microsoft.com/dotnet/wpf-on-dotnet-7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 の WPF の新しい機能や変更点についての記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;パフォーマンス
&lt;ul&gt;
&lt;li&gt;Box 化/Box 化解除&lt;/li&gt;
&lt;li&gt;アロケーション&lt;/li&gt;
&lt;li&gt;その他&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;アクセシビリティ&lt;/li&gt;
&lt;li&gt;不具合の修正&lt;/li&gt;
&lt;li&gt;基盤のアップグレード&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="entity-framework-core-7-ef7-is-available-today.net-blog"&gt;Entity Framework Core 7 (EF7) is available today - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-ef7/"&gt;https://devblogs.microsoft.com/dotnet/announcing-ef7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core 7 (EF7) がリリースされた。&lt;/p&gt;
&lt;p&gt;記事では Entity Framework Core 7 での新機能や変更点について改めて紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JSON カラム
&lt;ul&gt;
&lt;li&gt;JSON 問い合わせに LINQ を使用&lt;/li&gt;
&lt;li&gt;SaveChanges を使用した JSON の更新&lt;/li&gt;
&lt;li&gt;その他 JSON カラムについて&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バルク更新と削除&lt;/li&gt;
&lt;li&gt;単一行の更新と削除&lt;/li&gt;
&lt;li&gt;高速な SaveChanges
&lt;ul&gt;
&lt;li&gt;不要なトランザクションの削除&lt;/li&gt;
&lt;li&gt;複数行の挿入&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Table-per-concrete-type (TPC) 継承マッピング&lt;/li&gt;
&lt;li&gt;カスタムデータベースファーストテンプレート
&lt;ul&gt;
&lt;li&gt;生成されるエンティティ型のカスタマイズ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;カスタムモデル構築規則
&lt;ul&gt;
&lt;li&gt;規則の削除&lt;/li&gt;
&lt;li&gt;規則の追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;追加、更新、削除のストアドプロシージャーのマッピング&lt;/li&gt;
&lt;li&gt;新しいまたは改善されたインターセプターとイベント
&lt;ul&gt;
&lt;li&gt;マテリアル化インターセプション&lt;/li&gt;
&lt;li&gt;接続文字列の遅延初期化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;様々な小さな改善&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Entity Framework Core 7 は .NET 6 をターゲットとしており、.NET 6 (LTS) または .NET 7 で利用可能。&lt;/p&gt;
&lt;h3 id="announcing-f-7.net-blog"&gt;Announcing F# 7 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-fsharp-7/"&gt;https://devblogs.microsoft.com/dotnet/announcing-fsharp-7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 で利用可能となった F# 7 についてのアナウンス。記事では次の機能を紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;インターフェースの static abstract members のサポート&lt;/li&gt;
&lt;li&gt;SRTP をより使いやすく&lt;/li&gt;
&lt;li&gt;必須プロパティーチェック
&lt;ul&gt;
&lt;li&gt;init スコープと init-only プロパティー&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;リファレンスアセンブリーサポート&lt;/li&gt;
&lt;li&gt;F# self-contained デプロイメントと Native AOT&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="welcome-to-c-11.net-blog"&gt;Welcome to C# 11 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/welcome-to-csharp-11/"&gt;https://devblogs.microsoft.com/dotnet/welcome-to-csharp-11/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 で利用可能となった C# 11 についてのアナウンス。記事では次の機能を紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UTF-8 文字列リテラル&lt;/li&gt;
&lt;li&gt;生文字列リテラル&lt;/li&gt;
&lt;li&gt;静的メンバー上の抽象化&lt;/li&gt;
&lt;li&gt;リストパターン&lt;/li&gt;
&lt;li&gt;必須メンバー&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="announcing-nuget-6.4-signed-central-delivered-the-nuget-blog"&gt;Announcing NuGet 6.4 - Signed, Central, Delivered - The NuGet Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/"&gt;https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NuGet 6.4 がリリースされた。&lt;/p&gt;
&lt;p&gt;NuGet 6.4 は Visual Studio 2022 と .NET 7 に含まれ、単体の実行ファイルとしてもダウンロード可能。&lt;/p&gt;
&lt;p&gt;記事ではこのリリースに含まれる次の点について紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Central Package Management が運用利用可能に&lt;/li&gt;
&lt;li&gt;GlobalPackageReference で一つの PackageReference をどこでも使用
&lt;ul&gt;
&lt;li&gt;GlobalPackageReference を定義することですべてのプロジェクトにパッケージを追加できる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Visual Studio のすべてのタブでのパッケージ読み込みのパフォーマンス改善&lt;/li&gt;
&lt;li&gt;NuGet 署名パッケージ検証&lt;/li&gt;
&lt;li&gt;Visual Studio での認証の改善&lt;/li&gt;
&lt;li&gt;NuGet.exe ローカライズ&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="visual-studio-2022-17.4-is-now-available-visual-studio-blog"&gt;Visual Studio 2022 17.4 is now available! - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2022-17-4/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-2022-17-4/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 version 17.4 がリリースされた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.NET 7&lt;/li&gt;
&lt;li&gt;C++&lt;/li&gt;
&lt;li&gt;Arm64&lt;/li&gt;
&lt;li&gt;ロールバック&lt;/li&gt;
&lt;li&gt;エンタープライズサポート
&lt;ul&gt;
&lt;li&gt;LTSC サポート&lt;/li&gt;
&lt;li&gt;Windows Updaet for Business からのセキュリティーアップデート&lt;/li&gt;
&lt;li&gt;Visual Studio 管理テンプレートによる管理ポリシー&lt;/li&gt;
&lt;li&gt;サポート外のコンポーネントの削除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;コラボレーションとチーム
&lt;ul&gt;
&lt;li&gt;Git ツーリング&lt;/li&gt;
&lt;li&gt;マルチリポジトリサポートのリリース&lt;/li&gt;
&lt;li&gt;Microsoft Teams Toolkit&lt;/li&gt;
&lt;li&gt;エコシステム
&lt;ul&gt;
&lt;li&gt;Arm64 の拡張と VisualStudio.Extensibility 拡張モデル&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;生産性
&lt;ul&gt;
&lt;li&gt;選択マッチハイライティング&lt;/li&gt;
&lt;li&gt;オーディオキュー&lt;/li&gt;
&lt;li&gt;データテーブルビジュアライザー&lt;/li&gt;
&lt;li&gt;コールスタックウィンドウ内での例外スタックフレーム&lt;/li&gt;
&lt;li&gt;テストエクスプローラーでのテスト結果のクリアとフィルター&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;パフォーマンス
&lt;ul&gt;
&lt;li&gt;Git ブランチ切り替え&lt;/li&gt;
&lt;li&gt;ファイル保存のレスポンス改善&lt;/li&gt;
&lt;li&gt;C++ インデックス&lt;/li&gt;
&lt;li&gt;ファイル内の検索と置き換え&lt;/li&gt;
&lt;li&gt;言語サービス設定切り替え最適化&lt;/li&gt;
&lt;li&gt;ユニットテストパフォーマンス改善
&lt;ul&gt;
&lt;li&gt;テスト検索の並列化&lt;/li&gt;
&lt;li&gt;テストの実行の効果的な並列化&lt;/li&gt;
&lt;li&gt;Visual Studio とテストランナープロセス間の通信の最適化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Arm64 対応と Windows Update for Business での更新、Visual Studio のロールバックについては下記の詳細な記事を参照のこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/arm64-visual-studio-is-officially-here/"&gt;Arm64 Visual Studio is officially here! - Visual Studio Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/deploy-visual-studio-updates-to-devices-enrolled-in-windows-update-for-business/"&gt;Deploy Visual Studio updates to devices enrolled in Windows Update for Business - Visual Studio Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/introducing-visual-studio-rollback/"&gt;Introducing Visual Studio Rollback! - Visual Studio Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最後に次期バージョンのプレビューである Visual Studio 2022 17.5 Preview 1 も利用可能となったことも案内している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Azure Container Registry や Azure Container Apps のサポート&lt;/li&gt;
&lt;li&gt;SQL Server 2022 のサポート&lt;/li&gt;
&lt;li&gt;Markdown のより深いサポート&lt;/li&gt;
&lt;li&gt;正規表現によるタブの色設定&lt;/li&gt;
&lt;li&gt;新しい Quick Add Item 体験&lt;/li&gt;
&lt;li&gt;Web プロジェクトでの F5 ターゲットとしての統合ターミナル&lt;/li&gt;
&lt;li&gt;サインインの改善のための Windows Authentication Broker との統合&lt;/li&gt;
&lt;li&gt;SDK スタイルプロジェクトのためのインプロセス VSIX サポート&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="visual-studio-for-mac-17.4-is-now-available-visual-studio-blog"&gt;Visual Studio for Mac 17.4 is now available - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-17-4-is-now-available/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-17-4-is-now-available/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 for Mac v17.4 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースではドッキングウィンドウ、フォントや行間の設定のようなユーザーインターフェースの改善、デバッガーの UI の改善、MAUI や .NET 7 と C# 11 のサポートといったものが含まれている。&lt;/p&gt;
&lt;p&gt;また Visual Studio 2022 for Mac v17.5 Preview 1 も利用可能となり、ランタイムの .NET 7 への更新やフォントサポートの改善が行われていることが案内されている。&lt;/p&gt;
&lt;h3 id="announcing-ml.net-2.0.net-blog"&gt;Announcing ML.NET 2.0 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-ml-net-2-0/"&gt;https://devblogs.microsoft.com/dotnet/announcing-ml-net-2-0/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ML.NET 2.0 と新しいバージョンの Model Builder がリリースされた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Model Builder でのテキスト分類シナリオ&lt;/li&gt;
&lt;li&gt;センテンス類似性 API&lt;/li&gt;
&lt;li&gt;トークナイザーサポート&lt;/li&gt;
&lt;li&gt;AutoML 改善&lt;/li&gt;
&lt;li&gt;Model Builder の高度な設定&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="whats-new-in-orleans-7.0.net-blog"&gt;What's new in Orleans 7.0 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/whats-new-in-orleans-7/"&gt;https://devblogs.microsoft.com/dotnet/whats-new-in-orleans-7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Orleans 7.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;Orleans チームは .NET チームの一部となり、.NET 7 と共に改善を進めた結果150%以上のパフォーマンス改善が持たされたとのこと。記事ではパフォーマンスの改善について、開発エクスペリエンスの向上について、Grain と Stream の識別の簡素化についてなどを紹介している。&lt;/p&gt;
&lt;h3 id="net-conf-2022-youtube"&gt;.NET Conf 2022 - YouTube&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PLdo4fOcmZ0oVlqu_V8EXUDDnPsYwemxjn"&gt;https://www.youtube.com/playlist?list=PLdo4fOcmZ0oVlqu_V8EXUDDnPsYwemxjn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 のリリース発表を含む .NET Conf 2022 のセッションビデオのプレイリスト。&lt;/p&gt;
&lt;h3 id="net-information-disclosure-vulnerability-ghsa-8g2p-5pqh-5jmc-github-advisory-database"&gt;.NET Information Disclosure Vulnerability - GHSA-8g2p-5pqh-5jmc - GitHub Advisory Database&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/advisories/GHSA-8g2p-5pqh-5jmc"&gt;https://github.com/advisories/GHSA-8g2p-5pqh-5jmc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoft.Data.SqlClient の 1.1.3 以下と 2.0.0 から 2.1.1 以下、System.Data.SqlClient の 4.8.4 以下に情報漏洩の脆弱性が見つかった。&lt;/p&gt;
&lt;p&gt;高負荷時にタイムアウトが発生した際に、非同期で実行されたクエリーに誤った結果を返してしまうことがあるという脆弱性がある。&lt;/p&gt;
&lt;p&gt;Microsoft.Data.SqlClient の 1.1.4 または 2.1.2、System.Data.SqlClient の 4.8.5 で修正されており、当該パッケージを利用している場合には更新が必要となる。&lt;/p&gt;
&lt;h3 id="net-framework-november-2022-security-and-quality-rollup-updates.net-blog"&gt;.NET Framework November 2022 Security and Quality Rollup Updates - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-framework-november-2022-security-and-quality-rollup-updates/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-framework-november-2022-security-and-quality-rollup-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework の2022年11月のセキュリティーと品質累積アップデートがリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは Microsoft.Data.SqlClient に関する脆弱性 (上記) の修正と WPF とランタイムに関するいくつかの不具合が修正されている。&lt;/p&gt;
&lt;h3 id="net-november-2022-updates.net-6.0.11-and.net-core-3.1.31.net-blog"&gt;.NET November 2022 Updates – .NET 6.0.11 and .NET Core 3.1.31 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/november-2022-updates/"&gt;https://devblogs.microsoft.com/dotnet/november-2022-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6.0.11 と .NET Core 3.1.31 がリリースされた。&lt;/p&gt;
&lt;p&gt;いくつかの不具合や改善が含まれている。また、記事では .NET Core 3.1 が今年の12月13日にサポート終了 (EOL) を迎えるため、.NET 6 へのアップデートをあらためて推奨している。&lt;/p&gt;
&lt;h3 id="release-2.2.0-mysql-netmysqlconnector"&gt;Release 2.2.0 · mysql-net/MySqlConnector&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/mysql-net/MySqlConnector/releases/tag/2.2.0"&gt;https://github.com/mysql-net/MySqlConnector/releases/tag/2.2.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Async MySqlConnector 2.2.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは .NET 7 のサポートと .NET 4.5 のサポート削除、その他いくつかの改善が含まれている。&lt;/p&gt;
&lt;h3 id="cake-v3.0.0-released"&gt;Cake v3.0.0 released&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://cakebuildnet.medium.com/cake-v3-0-0-released-b5555129a0f5"&gt;https://cakebuildnet.medium.com/cake-v3-0-0-released-b5555129a0f5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Cake v3.0.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは .NET 7 と C# 11 のサポート、&lt;code&gt;TaskOf&amp;lt;T&amp;gt;&lt;/code&gt;、マルチターゲットサポート、ビルドプロバイダーの改善、アドインが依存する Cake.Core のバージョンを 3.0 推奨するように、その他いくつかの改善と修正が行われている。&lt;/p&gt;
&lt;!-- https://twitter.com/cakebuildnet/status/1590129909187645441?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Cake v3.0.0 released - .NET 7 &amp;amp; C# 11 support, TaskOf&amp;lt;T&amp;gt;, Multiple target support, Improved build providers, and more🎉&lt;a href="https://t.co/LdsIidL9TK"&gt;https://t.co/LdsIidL9TK&lt;/a&gt;&lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/devops?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#devops&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/csharp?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#csharp&lt;/a&gt;&lt;/p&gt;&amp;mdash; Cake Build (&amp;#64;cakebuildnet) &lt;a href="https://twitter.com/cakebuildnet/status/1590129909187645441?ref_src=twsrc%5Etfw"&gt;November 8, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="nuget-central-package-management-comes-to-jetbrains-rider-the.net-tools-blog"&gt;NuGet Central Package Management Comes To JetBrains Rider | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/11/07/nuget-central-package-management-comes-to-jetbrains-rider/"&gt;https://blog.jetbrains.com/dotnet/2022/11/07/nuget-central-package-management-comes-to-jetbrains-rider/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider で NuGet の Central Package Management をサポートするというアナウンス。&lt;/p&gt;
&lt;p&gt;現在 Rider 2022.3 EAP と NuGet 6.2 以降をサポートする SDK があることで試すことができる。記事ではその設定方法と Central Package Management でのいくつかの Tips を紹介している。&lt;/p&gt;
&lt;h3 id="windows-community-toolkit-labs-experiments-are-here-ifdef-windows"&gt;Windows Community Toolkit Labs Experiments are Here! - #ifdef Windows&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/ifdef-windows/windows-community-toolkit-labs-experiments-are-here/"&gt;https://devblogs.microsoft.com/ifdef-windows/windows-community-toolkit-labs-experiments-are-here/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows Community Toolkit Labs についての記事。&lt;/p&gt;
&lt;p&gt;Windows Community Toolkit Labs は Windows Community Toolkit に含まれる前の試験的な実装のライブラリー。記事では Rive プレイヤーや設定カードと設定エキスパンダーといったコントロール、WCT Labs の使用方法について紹介している。&lt;/p&gt;
&lt;h3 id="release-v7.0.0-npgsqlnpgsql"&gt;Release v7.0.0 · npgsql/npgsql&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/npgsql/npgsql/releases/tag/v7.0.0"&gt;https://github.com/npgsql/npgsql/releases/tag/v7.0.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Npgsql 7.0.0 がリリースされた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DbDataSource を実装する NpgsqlDataSource&lt;/li&gt;
&lt;li&gt;Microsoft.Extensions.Logging によるロギングの改善&lt;/li&gt;
&lt;li&gt;論理レプリケーションプロトコル version 3 のサポート&lt;/li&gt;
&lt;li&gt;いくつかの破壊的変更&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="generally-available-azure-static-web-apps-now-fully-supports.net-7-azure-updates-microsoft-azure"&gt;Generally available: Azure Static Web Apps now fully supports .NET 7 | Azure updates | Microsoft Azure&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://azure.microsoft.com/en-us/updates/generally-available-azure-static-web-apps-now-fully-supports-net-7/"&gt;https://azure.microsoft.com/en-us/updates/generally-available-azure-static-web-apps-now-fully-supports-net-7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure Static Web Apps で .NET 7 がサポートされた。&lt;/p&gt;
&lt;p&gt;これにより .NET 7 Blazor WebAssembly アプリケーションをデプロイすることや .NET 7 による Azure Functions のビルドなどが可能となった。&lt;/p&gt;
&lt;h3 id="announcing-the.net-7-for-azure-functions-isolated-worker-process-is-generally-available-microsoft-community-hub"&gt;Announcing the .NET 7 for Azure functions isolated worker process is generally available - Microsoft Community Hub&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://techcommunity.microsoft.com/t5/apps-on-azure-blog/announcing-the-net-7-for-azure-functions-isolated-worker-process/ba-p/3671398"&gt;https://techcommunity.microsoft.com/t5/apps-on-azure-blog/announcing-the-net-7-for-azure-functions-isolated-worker-process/ba-p/3671398&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure Functions の 分離ワーカープロセスで .NET 7 がサポートされた。&lt;/p&gt;
&lt;h3 id="net-7-ga-available-on-app-service-azure-app-service"&gt;.NET 7 GA available on App Service - Azure App Service&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://azure.github.io/AppService/2022/11/08/dotnet7_ga.html"&gt;https://azure.github.io/AppService/2022/11/08/dotnet7_ga.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure App Service で .NET 7 がサポートされた。&lt;/p&gt;
&lt;h3 id="jetbrains.net-days-gamedev-day-online-2022-session-recordings-available-the.net-tools-blog"&gt;JetBrains .NET Days + GameDev Day Online 2022 – Session Recordings Available | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/11/10/dotnet-days-gamedev-day-online-2022-recordings/"&gt;https://blog.jetbrains.com/dotnet/2022/11/10/dotnet-days-gamedev-day-online-2022-recordings/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;10月下旬に行われた JetBrains による .NET とゲーム開発のオンラインイベントのセッション録画が公開となった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLQ176FUIyIUbSS1HBVrqEyNHpfSh166KW"&gt;JetBrains .NET Days Online 2022 - YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLQ176FUIyIUbWpW83t8IUGojnBaTDbmr4"&gt;JetBrains GameDev Day Online 2022 - YouTube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="c-advent-calendar-2022-qiita"&gt;C#のカレンダー | Advent Calendar 2022 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/advent-calendar/2022/csharplang"&gt;https://qiita.com/advent-calendar/2022/csharplang&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Qiita での2022年の C# Advent Calendar。&lt;/p&gt;
&lt;h3 id="net-sdk-visual-studio-tech.guitarrapc.com"&gt;新しいバージョンの .NET SDK と Visual Studio の更新 - tech.guitarrapc.cóm&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://tech.guitarrapc.com/entry/2022/11/10/004625"&gt;https://tech.guitarrapc.com/entry/2022/11/10/004625&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio を更新した場合の .NET SDK の取り扱いについての記事。&lt;/p&gt;
&lt;h3 id="net-7-wpf-linux-tech.guitarrapc.com"&gt;.NET 7 で WPF を Linux ビルドする - tech.guitarrapc.cóm&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://tech.guitarrapc.com/entry/2022/11/11/031555"&gt;https://tech.guitarrapc.com/entry/2022/11/11/031555&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Linux 環境で .NET 7 SDK を使用して WPF アプリケーションをビルドすることについての記事。&lt;/p&gt;
&lt;h3 id="visual-studio-2022-17.4-microsoft.codeanalysis.analyzers"&gt;Visual Studio 2022 17.4 以降で Microsoft.CodeAnalysis.Analyzers の警告が出る&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/mayuki/articles/c4728ae9cdef8e"&gt;https://zenn.dev/mayuki/articles/c4728ae9cdef8e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.4 以降で Microsoft.CodeAnalysis.Analyzers の警告が表示される問題の原因と対処方法。&lt;/p&gt;
&lt;h3 id="how-to-use-dall-e-api-with-c.net"&gt;How to Use DALL-E API With C#.NET&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://betterprogramming.pub/create-a-text-to-image-generator-using-dall-e-api-in-c-net-7df58d940e79"&gt;https://betterprogramming.pub/create-a-text-to-image-generator-using-dall-e-api-in-c-net-7df58d940e79&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;画像生成の DALL-E の API を .NET から呼び出してみるという記事。&lt;/p&gt;
&lt;h3 id="build-a-stock-update-notification-bot-for-microsoft-teams-using-c-and-teams-toolkit-for-visual-studio"&gt;Build a stock update notification bot for Microsoft Teams using C# and Teams Toolkit for Visual Studio&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/microsoft365/build-a-stock-update-notification-bot-for-microsoft-teams-using-c-and-teams-toolkit-for-visual-studio-mfl"&gt;https://dev.to/microsoft365/build-a-stock-update-notification-bot-for-microsoft-teams-using-c-and-teams-toolkit-for-visual-studio-mfl&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Teams Toolkit for Visual Studio を使用して株式アップデート情報を通知するボットを C# で実装する手順の記事。&lt;/p&gt;
&lt;h3 id="redis-as-a-database-with-redis-om"&gt;Redis as a Database with Redis OM&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;marius.munteann/redis-as-a-database-with-redis-om-2601a48b5c04"&gt;https://medium.com/&amp;#64;marius.munteann/redis-as-a-database-with-redis-om-2601a48b5c04&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Redis OM を使用して Redis をデータベースのように扱う方法についての記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/redis/redis-om-dotnet"&gt;redis/redis-om-dotnet: Object mapping, and more, for Redis and .NET&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asp.net-core-web-api-qiita"&gt;ASP.NET Core Web APIのバージョン管理 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/gushwell/items/663538393baef926c4c4"&gt;https://qiita.com/gushwell/items/663538393baef926c4c4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoft.AspNetCore.Mvc.Versioning を使用して API のバージョニング (例: /v1/api, /v2/api など) を行う方法についての記事。&lt;/p&gt;
&lt;h3 id="aws-lambda.net-core-3.1.net-6-qiita"&gt;AWS Lambdaで.NET Core 3.1から.NET 6に移行したときにやったこと - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/kaz-matsubara/items/7c3284dd6b38fe4489fb"&gt;https://qiita.com/kaz-matsubara/items/7c3284dd6b38fe4489fb&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AWS Lambda 向けの .NET Core 3.1 アプリケーションを .NET 6 に移行する際に行ったことをまとめた記事。&lt;/p&gt;
&lt;h3 id="whats-new-in.net-7-for-authentication-and-authorization"&gt;What's New in .NET 7 for Authentication and Authorization&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://auth0.com/blog/whats-new-in-dotnet-7-for-authentication-and-authorization/"&gt;https://auth0.com/blog/whats-new-in-dotnet-7-for-authentication-and-authorization/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 での認証と認可に関する変更と新機能についてまとめて紹介している記事。&lt;/p&gt;
&lt;h3 id="avoid-webdeploy-locking-errors-to-iis-with-shadow-copy-for-asp.net-core-apps"&gt;Avoid WebDeploy Locking Errors to IIS with Shadow Copy for ASP.NET Core Apps&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://weblog.west-wind.com/posts/2022/Nov/07/Avoid-WebDeploy-Locking-Errors-to-IIS-with-Shadow-Copy-for-ASPNET-Core-Apps"&gt;https://weblog.west-wind.com/posts/2022/Nov/07/Avoid-WebDeploy-Locking-Errors-to-IIS-with-Shadow-Copy-for-ASPNET-Core-Apps&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;IIS で動作する ASP.NET Core アプリケーションを WebDeploy でデプロイする際にファイルロックのエラーが発生する問題を回避する方法についての記事。&lt;/p&gt;
&lt;p&gt;記事では .NET 6 以降実験的に利用可能となったシャドウコピーを有効にする方法と WebDeploy の方法について解説している。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="mk3008sqmodel-select-query-builder"&gt;mk3008/SqModel: Select query builder&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/mk3008/SqModel"&gt;https://github.com/mk3008/SqModel&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SQL 文をパースし、加工したりして再構築するライブラリー。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/mkmonaka/articles/2e70c3c2354b45"&gt;C#でSQL文を再構築（解析・加工）するライブラリを公開しました&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;p&gt;.NET の公式サイトがリデザインされたという話。&lt;/p&gt;
&lt;!-- https://twitter.com/davidpine7/status/1589819551977701377?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;💜 Wow, I&amp;#39;m loving the redesigned &lt;a href="https://t.co/3tITGtOex3"&gt;https://t.co/3tITGtOex3&lt;/a&gt; site! It&amp;#39;s absolutely BEAUTIFUL 🤩 &lt;br&gt;&lt;br&gt;Congrats on that &lt;a href="https://twitter.com/mairacw?ref_src=twsrc%5Etfw"&gt;&amp;#64;mairacw&lt;/a&gt;, it&amp;#39;s awesome! Also, I&amp;#39;m seeing .NET 7 &lt;a href="https://twitter.com/nuget?ref_src=twsrc%5Etfw"&gt;&amp;#64;nuget&lt;/a&gt; packages. &lt;br&gt;&lt;br&gt;🔥 &lt;a href="https://twitter.com/hashtag/dotNETConf?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotNETConf&lt;/a&gt;  &lt;a href="https://twitter.com/hashtag/developerCommunity?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#developerCommunity&lt;/a&gt; &lt;a href="https://t.co/kAXgVGGFOE"&gt;pic.twitter.com/kAXgVGGFOE&lt;/a&gt;&lt;/p&gt;&amp;mdash; David Pine 🇺🇦 (&amp;#64;davidpine7) &lt;a href="https://twitter.com/davidpine7/status/1589819551977701377?ref_src=twsrc%5Etfw"&gt;November 8, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;なお&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="ja" dir="ltr"&gt;.NET のサイトがリニューアルして最近っぽくなってるけど、残念感が凄い・・・ &lt;a href="https://t.co/bAbT5JdO3n"&gt;pic.twitter.com/bAbT5JdO3n&lt;/a&gt;&lt;/p&gt;&amp;mdash; Tatsuro Shibamura (&amp;#64;shibayan) &lt;a href="https://twitter.com/shibayan/status/1589880989043810306?ref_src=twsrc%5Etfw"&gt;November 8, 2022&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;.NET でグリーンスレッドの実験的実装で Kestrel が動いているという話。&lt;/p&gt;
&lt;!-- https://twitter.com/davidfowl/status/1589859605508943873?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Got the .NET green thread (virtual thread/goroutine) experiment running with Kestrel. This stuff is hard to show but this call stack made me very happy 😅 &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://t.co/4Xy8kHGiHU"&gt;pic.twitter.com/4Xy8kHGiHU&lt;/a&gt;&lt;/p&gt;&amp;mdash; David Fowler 🇧🇧🇺🇸 (&amp;#64;davidfowl) &lt;a href="https://twitter.com/davidfowl/status/1589859605508943873?ref_src=twsrc%5Etfw"&gt;November 8, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Paint​.NET v5.0 を .NET 7 に移行するのは WinForms の nullable アノテーションで幾つかコンパイルエラーがあったものの5分でできたという話。&lt;/p&gt;
&lt;!-- https://twitter.com/rickbrewpdn/status/1590059027945631744?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Paint​.NET v5.0 is on .NET 7! Total conversion time was about 5 minutes. Had some compile errors because WinForms added some new nullable annotations. Also I got a (non-spam) phone call in the middle of it all. &lt;a href="https://t.co/1jCMJA4uBD"&gt;pic.twitter.com/1jCMJA4uBD&lt;/a&gt;&lt;/p&gt;&amp;mdash; Rick Brewster (&amp;#64;rickbrewPDN) &lt;a href="https://twitter.com/rickbrewPDN/status/1590059027945631744?ref_src=twsrc%5Etfw"&gt;November 8, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;ASP.NET Core のフレームワークのスタック図。&lt;/p&gt;
&lt;!-- https://twitter.com/davidfowl/status/1590165613506613248?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;I love this slide &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/aspnetcore?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#aspnetcore&lt;/a&gt; &lt;a href="https://t.co/TLDMAdwmAD"&gt;pic.twitter.com/TLDMAdwmAD&lt;/a&gt;&lt;/p&gt;&amp;mdash; David Fowler 🇧🇧🇺🇸 (&amp;#64;davidfowl) &lt;a href="https://twitter.com/davidfowl/status/1590165613506613248?ref_src=twsrc%5Etfw"&gt;November 9, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Akka.NET を .NET 7 (PGO 有効) でベンチマークを取った速くなったという話。&lt;/p&gt;
&lt;!-- https://twitter.com/aaronontheweb/status/1591474543339634691?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Yesterday, I observed a 33% out-of-the-box performance improvement in &lt;a href="https://twitter.com/AkkaDotNET?ref_src=twsrc%5Etfw"&gt;&amp;#64;AkkaDotNET&lt;/a&gt; &amp;#39;s single remote connection end-to-end benchmark using .NET 7.0 with PGO enabled. Very impressive.&lt;br&gt;&lt;br&gt;Today I ran our in-memory benchmarks  w/ PGO and the results are even more interesting! &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://t.co/ekmCYllddy"&gt;https://t.co/ekmCYllddy&lt;/a&gt;&lt;/p&gt;&amp;mdash; Aaron Stannard (&amp;#64;Aaronontheweb) &lt;a href="https://twitter.com/Aaronontheweb/status/1591474543339634691?ref_src=twsrc%5Etfw"&gt;November 12, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;!-- https://twitter.com/aaronontheweb/status/1591092844827222017?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Some .NET 7.0 performance benchmarks for &lt;a href="https://twitter.com/AkkaDotNET?ref_src=twsrc%5Etfw"&gt;&amp;#64;AkkaDotNET&lt;/a&gt; over a single Akka.Remote connection&lt;br&gt;&lt;br&gt;looks like things are ~10% faster on .NET 7. Take every free lunch you can find ;) &lt;a href="https://t.co/JEVyD5xx8C"&gt;pic.twitter.com/JEVyD5xx8C&lt;/a&gt;&lt;/p&gt;&amp;mdash; Aaron Stannard (&amp;#64;Aaronontheweb) &lt;a href="https://twitter.com/Aaronontheweb/status/1591092844827222017?ref_src=twsrc%5Etfw"&gt;November 11, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;.NET 7 で文字列を特定の区切り文字で結合するのに一番速いのは何かという話。&lt;/p&gt;
&lt;!-- https://twitter.com/DaveCallanIE/status/1591799079306203136 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Simple string concatenation in .NET 7 👇🏻&lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/csharp?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#csharp&lt;/a&gt; &lt;a href="https://t.co/wy5BVIEmnN"&gt;pic.twitter.com/wy5BVIEmnN&lt;/a&gt;&lt;/p&gt;&amp;mdash; Dave Callan (&amp;#64;DaveCallanIE) &lt;a href="https://twitter.com/DaveCallanIE/status/1591799079306203136?ref_src=twsrc%5Etfw"&gt;November 13, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2022/11/07/updates</id>
		<title>2022-11-07: Performance improvements in .NET 7, Uno Platform 4.6, WCF Upgrade Assistant</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2022/11/07/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2022-11-07T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="agenda.net-conf-2022"&gt;Agenda - .NET Conf 2022&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.dotnetconf.net/agenda"&gt;https://www.dotnetconf.net/agenda&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;11/9 (日本時間) から 11/11 まで行われる .NET Conf 2022 のセッションテーブル。&lt;/p&gt;
&lt;h3 id="net-conf-2022-recap-event-microsoft-japan-community-event-tour-series-microsoft-events"&gt;.NET Conf 2022 Recap Event 東京 ~ Microsoft Japan Community Event Tour Series - Microsoft Events&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://msevents.microsoft.com/event?id=3219140458"&gt;https://msevents.microsoft.com/event?id=3219140458&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;12/6 (火) に行われる .NET Conf 2022 のおさらいイベントが東京で開催される。会場は日本マイクロソフト本社、参加費は無料となっている。&lt;/p&gt;
&lt;p&gt;「午後の部」と「夜の部」の二部構成で「午後の部」では .NET Conf 2022 で発表された新しい技術の紹介や解説、「夜の部」では懇親会や Ask the Speaker、コミュニティーによるライトニングトークなどが予定されている。&lt;/p&gt;
&lt;h3 id="create-your.net-portfolio-in-the.net-conf-student-zone.net-blog"&gt;Create your .NET portfolio in the .NET Conf student zone - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-conf-2022-student-zone/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-conf-2022-student-zone/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Conf で学生向けのライブストリーミングイベント .NET Student Zone を行うという紹介。&lt;/p&gt;
&lt;p&gt;.NET Student Zone では .NET に関することを学べるセッションが配信される。またそれに合わせて .NET Conf Student Zone Cloud Skills Challenge というチャレンジも開催され、参加者(学生)の中から3名に SWAG (景品) が当たるキャンペーンも実施される。&lt;/p&gt;
&lt;h3 id="performance-improvements-in-asp.net-core-7.net-blog"&gt;Performance improvements in ASP.NET Core 7 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/performance-improvements-in-aspnet-core-7/"&gt;https://devblogs.microsoft.com/dotnet/performance-improvements-in-aspnet-core-7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 の ASP.NET Core のパフォーマンス改善についての解説記事。&lt;/p&gt;
&lt;p&gt;ベンチマークと共に様々な性能向上について解説している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;サーバー全般
&lt;ul&gt;
&lt;li&gt;メモリープールパーティショニング&lt;/li&gt;
&lt;li&gt;Windows の IO プールをマネージド実装を利用するよう切り替え&lt;/li&gt;
&lt;li&gt;接続クローズ時の例外の削減&lt;/li&gt;
&lt;li&gt;PoolingAsyncValueTaskMethodBuilder の適用の拡大&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HTTP/2
&lt;ul&gt;
&lt;li&gt;ロック競合の削減&lt;/li&gt;
&lt;li&gt;デフォルトウィンドウサイズの拡大&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HTTP/3
&lt;ul&gt;
&lt;li&gt;QPack 処理の改善&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;その他
&lt;ul&gt;
&lt;li&gt;SignalR&lt;/li&gt;
&lt;li&gt;認証&lt;/li&gt;
&lt;li&gt;HttpResult&lt;/li&gt;
&lt;li&gt;IndexOfAny&lt;/li&gt;
&lt;li&gt;フィルター&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="net-7-performance-improvements-in.net-maui.net-blog"&gt;.NET 7 Performance Improvements in .NET MAUI - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-7-performance-improvements-in-dotnet-maui/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-7-performance-improvements-in-dotnet-maui/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 での .NET MAUI のパフォーマンス改善について解説記事。&lt;/p&gt;
&lt;p&gt;起動時間とアプリケーションサイズ、スクロール時のパフォーマンスなどが改善されていることを掘り下げている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;スクロールとレイアウトのパフォーマンス改善
&lt;ul&gt;
&lt;li&gt;LOLs/秒&lt;/li&gt;
&lt;li&gt;&lt;code&gt;View.Context&lt;/code&gt; の繰り返し呼び出しを避ける&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CollectionView&lt;/code&gt; 内での &lt;code&gt;View.Context&lt;/code&gt; 呼び出しを避ける&lt;/li&gt;
&lt;li&gt;レイアウト中の JNI 呼び出しを削減&lt;/li&gt;
&lt;li&gt;RTL とダークモードの値をキャッシュする&lt;/li&gt;
&lt;li&gt;レイアウト中の &lt;code&gt;IView[]&lt;/code&gt; 生成を避ける&lt;/li&gt;
&lt;li&gt;RTL レイアウト計算をプラットフォームにゆだねる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CollectionView&lt;/code&gt; のその他注意事項&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;起動時のパフォーマンス改善
&lt;ul&gt;
&lt;li&gt;Android NDK コンパイラーフラグ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DateTimeOffset.Now&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ColorStateList(int[][],int[])&lt;/code&gt; を避ける&lt;/li&gt;
&lt;li&gt;.NET MAUI の AOT プロファイルの改善&lt;/li&gt;
&lt;li&gt;Java 相互運用でのより良い文字列比較&lt;/li&gt;
&lt;li&gt;XAML コンパイルの改善&lt;/li&gt;
&lt;li&gt;Windows 上での ReadyToRun のデフォルト有効化&lt;/li&gt;
&lt;li&gt;macOS 上でのデュアルアーキテクチャーのデフォルト有効化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RegexOptions.Compiled&lt;/code&gt; についての注意&lt;/li&gt;
&lt;li&gt;Mono のインタープリターの改善&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;アプリケーションサイズの改善
&lt;ul&gt;
&lt;li&gt;Android の DebuggerSupport トリマー値の修正&lt;/li&gt;
&lt;li&gt;R8 Java Code Shrinker 改善&lt;/li&gt;
&lt;li&gt;Kotlin 関連ファイルの除外機能&lt;/li&gt;
&lt;li&gt;Generics の AOT 出力の改善&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ツールとドキュメント
&lt;ul&gt;
&lt;li&gt;.NET MAUI アプリケーションのプロファイリング&lt;/li&gt;
&lt;li&gt;起動時間の計測&lt;/li&gt;
&lt;li&gt;アプリケーションサイズのレポートツール&lt;/li&gt;
&lt;li&gt;試験的または高度な設定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="uno-platform-4.6-hello.net-7"&gt;Uno Platform 4.6: Hello .NET 7!&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://platform.uno/blog/uno-platform-4-6-hello-net-7/"&gt;https://platform.uno/blog/uno-platform-4-6-hello-net-7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Uno Platform 4.6 で .NET 7 に対応するというアナウンス。&lt;/p&gt;
&lt;p&gt;記事では Uno Platform 4.6 での改善点として .NET 7 および Visual Studio 17.4 のサポート、ライブラリーリソース、SVG サポート、Android 13 サポート、WebAssembly Bootstrap 7.0、ASP.NET Core ホスティングプロジェクトについて紹介している。&lt;/p&gt;
&lt;h3 id="bring-wcf-apps-to-the-latest.net-with-corewcf-and-upgrade-assistant.net-blog"&gt;Bring WCF apps to the latest .NET with CoreWCF and Upgrade Assistant - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/migration-wcf-to-corewcf-upgrade-assistant/"&gt;https://devblogs.microsoft.com/dotnet/migration-wcf-to-corewcf-upgrade-assistant/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework の WCF プロジェクトを CoreWCF へと移行するためのアップグレードアシスタントを紹介する記事。&lt;/p&gt;
&lt;p&gt;記事ではサンプルプロジェクトを元に、ツールのインストールと実行、実行される移行処理についてを説明している。自動アップグレードで非サポートのものとして Web ベースや .svc ファイルを使用したサービス、XML を使用した動作構成、NetTcpBinding または HTTP ベース以外のバインディングといったものがあるとのこと。&lt;/p&gt;
&lt;h3 id="announcing.net-community-toolkit-v8.1.0-preview-1.net-blog"&gt;Announcing .NET Community Toolkit v8.1.0 Preview 1 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-dotnet-community-toolkit-v810-preview-1/"&gt;https://devblogs.microsoft.com/dotnet/announcing-dotnet-community-toolkit-v810-preview-1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Community Toolkit v8.1.0 Preview 1 のアナウンス。&lt;/p&gt;
&lt;p&gt;MVVM Toolkit のソースジェネレーターで ObservableProperty に対するカスタム属性のサポートやソースジェネレーター自体の最適化、&lt;code&gt;IObservable&amp;lt;T&amp;gt;&lt;/code&gt; メッセンジャー拡張、.NET 7 と C# 11 の対応 (&lt;code&gt;Ref&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;NullableRef&amp;lt;T&amp;gt;&lt;/code&gt; など)、その他様々な改善が含まれている。&lt;/p&gt;
&lt;h3 id="net-interactive-notebooks-is-now-polyglot-notebooks.net-blog"&gt;.NET Interactive Notebooks is now Polyglot Notebooks! - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-interactive-notebooks-is-now-polyglot-notebooks/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-interactive-notebooks-is-now-polyglot-notebooks/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Interactive Notebooks が Polyglot Notebooks に名称変更したというアナウンス。&lt;/p&gt;
&lt;p&gt;Visual Studio Code 上で利用できる拡張である .NET Interactive Notebooks が Polyglot Notebooks に名称変更された。&lt;/p&gt;
&lt;p&gt;.NET Interactive Notebooks は .NET 以外の言語のサポートが増えてきたことで名前が適切ではなくなってきたため、Polyglot Notebooks に名称変更することとなった。ただしエンジンは引き続き .NET Interactive であり、Visual Studio Code 拡張の名前が変更されただけであるとのこと。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="neue-cc-memorypack.net-7c-11"&gt;neue cc - MemoryPackにみる .NET 7/C# 11世代のシリアライザー最適化技法&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://neue.cc/2022/11/04_memorypack.html"&gt;https://neue.cc/2022/11/04_memorypack.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;バイナリーシリアライザーの MemoryPack の実装を元に .NET 7 / C# 11 世代でのシリアライザーの最適化テクニックについて解説している記事。&lt;/p&gt;
&lt;h3 id="skiasharp-hatched-fills-with-skshader"&gt;SkiaSharp: Hatched fills with SKShader&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://bclehmann.github.io/2022/11/05/HatchingWithSKShader.html"&gt;https://bclehmann.github.io/2022/11/05/HatchingWithSKShader.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SkiaSharp で SKShader を使用してハッチングの塗りつぶしを行う方法についての記事。&lt;/p&gt;
&lt;h3 id="skiasharp-unmasking-with-skcolorfilter"&gt;SkiaSharp: Unmasking with SKColorFilter&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://bclehmann.github.io/2022/11/06/UnmaskingWithSKColorFilter.html"&gt;https://bclehmann.github.io/2022/11/06/UnmaskingWithSKColorFilter.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SkiaSharp で SKColorFilter を使用して色を変更する方法についての記事。&lt;/p&gt;
&lt;h3 id="switch-tenants-in-an-asp.net-core-app-using-azure-ad-with-multi-tenants"&gt;Switch tenants in an ASP.NET Core app using Azure AD with multi tenants&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://damienbod.com/2022/10/31/switch-tenants-in-an-asp-net-core-app-using-azure-ad-with-multi-tenants/"&gt;https://damienbod.com/2022/10/31/switch-tenants-in-an-asp-net-core-app-using-azure-ad-with-multi-tenants/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure AD のマルチテナントアプリケーションとなる ASP.NET Core アプリケーションでテナントを切り替える方法についての記事。&lt;/p&gt;
&lt;h3 id="c.netvector-classif.then.else-qiita"&gt;C# .NETのVector classで条件分岐(if..then..else) - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/C5D5E5/items/dd9da77e24752ff50cec"&gt;https://qiita.com/C5D5E5/items/dd9da77e24752ff50cec&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Vector を利用した際の条件分岐を行うための &lt;code&gt;Vector.ConditionalSelect&lt;/code&gt; についての記事。&lt;/p&gt;
&lt;h3 id="dotnet.net-performance-tracing-for-winui-uno-and-maui-applications-nicks.net-travels"&gt;Dotnet (.NET) Performance Tracing for WinUI, Uno and Maui Applications - Nick's .NET Travels&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://nicksnettravels.builttoroam.com/dotnet-trace/"&gt;https://nicksnettravels.builttoroam.com/dotnet-trace/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;dotnet-trace と dotnet-dsrouter を使用して WinUI や Uno Platform, MAUI のアプリケーションのトレースを取得する方法についての記事。&lt;/p&gt;
&lt;h3 id="async-mutex-davids-blog"&gt;Async Mutex | David’s Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dfederm.com/async-mutex/"&gt;https://dfederm.com/async-mutex/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Mutex をラップして async/await で利用できるようにする AsyncMutex を実装するという記事。&lt;/p&gt;
&lt;h3 id="cbyte16-qiita"&gt;[C#]デバッグ時とかに欲しくなるbyte配列の16進ダンプ - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/amutou/items/6a0954c7bf190127f3ef"&gt;https://qiita.com/amutou/items/6a0954c7bf190127f3ef&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;od コマンドやバイナリエディターのような16進数ダンプを出力するコード。&lt;/p&gt;
&lt;h3 id="c-qiita"&gt;C#の基本的な数値型同士の計算って何型になるんだっけ？ - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/full_deviation/items/a1e01871c33673fd66af"&gt;https://qiita.com/full_deviation/items/a1e01871c33673fd66af&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# の数値型 (sbyte,byte,ushort,short,uint,int...) をそれぞれ組み合わせて計算したときに結果の型を調べたという記事。&lt;/p&gt;
&lt;h3 id="containerized-blazor-microsoft-ponders-new-client-side-hosting-visual-studio-magazine"&gt;Containerized Blazor: Microsoft Ponders New Client-Side Hosting -- Visual Studio Magazine&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://visualstudiomagazine.com/articles/2022/11/02/blazor-docker.aspx"&gt;https://visualstudiomagazine.com/articles/2022/11/02/blazor-docker.aspx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor WebAssembly をコンテナー化できるようにすることを検討している話についての記事。Blazor Server と異なり静的にビルドされ ASP.NET Core は不要となるため、手法として ASP.NET Core と同じ必要がない。&lt;/p&gt;
&lt;h3 id="net-annotated-monthly-november-2022-the.net-tools-blog"&gt;.NET Annotated Monthly | November 2022 | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/11/02/net-annotated-monthly-november-2022/"&gt;https://blog.jetbrains.com/dotnet/2022/11/02/net-annotated-monthly-november-2022/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JetBrains による .NET 関連の情報まとめ 2022年11月号。&lt;/p&gt;
&lt;h3 id="visual-studio-visual-studio-visual-studio-microsoft-ignite"&gt;Visual Studio が Visual Studio を使って Visual Studio を構築する方法 - Microsoft Ignite - セッション カタログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ignite.microsoft.com/ja-JP/sessions/bafdbcbc-f9e3-49ed-ac0b-fd1dd8cbc155?source=sessions"&gt;https://ignite.microsoft.com/ja-JP/sessions/bafdbcbc-f9e3-49ed-ac0b-fd1dd8cbc155?source=sessions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio を開発しているチームが Visual Studio を開発するために行っていることについてのセッション。&lt;/p&gt;
&lt;p&gt;Visual Studio のような超巨大なプロジェクトを効率的にビルドするための内部の仕組み、自動テストやパフォーマンスのトラッキングなど。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="autumnsky1010soundmaker-you-can-do-the-following-content-with-this-library-and-make-the-sound-of-chiptune-export-sound-to-a-file-of-wave-format"&gt;AutumnSky1010/SoundMaker: You can do The following content with this library and make the sound of chiptune export sound to a file of wave format.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/AutumnSky1010/SoundMaker"&gt;https://github.com/AutumnSky1010/SoundMaker&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;チップチューン的な音楽を生成/出力するライブラリー。&lt;/p&gt;
&lt;!-- https://twitter.com/dtb_autumnsky/status/1588806133275594752?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="ja" dir="ltr"&gt;C#で動画のような音を生成できるライブラリ「SoundMaker」を公開しました。&lt;br&gt;(まだ碌にテストが出来てないのでバージョンは0.2.0です。)&lt;br&gt;&lt;br&gt;リプ欄のNuGet・GitHubからインストール出来るのでぜひ使ってみてください！ &lt;a href="https://t.co/5LnRMCXQFh"&gt;pic.twitter.com/5LnRMCXQFh&lt;/a&gt;&lt;/p&gt;&amp;mdash; 🍠秋空🍠 (&amp;#64;DTB_AutumnSky) &lt;a href="https://twitter.com/DTB_AutumnSky/status/1588806133275594752?ref_src=twsrc%5Etfw"&gt;November 5, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="tompazoureknaturalsort.extension-extension-method-for-stringcomparison-that-adds-support-for-natural-sorting-e.g.abc1-abc2-abc10-instead-of-abc1-abc10-abc2"&gt;tompazourek/NaturalSort.Extension: 🔀 Extension method for StringComparison that adds support for natural sorting (e.g. &amp;quot;abc1&amp;quot;, &amp;quot;abc2&amp;quot;, &amp;quot;abc10&amp;quot; instead of &amp;quot;abc1&amp;quot;, &amp;quot;abc10&amp;quot;, &amp;quot;abc2&amp;quot;).&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/tompazourek/NaturalSort.Extension"&gt;https://github.com/tompazourek/NaturalSort.Extension&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;エクスプローラーのファイル名のソートで使用されている自然順ソートを実現するための拡張ライブラリー。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/kaorumori/items/712f87a25a3930068c3e"&gt;Blazor WebAssemblyでファイル名を自然順でソート - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="devloopedavatar-a-modern-compile-time-generated-interceptionproxy-library"&gt;devlooped/avatar: A modern compile-time generated interception/proxy library&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/devlooped/avatar"&gt;https://github.com/devlooped/avatar&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Source Generator を使用することでコンパイル時にプロキシーを生成するインターセプトライブラリー。 Source Generator を使用していることで IL の Emit (動的コード生成) が行えない環境でも動作することが特徴。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/mngreen/items/35e45714b1e7540ffd62"&gt;Moqで利用されているAvatarライブラリについて少しだけ調べてみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="jinekconsolonia-a-cross-platform-ui-framework-for.net"&gt;jinek/Consolonia: A cross-platform UI framework for .NET.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/jinek/Consolonia"&gt;https://github.com/jinek/Consolonia&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Avalonia UI のコンソール上での実装。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=yyVuvjYycCo"&gt;Avalonia UI app running in text console using Consolonia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="pierre3plantumlclassdiagramgenerator-this-is-a-generator-to-create-a-class-diagram-of-plantuml-from-the-c-source-code"&gt;pierre3/PlantUmlClassDiagramGenerator: This is a generator to create a class-diagram of PlantUML from the C# source code.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/pierre3/PlantUmlClassDiagramGenerator"&gt;https://github.com/pierre3/PlantUmlClassDiagramGenerator&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# のソースコードを元に PlantUML のクラス図を生成するツール。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/pierusan2010/items/fbaa8fdf9b7f998bf56f"&gt;C#のソースコードからPlantUMLのクラス図を生成するツール PlantUmlClassDiagramGenerator 1.3.0 をリリースしました！ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="ststeigerpdfsharpcore-port-of-the-pdfsharp-library-to.net-core-largely-removed-gdi-only-missing-getfontdata-which-can-be-replaced-with-freetype2"&gt;ststeiger/PdfSharpCore: Port of the PdfSharp library to .NET Core - largely removed GDI+ (only missing GetFontData - which can be replaced with freetype2)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/ststeiger/PdfSharpCore"&gt;https://github.com/ststeiger/PdfSharpCore&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PDF を生成するライブラリー。PdfSharp を .NET Core 向けに改修されたもの。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/masmgr/articles/f8557ade054b71"&gt;PdfSharpCore の紹介&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="optimize-xxhash3-by-xoofx-pull-request-77756-dotnetruntime"&gt;Optimize XxHash3 by xoofx · Pull Request #77756 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/77756"&gt;https://github.com/dotnet/runtime/pull/77756&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;XxHash3 を高速化したという PR。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/runtime/pull/77881"&gt;Optimize XxHash3 on ARM platform by xoofx · Pull Request #77881 · dotnet/runtime&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="add-xxhash128-by-xoofx-pull-request-77944-dotnetruntime"&gt;Add XxHash128 by xoofx · Pull Request #77944 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/77944"&gt;https://github.com/dotnet/runtime/pull/77944&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;XxHash128 の実装を追加する提案と PR&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/runtime/issues/77885"&gt;[API Proposal]: XxHash128 · Issue #77885 · dotnet/runtime&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2022/11/01/updates</id>
		<title>2022-11-01: AWS App Runner now supports .NET managed runtime, AWS Toolkit for .NET Refactoring, Copy Nice</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2022/11/01/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2022-11-01T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="aws-app-runner-launches-support-for-php-go.net-and-ruby-managed-runtimes"&gt;AWS App Runner launches support for PHP, Go, .Net, and Ruby managed runtimes&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/jp/about-aws/whats-new/2022/10/aws-app-runner-support-php-go-dot-net-ruby-managed-runtimes/"&gt;https://aws.amazon.com/jp/about-aws/whats-new/2022/10/aws-app-runner-support-php-go-dot-net-ruby-managed-runtimes/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AWS App Runner で .NET を含む複数の言語のランタイムがサポートされた。&lt;/p&gt;
&lt;p&gt;AWS App Runner はイメージまたは設定ファイルをソースコード共に用意することでビルド、デプロイ、実行まで簡単に行える仕組み。ランタイムとして .NET 6 がサポートされ、例として以下のような設定ファイルで ASP.NET Core アプリケーションをビルド、デプロイできるとのこと。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;version: 1.0
runtime: dotnet6
build:
  commands:
    build:
      – dotnet publish -c Release -o out
run:
  command: dotnet out/HelloWorldDotNetApp.dll
  network:
    port: 5000
    env: APP_PORT
  env:
    – name: ASPNETCORE_URLS
      value: &amp;quot;http://*:5000&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="introducing-aws-toolkit-for.net-refactoring-a-new-visual-studio-extension"&gt;Introducing AWS Toolkit for .NET Refactoring, a new Visual Studio extension&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/jp/about-aws/whats-new/2022/10/aws-toolkit-net-refactoring-visual-studio-extension/"&gt;https://aws.amazon.com/jp/about-aws/whats-new/2022/10/aws-toolkit-net-refactoring-visual-studio-extension/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AWS Toolkit for .NET Refactoring という Visual Studio 拡張がリリースされた。&lt;/p&gt;
&lt;p&gt;これはレガシー .NET Framework アプリケーションをクラウド環境向けに更新するための機能を提供する拡張。.NET Core/.NET に移行するにあたっての依存関係や API 利用をスキャンや、IIS の web.config から Linux 環境で動作させるためのコードの変更、 AWS へのデプロイ支援といったことを行える。&lt;/p&gt;
&lt;h3 id="copy-with-proper-indentation-visual-studio-blog"&gt;Copy with proper indentation - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/copy-with-proper-indentation/"&gt;https://devblogs.microsoft.com/visualstudio/copy-with-proper-indentation/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;コードのインデントを正しく維持した形でコピーできるようにする実験的な Visual Studio 拡張について紹介している記事。&lt;/p&gt;
&lt;p&gt;この拡張を利用すると、ネストしたコードブロックの途中のブロックをコピーした場合でもインデントを整えて維持された状態にできる。メッセージングアプリやブログなどにペーストする際に一行目のみインデントが失われ、それ以降がインデントされすぎているといった状態を防ぐことができる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=MadsKristensen.CopyNice"&gt;Copy Nice - Visual Studio Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="net-framework-october-2022-cumulative-update-preview.net-blog"&gt;.NET Framework October 2022 Cumulative Update Preview - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-framework-october-2022-cumulative-update-preview/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-framework-october-2022-cumulative-update-preview/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework の2022年10月の累積アップデートのプレビューがリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは WPF をはじめとしたいくつかの品質改善の更新が含まれている。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="making-animationevent-safe-for-the-coreclr-garbage-collector-unity-blog"&gt;Making AnimationEvent safe for the CoreCLR garbage collector | Unity Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.unity.com/technology/making-animationevent-safe-for-the-coreclr-garbage-collector"&gt;https://blog.unity.com/technology/making-animationevent-safe-for-the-coreclr-garbage-collector&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unity を CoreCLR で動作させる上で AnimationEvent を CoreCLR の GC と共に統合して動かすために行ったことについての記事。&lt;/p&gt;
&lt;p&gt;速度のために Blittable にしたこと、GCHandle を再利用すること、それらのコードが Mono, IL2CPP で CoreCLR と同等の速度で動くように修正したことなど。&lt;/p&gt;
&lt;h3 id="visual-studio-2022-tech.guitarrapc.com"&gt;Visual Studio 2022 で使っている拡張機能 - tech.guitarrapc.cóm&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://tech.guitarrapc.com/entry/2022/10/27/023608"&gt;https://tech.guitarrapc.com/entry/2022/10/27/023608&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 で利用できる拡張機能の紹介記事。エディターからビルド状況の表示など様々な拡張を紹介している。&lt;/p&gt;
&lt;h3 id="blazor-wasm-c-c"&gt;Blazor Wasm 実動作デモはじめました | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2022/10/blazorwasmdemo/"&gt;https://ufcpp.net/blog/2022/10/blazorwasmdemo/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ソートについての記事で動作デモを Blazor WebAssembly で作り直したという記事。&lt;/p&gt;
&lt;h3 id="net-16-jsakamoto"&gt;複数の .NET プロジェクトに対し、共通の1箇所で同じバージョン情報を設定する、6 つの方法 | &amp;#64;jsakamoto&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devadjust.exblog.jp/29404286/"&gt;https://devadjust.exblog.jp/29404286/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ソリューションなどに含まれる複数の .NET プロジェクトのバージョン情報などを一か所から共通して設定できるようにする方法を紹介している記事。&lt;/p&gt;
&lt;p&gt;共通して設定する方法として記事では6つの手法を紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Directory.Build.props&lt;/li&gt;
&lt;li&gt;props の Import&lt;/li&gt;
&lt;li&gt;AssemblyFileVersion を含むソースコードのリンク&lt;/li&gt;
&lt;li&gt;ファイルからの読み込み&lt;/li&gt;
&lt;li&gt;dotnet build の引数による指定&lt;/li&gt;
&lt;li&gt;環境変数によるビルド時の指定&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="opensearch.netga"&gt;OpenSearchの.NETクライアントがGAになったので使ってみる&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/shimat/articles/d2ae99acaf022f"&gt;https://zenn.dev/shimat/articles/d2ae99acaf022f&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Amazon OpenSearch (旧 Elasticsearch Service) の .NET クライアントライブラリーについての記事。&lt;/p&gt;
&lt;p&gt;Elasticsearch のクライアントライブラリーは v7.14 以降 OpenSearch に接続できなくなったため、OpenSearch によるクライアントライブラリーが待たれていた。今回リリースされた .NET 版クライアントライブラリーの使用方法と使用感について。&lt;/p&gt;
&lt;h3 id="build-your-own-oauth-2.0-server-and-openid-connect-provider-in-asp.net-core-6.0"&gt;Build your own OAuth 2.0 Server and OpenId Connect Provider in ASP.NET Core 6.0&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/mohammedahmed/build-your-own-oauth-20-server-and-openid-connect-provider-in-aspnet-core-60-1g1m"&gt;https://dev.to/mohammedahmed/build-your-own-oauth-20-server-and-openid-connect-provider-in-aspnet-core-60-1g1m&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 の ASP.NET Core で OAuth 2.0 サーバーと OpenId Connect Provider を独自実装してみるという記事。&lt;/p&gt;
&lt;h3 id="managed-pointers-span-ref-struct-c11-ref-fields-and-the-scoped-keyword-ndepend"&gt;Managed pointers, Span, ref struct, C#11 ref fields and the scoped keyword - NDepend&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.ndepend.com/managed-pointers-span-ref-struct-c11-ref-fields-and-the-scoped-keyword"&gt;https://blog.ndepend.com/managed-pointers-span-ref-struct-c11-ref-fields-and-the-scoped-keyword&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ポインターから Span、ref 構造体とフィールドといったものをおさらいして解説している記事。&lt;/p&gt;
&lt;h3 id="automatically-version-and-release.net-application"&gt;Automatically version and release .Net Application&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.antosubash.com/posts/automatic-version-and-release"&gt;https://blog.antosubash.com/posts/automatic-version-and-release&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Versionize というツールを使用して GitHub Actions で自動バージョニングを行ってリリースする方法についての記事。&lt;/p&gt;
&lt;p&gt;記事では Husky.Net を使用して Git の pre-commit フックでコメントの lint を行う方法についても触れている。&lt;/p&gt;
&lt;h3 id="learning-series-get-started-with-github-in-visual-studio"&gt;Learning Series: Get started with GitHub in Visual Studio&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/learn-github-in-visual-studio-learning-series/"&gt;https://devblogs.microsoft.com/visualstudio/learn-github-in-visual-studio-learning-series/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio を使用して GitHub を学ぶメールシリーズの紹介記事。&lt;/p&gt;
&lt;h3 id="net7-linq-qiita"&gt;.NET7 で LINQ の集計関数がめっちゃ高速化した話 (あるいは、ベクトル化の難しさ) - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/Kujiro/items/dc90366325fffcd3675d"&gt;https://qiita.com/Kujiro/items/dc90366325fffcd3675d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 で高速化した LINQ の集計関数 (Sum, Max, Average) の具体的な実装について解説している記事。&lt;/p&gt;
&lt;h3 id="project-volterra-windows-2023"&gt;Project Volterra 改め Windows 開発キット 2023 を購入した - しばやん雑記&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.shibayan.jp/entry/20221027/1666807751"&gt;https://blog.shibayan.jp/entry/20221027/1666807751&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows 開発キット 2023 のレビュー記事。&lt;/p&gt;
&lt;h3 id="windows-2023-developersio"&gt;Windows 開発キット 2023を買ってみた | DevelopersIO&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.classmethod.jp/articles/try-windows-dev-kit-2023-project-volterra/"&gt;https://dev.classmethod.jp/articles/try-windows-dev-kit-2023-project-volterra/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows 開発キット 2023 のレビュー記事。PowerShell や AWS のツールといったものの動作についても触れている。&lt;/p&gt;
&lt;h3 id="fighting-with-nullable-reference-types-in-razor-pages"&gt;Fighting with nullable reference types in Razor Pages&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/fighting-with-nullable-reference-types-in-razor-pages/"&gt;https://andrewlock.net/fighting-with-nullable-reference-types-in-razor-pages/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Razor ページで null 参照型との付き合い方についての記事。&lt;/p&gt;
&lt;p&gt;Razor は外部から値が差し込まれるといった都合もあり、警告や不適切な握りつぶしでは NullReferenceException の可能性を高めてしまうためどのようにするのがよいのかという話。記事では C# 11 の &lt;code&gt;required&lt;/code&gt; を使用することである程度緩和できる案などを紹介している。&lt;/p&gt;
&lt;h3 id="csqlite"&gt;C#でSQLiteをマルチスレッドで利用する&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/kn64872/articles/90ae674d5332a7"&gt;https://zenn.dev/kn64872/articles/90ae674d5332a7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;System.Data.SQLite をマルチスレッドで利用する際の挙動について調べている記事。&lt;/p&gt;
&lt;h3 id="slaying-zombie-no-repro-crashes-with-infer.net-blog"&gt;Slaying Zombie ‘No Repro’ Crashes with Infer# - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/slaying-zombie-no-repo-crashes-with-infersharp/"&gt;https://devblogs.microsoft.com/dotnet/slaying-zombie-no-repo-crashes-with-infersharp/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;静的なコード分析を行う Infer# を使用して、見つけにくいリソースリークやセキュリティー問題を検出する紹介記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/microsoft/infersharp"&gt;microsoft/infersharp: Infer# is an interprocedural and scalable static code analyzer for C#. Via the capabilities of Facebook's Infer, this tool detects null dereferences, resource leaks, and thread-safety violations. It also performs taint flow tracking to detect critical security vulnerabilities like SQL injections.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="corvus-dotnetcorvus.uritemplates-low-allocation-uri-template-parsing-and-resolution-supporting-the-tavis.uritemplates-api"&gt;corvus-dotnet/Corvus.UriTemplates: Low-allocation URI Template parsing and resolution, supporting the Tavis.UriTemplates API.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/corvus-dotnet/corvus.uritemplates"&gt;https://github.com/corvus-dotnet/corvus.uritemplates&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;URI Template (RFC 6570) を取り扱うアロケーションの少ないライブラリー。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://endjin.com/blog/2022/10/high-performance-csharp-uritemplates"&gt;High Performance UriTemplate resolution with low-allocation C# | endjin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/mairacw/status/1585789100879069185?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;It&amp;#39;s official now! &lt;a href="https://twitter.com/dotnet?ref_src=twsrc%5Etfw"&gt;&amp;#64;dotnet&lt;/a&gt; Current releases have been renamed to Standard Term Support and the changes are live on the site&lt;a href="https://t.co/d25vW0BnlG"&gt;https://t.co/d25vW0BnlG&lt;/a&gt; &lt;a href="https://t.co/oz3g5oVQIc"&gt;pic.twitter.com/oz3g5oVQIc&lt;/a&gt;&lt;/p&gt;&amp;mdash; Maira Wenzel (&amp;#64;mairacw) &lt;a href="https://twitter.com/mairacw/status/1585789100879069185?ref_src=twsrc%5Etfw"&gt;October 28, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;.NET の Current リリース (1年サポート) は Standard Term Support という名前に変わったという話。&lt;/p&gt;
&lt;!-- https://twitter.com/egorbo/status/1585714639806947331?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;.NET8 now instruments hot AOT code (re-jits it) and in general instruments only hot code - we already can see nice benefits from that (RPS🔼, Start-time🔽)🙃&lt;a href="https://t.co/WvS3IkZDxI"&gt;https://t.co/WvS3IkZDxI&lt;/a&gt; (merged) &lt;a href="https://t.co/mknbA6sPPl"&gt;pic.twitter.com/mknbA6sPPl&lt;/a&gt;&lt;/p&gt;&amp;mdash; Egor Bogatov (&amp;#64;EgorBo) &lt;a href="https://twitter.com/EgorBo/status/1585714639806947331?ref_src=twsrc%5Etfw"&gt;October 27, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;.NET 8 ではホットな AOT コードを計測(再 JIT)し、計測もホットなコードのみを対象とするようにしたことで RPS と起動時間が改善するという話。&lt;/p&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2022/10/25/updates</id>
		<title>2022-10-25: .NET MAUI support for .NET 7 RC 2, OpenSilver 1.1, Windows Dev Kit 2023</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2022/10/25/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2022-10-25T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="announcing.net-maui-support-for.net-7-release-candidate-2.net-blog"&gt;Announcing .NET MAUI support for .NET 7 Release Candidate 2 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-maui-rc2/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-maui-rc2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 RC 2 向けの .NET MAUI サポートがリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは iOS 16 に対応した Xcode 14 のサポートが行われており、Visual Studio 17.4 Preview 4 で利用可能となる。またこのバージョンはプロダクション環境での利用がサポート対象となる。&lt;/p&gt;
&lt;h3 id="opensilver-1.1-released"&gt;OpenSilver 1.1 Released!&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.opensilver.net/announcements/opensilver1-1.aspx"&gt;https://www.opensilver.net/announcements/opensilver1-1.aspx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Silverlight の互換を目指す、WebAssembly 上で動作するオープンソース実装 OpenSilver の 1.1 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは100を超える Silverlight の機能のサポートの追加、Telerik UI をはじめとした様々なサードパーティーライブラリーのサポートの追加、最大3倍のパフォーマンス向上といった改善が行われている。&lt;/p&gt;
&lt;p&gt;また、来年初頭にリリースを予定している 2.0 では VB.NET のサポートを追加するとのこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://visualstudiomagazine.com/articles/2022/10/17/opensilver-1-1.aspx"&gt;OpenSilver Gets Closer to Open Source Parity with Long-Dead Microsoft Silverlight -- Visual Studio Magazine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.infoq.com/news/2022/10/opensilver-1-1-silverlight/"&gt;OpenSilver 1.1 Promises 99% of Code Compatibility with Silverlight Applications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="available-today-windows-dev-kit-2023-aka-project-volterra-windows-developer-blog"&gt;Available today: Windows Dev Kit 2023 aka Project Volterra - Windows Developer Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blogs.windows.com/windowsdeveloper/2022/10/24/available-today-windows-dev-kit-2023-aka-project-volterra/"&gt;https://blogs.windows.com/windowsdeveloper/2022/10/24/available-today-windows-dev-kit-2023-aka-project-volterra/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Arm アーキテクチャー向け Windows の開発キットが Windows Dev Kit 2023 という名前で販売開始となった。&lt;/p&gt;
&lt;p&gt;Windows Dev Kit 2023 は Build 2022 で Project Volterra という名前で発表された開発者向けのキットで、Snapdragon 8cx Gen 3 と 32GB の RAM、512GB の NVMe SSD を備えている。&lt;/p&gt;
&lt;p&gt;オーストラリア、カナダ、中国、フランス、ドイツ、日本、英国、米国で今日から注文が可能となっている。日本では 99,880円 (税込) となる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.microsoft.com/ja-jp/d/windows-%E9%96%8B%E7%99%BA%E3%82%AD%E3%83%83%E3%83%88-2023/94k0p67w7581"&gt;Windows 開発キット 2023 を購入 Arm アプリ開発者向けデスクトップ PC - Microsoft Store&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="release-diagnostics-release-v6.0.351802-dotnetdiagnostics"&gt;Release Diagnostics Release - v6.0.351802 · dotnet/diagnostics&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/diagnostics/releases/tag/v6.0.351802"&gt;https://github.com/dotnet/diagnostics/releases/tag/v6.0.351802&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;dotnet-{dump,monitor,trace} (Diagnostics) の 6.0.351802 がリリースされた。&lt;/p&gt;
&lt;p&gt;dotnet-dump では Linux/macOS での SOS コマンドの拡充をはじめ、いくつかの不具合と改善が含まれている。dotnet-monitor と dotnet-trace では不具合の修正が行われている。&lt;/p&gt;
&lt;h3 id="support-reminder-for-older-versions-of-visual-studio-visual-studio-blog"&gt;Support reminder for older versions of Visual Studio - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/support-reminder-for-older-versions-of-visual-studio/"&gt;https://devblogs.microsoft.com/visualstudio/support-reminder-for-older-versions-of-visual-studio/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;サポートが終了となる Visual Studio についてのリマインダー。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Visual Studio 2012: 2023年1月10日に延長サポートが終了&lt;/li&gt;
&lt;li&gt;Visual Studio 2013: 2024年4月9日に延長サポートが終了&lt;/li&gt;
&lt;li&gt;Visual Studio 2015: 2025年10月14日に延長サポートが終了&lt;/li&gt;
&lt;li&gt;Visual Studio 2017: 2022年4月12日にメインストリームサポートが終了、2027年4月13日に延長サポートが終了 (15.9)&lt;/li&gt;
&lt;li&gt;Visual Studio 2019 (16.9): 2022年10月11日にサポートが終了。引き続き 2019 のサポートを受ける場合には 16.11 への移行が推奨される&lt;/li&gt;
&lt;li&gt;Visual Studio 2019 Preview: 更新終了のため、リリースチャンネルへの移行または 2022 の Preview チャンネルへの移行が推奨される&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;記事では管理者による更新プログラムの管理やサポート終了となったコンポーネントの削除方法といった点についても触れている。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="hello.net-atomicjar"&gt;Hello .NET! - AtomicJar&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.atomicjar.com/2022/10/hello-dotnet/"&gt;https://www.atomicjar.com/2022/10/hello-dotnet/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Testcontainers の .NET 向け実装のメンテナー (AtomicJar 社の人) の Testcontainers の紹介。&lt;/p&gt;
&lt;p&gt;Testcontainers の .NET 向けの実装を行った経緯やリポジトリの成長、xUnit.net との連携例といったものを紹介している。&lt;/p&gt;
&lt;h3 id="dotnet-monitor-enabling-a-diagnostics-sidecar-in-aks"&gt;dotnet-monitor: Enabling a diagnostics sidecar in AKS&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.poppastring.com/blog/dotnetmonitor-enabling-a-diagnostics-sidecar-in-aks"&gt;https://www.poppastring.com/blog/dotnetmonitor-enabling-a-diagnostics-sidecar-in-aks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;dotnet-monitor を AKS (Azure Kubernetes Serivce) の Pod のサイドカーとして動かす方法についての動画。&lt;/p&gt;
&lt;h3 id="net-systems-programming-learned-the-hard-way.pptx"&gt;NET Systems Programming Learned the Hard Way.pptx&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.slideshare.net/petabridge/net-systems-programming-learned-the-hard-waypptx"&gt;https://www.slideshare.net/petabridge/net-systems-programming-learned-the-hard-waypptx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Akka.NET 開発者による .NET の低レベルなコンポーネントに関しての解説スライド。&lt;/p&gt;
&lt;!-- https://twitter.com/aaronontheweb/status/1582836426185486336?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;.NET Systems Programming Learned the Hard Way&lt;br&gt;&lt;br&gt;Recording: &lt;a href="https://t.co/WvVzjp98Ip"&gt;https://t.co/WvVzjp98Ip&lt;/a&gt;&lt;br&gt;Slides: &lt;a href="https://t.co/34ohASQ69w"&gt;https://t.co/34ohASQ69w&lt;/a&gt;&lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/performance?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#performance&lt;/a&gt;&lt;/p&gt;&amp;mdash; Aaron Stannard (&amp;#64;Aaronontheweb) &lt;a href="https://twitter.com/Aaronontheweb/status/1582836426185486336?ref_src=twsrc%5Etfw"&gt;October 19, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="cmemorypack1-spacekey.dev"&gt;[C#]MemoryPackを使ってみたい1 - 基本 | spacekey.dev&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://spacekey.dev/memorypack-1"&gt;https://spacekey.dev/memorypack-1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;バイナリーシリアライザー MemoryPack を使用してみるというシリーズ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://spacekey.dev/memorypack-2"&gt;[C#]MemoryPackを使ってみたい2 - ASP.NET Coreで使う | spacekey.dev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://spacekey.dev/memorypack-3"&gt;[C#]MemoryPackを使ってみたい3 - TypeScriptで使う | spacekey.dev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://spacekey.dev/memorypack-4"&gt;[C#]MemoryPackを使ってみたい4 - MemoryPackableの色々 | spacekey.dev&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="clr-events-go-for-the-nettrace-file-format"&gt;CLR events: go for the nettrace file format!&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://chnasarre.medium.com/clr-events-go-for-the-nettrace-file-format-6b363364c2a3"&gt;https://chnasarre.medium.com/clr-events-go-for-the-nettrace-file-format-6b363364c2a3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CLR から診断イベントを nettrace バイナリーストリームで受け取る方法についての記事。&lt;/p&gt;
&lt;h3 id="wslriderasp.net-kubernetes-1"&gt;WSLとRiderによるASP.NET / Kubernetes開発 (1)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/dynamitecoolguy/articles/4530e1134bcbac"&gt;https://zenn.dev/dynamitecoolguy/articles/4530e1134bcbac&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WSL 上で Rider を実行して ASP.NET Core と Kubernetes を使用した開発をする準備手順を紹介している記事。&lt;/p&gt;
&lt;h3 id="implementing-graphql-api-gateway-in.net-6-hot-chocolate-v12-redis"&gt;Implementing GraphQL API Gateway in .NET 6 + Hot Chocolate v12 + Redis&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dianper.medium.com/implementing-graphql-api-gateway-in-net-6-hot-chocolate-v12-redis-1a0ac12f340c"&gt;https://dianper.medium.com/implementing-graphql-api-gateway-in-net-6-hot-chocolate-v12-redis-1a0ac12f340c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;フェデレーションスキーマを使用した GraphQL API ゲートウェイを .NET 6 と Hot Chocolate v12、Redis を使用して実現する方法についての記事。&lt;/p&gt;
&lt;h3 id="write-your-own-code-coverage-script-for-your.net-projects"&gt;Write your own code coverage script for your .NET projects&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;stefanacimovicMEng/write-your-own-code-coverage-script-for-your-net-projects-e26b621aa0dc"&gt;https://medium.com/&amp;#64;stefanacimovicMEng/write-your-own-code-coverage-script-for-your-net-projects-e26b621aa0dc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET プロジェクトのコードカバレッジを取得してレポートを出力する一連の手順を自作する方法についての記事。&lt;/p&gt;
&lt;h3 id="custom-scaffold-templates-in-asp.net-core-dotnetthoughts"&gt;Custom scaffold templates in ASP.NET Core | dotnetthoughts&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dotnetthoughts.net/custom-scaffold-templates-in-asp-net-core/"&gt;https://dotnetthoughts.net/custom-scaffold-templates-in-asp-net-core/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core MVC のテンプレートをプロジェクトレベルでカスタマイズする方法についての記事。&lt;/p&gt;
&lt;h3 id="samapi-gatewayawsserverlessfunction-qiita"&gt;SAMを使ってAPI-Gateway経由でAWS&lt;span&gt;Serverless&lt;/span&gt;Functionから画像をダウンロードする - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/karuakun/items/e61007864364ab164774"&gt;https://qiita.com/karuakun/items/e61007864364ab164774&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AWS Serverless Application Model を使用してアプリケーションを作成した場合に API Gateway を介したバイナリデータを取り扱う方法についての記事。&lt;/p&gt;
&lt;h3 id="visual-studio-2022-themes-you-should-try-free-themes"&gt;10 Visual Studio 2022 Themes you Should Try (Free Themes!)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.dotnetsafer.com/best-visual-studio-2022-themes/"&gt;https://blog.dotnetsafer.com/best-visual-studio-2022-themes/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 に追加できる10種類のテーマの紹介。&lt;/p&gt;
&lt;h3 id="build-your-own-reverse-proxy"&gt;Build your Own Reverse proxy&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://satish1v.medium.com/build-your-own-reverse-proxy-bf3232e7e5f3"&gt;https://satish1v.medium.com/build-your-own-reverse-proxy-bf3232e7e5f3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;YARP で簡単にリバースプロキシーサーバーを作ってみるという記事。&lt;/p&gt;
&lt;h3 id="error-handling-in-the-field-ayende-rahien"&gt;Error handling in the field - Ayende &amp;#64; Rahien&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ayende.com/blog/198369-A/error-handling-in-the-field"&gt;https://ayende.com/blog/198369-A/error-handling-in-the-field&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;アプリケーションのクラッシュレポート(UnhandledException)を収集するようにしていたところ、最近の Windows Update で WPF の挙動が変わって内部でエラーが出るようになったので無視するようにしたものの微妙という話。&lt;/p&gt;
&lt;h3 id="how-to-send-emails-at-scale-in.net-with-the-azure-communication-service"&gt;How to send emails at scale in .NET with the Azure Communication Service&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/medialesson/how-to-send-emails-at-scale-in-net-with-the-azure-communication-service-14565d84147f"&gt;https://medium.com/medialesson/how-to-send-emails-at-scale-in-net-with-the-azure-communication-service-14565d84147f&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure Communication Service を使用してメール送信を行う方法についての記事。&lt;/p&gt;
&lt;h3 id="net-7-asp.net-core-blazor"&gt;.NET 7 の ASP.NET Core Blazor の新機能試してみよう&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/okazuki/articles/blazor-dotnet7"&gt;https://zenn.dev/okazuki/articles/blazor-dotnet7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 の ASP.NET Core Blazor の新機能を紹介している記事。&lt;/p&gt;
&lt;p&gt;WebAssembly のローディング、bind の修飾子、仮想化の改善、ナビゲーションの改善について触れている。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="sergio0694polysharp-polysharp-provides-generated-source-only-polyfills-for-c-language-features-to-easily-use-all-runtime-agnostic-features-downlevel.add-a-reference-set-your-c-version-to-latest-and-have-fun"&gt;Sergio0694/PolySharp: PolySharp provides generated, source-only polyfills for C# language features, to easily use all runtime-agnostic features downlevel. Add a reference, set your C# version to latest and have fun! 🚀&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/Sergio0694/PolySharp"&gt;https://github.com/Sergio0694/PolySharp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# の言語機能として必要となる属性(&lt;code&gt;CallerArgumentExpression&lt;/code&gt;等)や構造体(&lt;code&gt;Range&lt;/code&gt;等)の型が含まれていないターゲットフレームワーク向けにソースジェネレーターで型を追加生成することで新しい言語機能を利用できるようにするという Polyfill。&lt;/p&gt;
&lt;!-- https://twitter.com/SergioPedri/status/1584482651271856128 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;New weekend project: PolySharp! It includes smart, source-generated polyfills for all C# language features: just reference it, enable C# 11, and enjoy all the new features downlevel, including on .NET Framework, UWP and more! Try it out! 🚀&lt;a href="https://twitter.com/hashtag/csharp?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#csharp&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt;&lt;a href="https://t.co/mPhXuJ8Ns0"&gt;https://t.co/mPhXuJ8Ns0&lt;/a&gt; &lt;a href="https://t.co/juZuMi91dv"&gt;pic.twitter.com/juZuMi91dv&lt;/a&gt;&lt;/p&gt;&amp;mdash; Sergio Pedri (&amp;#64;SergioPedri) &lt;a href="https://twitter.com/SergioPedri/status/1584482651271856128?ref_src=twsrc%5Etfw"&gt;October 24, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="xt0rteddotnet-startup-projects-a-dotnet-tool-to-manage-multiple-visual-studio-startup-projects-for-a-solution"&gt;xt0rted/dotnet-startup-projects: A dotnet tool to manage multiple Visual Studio startup projects for a solution&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/xt0rted/dotnet-startup-projects"&gt;https://github.com/xt0rted/dotnet-startup-projects&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ソリューションで起動する Visual Studio のバージョンを変更するツール。&lt;/p&gt;
&lt;!-- https://twitter.com/xt0rted/status/1581880780745109505?s=12&amp;t=nWJI9WhjD8PixDRVN--Rlw --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Just published a &lt;a href="https://twitter.com/dotnet?ref_src=twsrc%5Etfw"&gt;&amp;#64;dotnet&lt;/a&gt; tool to help manage solutions with multiple &lt;a href="https://twitter.com/VisualStudio?ref_src=twsrc%5Etfw"&gt;&amp;#64;VisualStudio&lt;/a&gt; startup projects.&lt;br&gt;&lt;br&gt;Add a property to each startup project, then run &amp;quot;startup-projects set --vs 2022&amp;quot; against the sln. It&amp;#39;ll create a new .suo file with the right settings.&lt;a href="https://t.co/tBybU6eyR1"&gt;https://t.co/tBybU6eyR1&lt;/a&gt;&lt;/p&gt;&amp;mdash; Brian Surowiec (&amp;#64;xt0rted) &lt;a href="https://twitter.com/xt0rted/status/1581880780745109505?ref_src=twsrc%5Etfw"&gt;October 17, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="networking-telemetry-in.net.net-microsoft-learn"&gt;Networking Telemetry in .NET - .NET | Microsoft Learn&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://learn.microsoft.com/en-us/dotnet/fundamentals/networking/networking-telemetry"&gt;https://learn.microsoft.com/en-us/dotnet/fundamentals/networking/networking-telemetry&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET のネットワーク関連のカウンターなどのテレメトリー情報についてまとめているドキュメント。&lt;/p&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/davidfowl/status/1582955638736695296?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;We&amp;#39;re working on making &lt;a href="https://t.co/4PmXMR5h75"&gt;https://t.co/4PmXMR5h75&lt;/a&gt; Core and EntityFramework work with trimming and ahead of time compilation (.NET NativeAOT). One of the big challenges is moving away from dynamic runtime code generation. Let&amp;#39;s talk about what that means👇🏾 &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/aspnetcore?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#aspnetcore&lt;/a&gt;&lt;/p&gt;&amp;mdash; David Fowler 🇧🇧🇺🇸 (&amp;#64;davidfowl) &lt;a href="https://twitter.com/davidfowl/status/1582955638736695296?ref_src=twsrc%5Etfw"&gt;October 20, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;ASP.NET Core と Entity Framework Core を NativeAOT に対応させるために取り組んでいるが、コード生成の課題についての話。&lt;/p&gt;
&lt;!-- https://twitter.com/xoofx/status/1582696587360624640?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="und" dir="ltr"&gt;TIL 😍 &lt;a href="https://t.co/q65eZqb8Za"&gt;https://t.co/q65eZqb8Za&lt;/a&gt; &lt;a href="https://t.co/2cSgDSs71n"&gt;pic.twitter.com/2cSgDSs71n&lt;/a&gt;&lt;/p&gt;&amp;mdash; Alexandre Mutel (&amp;#64;xoofx) &lt;a href="https://twitter.com/xoofx/status/1582696587360624640?ref_src=twsrc%5Etfw"&gt;October 19, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;ソリューションエクスプローラーの「すべてのファイルを表示」すると、SDK などで読み込んでいる targets や props 等を確認できるという小技。&lt;/p&gt;
&lt;!-- https://twitter.com/dsymetweets/status/1582438640143069184?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;On delivering a 3GB file via multiple nuget packages that stitch together on restore:&lt;br&gt;&lt;br&gt;&amp;quot;It&amp;#39;s the greatest hack of my life. The one I want written up in the great book of hacks that gets read in hack heaven. Alongside all the other times a large file hack has been played...  1/2&lt;/p&gt;&amp;mdash; Don Syme (&amp;#64;dsymetweets) &lt;a href="https://twitter.com/dsymetweets/status/1582438640143069184?ref_src=twsrc%5Etfw"&gt;October 18, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;&lt;a href="https://www.nuget.org/packages/libtorch-cuda-11.3-linux-x64#dependencies-body-tab"&gt;分割されたトータル 3GB の NuGet パッケージの話。&lt;/a&gt;&lt;/p&gt;
&lt;!-- https://twitter.com/jbevain/status/1583877491273650176?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;If there&amp;#39;s one thing I don&amp;#39;t like, it&amp;#39;s exceptions that are caught but are hiding another issue (or could be avoided in favor of a simpler check). The Mono debugging API make it incredibly easy to programmatically monitor your Unity Game/Editor: &lt;a href="https://t.co/K5yU8SDIcG"&gt;https://t.co/K5yU8SDIcG&lt;/a&gt; &lt;a href="https://t.co/AXTmbZ5XIB"&gt;pic.twitter.com/AXTmbZ5XIB&lt;/a&gt;&lt;/p&gt;&amp;mdash; Jb Evain (&amp;#64;jbevain) &lt;a href="https://twitter.com/jbevain/status/1583877491273650176?ref_src=twsrc%5Etfw"&gt;October 22, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="introduce-system.runtime.tieredpgo-knob-by-egorbo-pull-request-26350-dotnetsdk"&gt;Introduce System.Runtime.TieredPGO knob by EgorBo · Pull Request #26350 · dotnet/sdk&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/sdk/pull/26350"&gt;https://github.com/dotnet/sdk/pull/26350&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TieredPGO&lt;/code&gt; という環境変数や MSBuild プロパティで階層化 PGO を有効化できるオプションが .NET 7 で追加されたという PR。&lt;/p&gt;
&lt;h3 id="the-compiler-should-report-an-error-about-references-to-out-of-scope-stack-memory-generated-by-unscopedref-and-defensively-copied-struct.issue-64776-dotnetroslyn"&gt;The compiler should report an error about references to out-of-scope stack memory generated by &lt;code&gt;[UnscopedRef]&lt;/code&gt; and defensively copied struct. · Issue #64776 · dotnet/roslyn&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/roslyn/issues/64776"&gt;https://github.com/dotnet/roslyn/issues/64776&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;スタック上に防衛的コピーされた値の参照を返して本来できないはずのアクセスができてしまうコードが書けるというコンパイラーのバグ。&lt;/p&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
</feed>