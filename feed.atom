<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<id>/</id>
	<title>WeekRef.NET</title>
	<author>
		<name>Mayuki Sawatari</name>
	</author>
	<link rel="self" href="/" />
	<rights>Copyright © Mayuki Sawatari &lt;mayuki@misuzilla.org&gt;</rights>
	<updated>2024-02-02T10:41:44Z</updated>
	<logo>/img/logo.png</logo>
	<subtitle>.NET 関連の情報をほぼ週刊配信</subtitle>
	<entry>
		<id>/2024/02/02/updates</id>
		<title>2024-02-02: Microsoft Copilot with SignalR, Office's RTC migration to modern .NET, Uno Platform 5.1</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2024/02/02/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2024-02-02T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="building-ai-powered-microsoft-copilot-with-signalr-and-other-open-source-tools.net-blog"&gt;Building AI-powered Microsoft Copilot with SignalR and other open-source tools - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/building-ai-powered-bing-chat-with-signalr-and-other-open-source-tools/"&gt;https://devblogs.microsoft.com/dotnet/building-ai-powered-bing-chat-with-signalr-and-other-open-source-tools/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SignalR とその他オープンソースツールを使用して構築した Microsoft Copilot についての解説。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SignalR を使用した低レイテンシーな通信チャネルを確立&lt;/li&gt;
&lt;li&gt;アダプティブカードと Markdown を使用した UI の記述&lt;/li&gt;
&lt;li&gt;アプリケーションのフロー&lt;/li&gt;
&lt;li&gt;Deep dive: SignalR をどのように使用しているか&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Deep dive ではメッセージごとに SignalR の接続を使用している(再利用しない)理由や、すべてのメッセージを送信している理由、&lt;a href="https://github.com/microsoft/object-basin"&gt;object-basin&lt;/a&gt; を使用したオブジェクトの部分更新などについて解説している。&lt;/p&gt;
&lt;h3 id="microsoft-offices-rtc-real-time-channel-migration-to-modern.net.net-blog"&gt;Microsoft Office's RTC (Real-Time Channel) migration to modern .NET - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/office-rtc-dotnet-migration/"&gt;https://devblogs.microsoft.com/dotnet/office-rtc-dotnet-migration/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoft Office のリアルタイムチャンネル (RTC) をモダン .NET に移行したことについての事例解説。&lt;/p&gt;
&lt;p&gt;Office アプリケーションのリアルタイムコラボレーションで使用されている WebSocket (SignalR) ベースのサービスを .NET Framework 4.7.2 から .NET に移行した事例について解説している。&lt;/p&gt;
&lt;p&gt;移行した結果として「CPU の 30% の削減」「VM の原価の 30% 削減」「メモリーと GC 時間の 60% の削減」「主な API のレイテンシーの 50% 低下」といった効果があったとしている。&lt;/p&gt;
&lt;p&gt;移行には ASP.NET の HTTP モジュールとハンドラーのマイグレーション、ASP.NET SignalR と ASP.NET Core SignalR の互換性の担保といった課題がありそれぞれミドルウェアで対応したことや、移行後に発生した IIS の CPU 利用率が高い問題や SignalR Core の CPU 使用率が高い問題とそれらの対処について解説されている。&lt;/p&gt;
&lt;p&gt;そのほかイベントカウンターによるメトリックの追跡、プロダクションへのロールアウトの結果、今後の展望について書かれている。&lt;/p&gt;
&lt;h3 id="uno-platform-5.1-live-wizard-for-rider-vs-code-users-new-controls-perf-improvements-and-more"&gt;Uno Platform 5.1 : Live Wizard for Rider &amp;amp; VS Code users, New Controls, Perf improvements and more.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://platform.uno/blog/uno-platform-5-1/"&gt;https://platform.uno/blog/uno-platform-5-1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Uno Platform 5.1 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは Rider や Visual Studio Code ユーザー向けに新規プロジェクトを作成する &lt;code&gt;dotnet new&lt;/code&gt; コマンドを生成するウィザードが用意されたほか、TimePicker コントロールの導入やパフォーマンスの向上、.csproj のフットプリント削減、Uno Toolkit のアップデートと Uno Extensions の .NET 7 のサポートの削除などが含まれる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/unoplatform/uno/releases/tag/5.1.31"&gt;Release 5.1.31 · unoplatform/uno&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="introducing-the-mstest-runner-cli-visual-studio-more.net-blog"&gt;Introducing the MSTest Runner - CLI, Visual Studio, &amp;amp; More - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/introducing-ms-test-runner/"&gt;https://devblogs.microsoft.com/dotnet/introducing-ms-test-runner/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MSTest を実行する軽量なツール MSTest Runner のリリースと紹介。&lt;/p&gt;
&lt;p&gt;MSTest Runner は単体で実行可能な形にできることで、ランタイムの含まれていない環境でのテスト実行などが行いやすくなる、フットプリントを小さくできるといった利点があるとのこと。&lt;/p&gt;
&lt;h3 id="introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio-the-nuget-blog"&gt;Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio - The NuGet Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/"&gt;https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NuGet のバージョン競合を解決するためのツール NuGetSolver の紹介。&lt;/p&gt;
&lt;p&gt;NuGetSolver は Microsoft Research と共同で開発された Visual Studio の拡張機能で、NuGet の依存関係においてバージョン競合が発生している問題を自動で解決するというツール。&lt;/p&gt;
&lt;p&gt;記事では導入方法や使用上の注意と制約などについても触れられている。&lt;/p&gt;
&lt;h3 id="current-state-of-c-platform-support-in-godot-4.2"&gt;Current state of C# platform support in Godot 4.2&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://godotengine.org/article/platform-state-in-csharp-for-godot-4-2/"&gt;https://godotengine.org/article/platform-state-in-csharp-for-godot-4-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Godot 4.2 での C# プラットフォームサポートの現状について。&lt;/p&gt;
&lt;p&gt;サポート(各プラットフォーム向けのエクスポート)については下記の通りとなっている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Android 向けエクスポートは .NET 7 以降で Mono によるサポート&lt;/li&gt;
&lt;li&gt;iOS 向けエクスポート .NET 8 の実験的な NativeAOT によるサポート&lt;/li&gt;
&lt;li&gt;Web 向けのエクスポートは現時点では未サポート&lt;/li&gt;
&lt;li&gt;デスクトップ向けのエクスポートは Godot 4.0 からすべてサポート (.NET 7 以降であれば NativeAOT も含む)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="experimental2-windows-app-sdk-windows-apps"&gt;バージョン 1.5 実験 (1.5.0-experimental2) - Windows App SDK の実験的リリース チャネル - Windows apps&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://learn.microsoft.com/ja-jp/windows/apps/windows-app-sdk/experimental-channel#version-15-experimental-150-experimental2"&gt;https://learn.microsoft.com/ja-jp/windows/apps/windows-app-sdk/experimental-channel#version-15-experimental-150-experimental2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows App SDK 1.5.0-experimental2 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースではいくつかの不具合の修正と Map 関連をはじめとした新しい API の追加が行われている。&lt;/p&gt;
&lt;h3 id="release-stable-release-v5.1.5-dotnetsqlclient"&gt;Release Stable Release v5.1.5 · dotnet/SqlClient&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/SqlClient/releases/tag/v5.1.5"&gt;https://github.com/dotnet/SqlClient/releases/tag/v5.1.5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoft.Data.SqlClient v5.1.5 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースではいくつかの不具合が修正されている。&lt;/p&gt;
&lt;h3 id="rider-2024.1-roadmap-the.net-tools-blog"&gt;Rider 2024.1 Roadmap | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2024/01/24/rider-2024-1-roadmap/"&gt;https://blog.jetbrains.com/dotnet/2024/01/24/rider-2024-1-roadmap/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider 2024.1 のロードマップ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UX/UI&lt;/li&gt;
&lt;li&gt;デバッガーの改善
&lt;ul&gt;
&lt;li&gt;Blazor WASM アプリケーションの安定したデバッグ体験&lt;/li&gt;
&lt;li&gt;Blazor での Hot Reload&lt;/li&gt;
&lt;li&gt;ステップ実行時間とデータ収集のビジュアライザー&lt;/li&gt;
&lt;li&gt;インラインブレークポイント&lt;/li&gt;
&lt;li&gt;カーソルまで実行 (Run to cursor) inlay オプションの改修&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ゲーム開発
&lt;ul&gt;
&lt;li&gt;Unity&lt;/li&gt;
&lt;li&gt;Unreal Engine&lt;/li&gt;
&lt;li&gt;Godot&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Web 開発&lt;/li&gt;
&lt;li&gt;MAUI サポートの改善&lt;/li&gt;
&lt;li&gt;AI アシスタント&lt;/li&gt;
&lt;li&gt;スマートスペルチェッカー&lt;/li&gt;
&lt;li&gt;コンテナーとリモート環境でのユニットテストの実行&lt;/li&gt;
&lt;li&gt;Code With Me (ベータ)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="resharper-2024.1-roadmap-the.net-tools-blog"&gt;ReSharper 2024.1 Roadmap | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2024/01/24/resharper-2024-1-roadmap/"&gt;https://blog.jetbrains.com/dotnet/2024/01/24/resharper-2024-1-roadmap/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper 2024.1 のロードマップ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;予測デバッグモードのデフォルト化&lt;/li&gt;
&lt;li&gt;アウトオブプロセスのアップデート&lt;/li&gt;
&lt;li&gt;Web 開発&lt;/li&gt;
&lt;li&gt;コンテナーとリモート環境でのユニットテストの実行&lt;/li&gt;
&lt;li&gt;AI アシスタント&lt;/li&gt;
&lt;li&gt;その他のプラン&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="how-to-deploy.net-aspire-apps-to-azure-container-apps.net-blog"&gt;How to deploy .NET Aspire apps to Azure Container Apps - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/how-to-deploy-dotnet-aspire-apps-to-azure-container-apps/"&gt;https://devblogs.microsoft.com/dotnet/how-to-deploy-dotnet-aspire-apps-to-azure-container-apps/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Aspire アプリケーションを作成し、Azure Container Apps にデプロイするまでの簡単な手順の紹介。&lt;/p&gt;
&lt;h3 id="in-the-debuggers-spotlight-a-year-in-review-visual-studio-blog"&gt;In the Debugger's Spotlight: A Year in Review - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/in-the-debuggers-spotlight-a-year-in-review/"&gt;https://devblogs.microsoft.com/visualstudio/in-the-debuggers-spotlight-a-year-in-review/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 の2023年に提供された新しいデバッグに関連する機能のまとめと紹介。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;インナーループ生産性の加速
&lt;ul&gt;
&lt;li&gt;ブレークポイントグループ&lt;/li&gt;
&lt;li&gt;拡張テキストビジュアライザー&lt;/li&gt;
&lt;li&gt;非モーダルビジュアライザー&lt;/li&gt;
&lt;li&gt;コールスタック検索&lt;/li&gt;
&lt;li&gt;並列スタックウィンドウの改善&lt;/li&gt;
&lt;li&gt;デバッガープロセスへの永続的な再アタッチ&lt;/li&gt;
&lt;li&gt;CMake デバッガー&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;外部ソースコードのスマート化と高速化&lt;/li&gt;
&lt;li&gt;クロスプラットフォームデバッグサポート
&lt;ul&gt;
&lt;li&gt;Visual Studio 統合ターミナルでの Linux アプリのデバッグ&lt;/li&gt;
&lt;li&gt;リモートターゲットへのデプロイとデバッグ&lt;/li&gt;
&lt;li&gt;追加の Linux デバッグ機能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;パフォーマンスのアップグレード&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="net9-alpha-linq-updates"&gt;.NET9 Alpha - LINQ updates&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/codenx/net9-alpha-linq-updates-c2df66d20e1b"&gt;https://medium.com/codenx/net9-alpha-linq-updates-c2df66d20e1b&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 9 で LINQ に追加される予定の CountBy, AggregateBy オペレーターの紹介。&lt;/p&gt;
&lt;h3 id="guidance-for.net-nativeaot"&gt;Guidance for .NET NativeAOT&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;skyake/guidance-for-net-nativeaot-4b9853c80f8a"&gt;https://medium.com/&amp;#64;skyake/guidance-for-net-nativeaot-4b9853c80f8a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NativeAOT に対応する際に気を付け、対応すべきポイントのガイド。&lt;/p&gt;
&lt;h3 id="understanding-c-8-default-interface-methods"&gt;Understanding C# 8 default interface methods&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/understanding-default-interface-methods/"&gt;https://andrewlock.net/understanding-default-interface-methods/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 8 のデフォルトインターフェース実装についての解説。どのようなことができ、どのような問題が発生するかについて。&lt;/p&gt;
&lt;h3 id="dotnet-script-c-qiita"&gt;dotnet-script によるC#スクリプトの実行/デバッグ - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/toras9000/items/127548c73547f893995c"&gt;https://qiita.com/toras9000/items/127548c73547f893995c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;dotnet-script を使用した .csx (C# スクリプト) の実行と開発について。&lt;/p&gt;
&lt;h3 id="debugging-techniques-in-jetbrains-rider-you-should-know-about-the.net-tools-blog"&gt;12 Debugging Techniques In JetBrains Rider You Should Know About | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2024/01/29/12-debugging-techniques-in-jetbrains-rider-you-should-know-about/"&gt;https://blog.jetbrains.com/dotnet/2024/01/29/12-debugging-techniques-in-jetbrains-rider-you-should-know-about/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JetBrains Rider の12個のデバッグテクニックの紹介。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;インライン Watch&lt;/li&gt;
&lt;li&gt;戻り値&lt;/li&gt;
&lt;li&gt;スマート Step Into デバッグ&lt;/li&gt;
&lt;li&gt;ブレークポイントオプション&lt;/li&gt;
&lt;li&gt;実行ポインターのドラッグ&lt;/li&gt;
&lt;li&gt;外部のデコンパイルされたコードのデバッグ&lt;/li&gt;
&lt;li&gt;例外ブレークポイント&lt;/li&gt;
&lt;li&gt;静的メソッドの実行とデバッグ&lt;/li&gt;
&lt;li&gt;エディットコンティニュー&lt;/li&gt;
&lt;li&gt;メモリービュー&lt;/li&gt;
&lt;li&gt;スレッド固有ブレークポイント&lt;/li&gt;
&lt;li&gt;DebuggerDisplayAttribute サポート&lt;/li&gt;
&lt;li&gt;ボーナス: 予測デバッガー&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="code-review-time-travel"&gt;Code review &amp;amp; Time Travel&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ayende.com/blog/200577-B/code-review-time-travel"&gt;https://ayende.com/blog/200577-B/code-review-time-travel&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;RavenDB の開発を通して学んだコードレビューについての振り返り。&lt;/p&gt;
&lt;h3 id="a-replacement-for-binaryformatter-in.net-8"&gt;A replacement for BinaryFormatter in .NET 8&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://steven-giesel.com/blogPost/4271d529-5625-4b67-bd59-d121f2d8c8f6"&gt;https://steven-giesel.com/blogPost/4271d529-5625-4b67-bd59-d121f2d8c8f6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;廃止された BinaryFormatter の移行先としてシリアライザーなどの紹介。&lt;/p&gt;
&lt;h3 id="net-performance-analysis-newtonsoft.json-vs-system.text.json-in.net-8"&gt;.NET Performance Analysis: Newtonsoft.Json vs System.Text.Json in .NET 8&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://trevormccubbin.medium.com/net-performance-analysis-newtonsoft-json-vs-system-text-json-in-net-8-34520c21d054"&gt;https://trevormccubbin.medium.com/net-performance-analysis-newtonsoft-json-vs-system-text-json-in-net-8-34520c21d054&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Newtonsoft.Json と System.Text.Json の単純なシリアライズ/デシリアライズのパフォーマンスの比較について。&lt;/p&gt;
&lt;h3 id="winui-3-winforms"&gt;WinUI 3 アプリで WinForms の機能を利用する&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/shinta0806/articles/winui3-winforms"&gt;https://zenn.dev/shinta0806/articles/winui3-winforms&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WinUI 3 をベースにしたアプリケーションで Windows Forms の機能を使用するための手順について。&lt;/p&gt;
&lt;h3 id="c-enityframework-core-jsakamoto"&gt;[C# プログラム] 百万件のデータベースレコードを EnityFramework Core で列挙したら、メモリはどれくらい消費されるのか | &amp;#64;jsakamoto&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devadjust.exblog.jp/29836607/"&gt;https://devadjust.exblog.jp/29836607/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core を使用して100万件のレコードを列挙 (foreach) する際のメモリー使用量がどの程度になるのかについて。&lt;/p&gt;
&lt;h3 id="my-experience-working-on-rustc_codegen_clr-half-a-year-retrospective"&gt;My experience working on rustc_codegen_clr - half a year retrospective&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://fractalfir.github.io/generated_html/rustc_codegen_clr_v0_1_0.html"&gt;https://fractalfir.github.io/generated_html/rustc_codegen_clr_v0_1_0.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rust の MSIL バックエンドを実装してきた半年の振り返り。どのようなプロジェクトでどのようなハードルがあるのかといったことなど。&lt;/p&gt;
&lt;h3 id="asp.netswaggertypescriptenum"&gt;ASP.Net+Swagger+TypeScriptでEnumの表示名を自動生成する&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/garicchi/aspnetswaggertypescriptdeenumnobiao-shi-ming-wozi-dong-sheng-cheng-suru-1hoh"&gt;https://dev.to/garicchi/aspnetswaggertypescriptdeenumnobiao-shi-ming-wozi-dong-sheng-cheng-suru-1hoh&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core と Swagger による OpenAPI スキーマから TypeScript 向けのコードを生成する際に Enum の名前がわかりにくくなる問題についての対処方法。&lt;/p&gt;
&lt;h3 id="net-aspire-sekiban"&gt;.NET Aspire と Sekiban を使ってアプリケーション作り始める方法&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/jtechjapan_pub/articles/3da012ed4b49ed"&gt;https://zenn.dev/jtechjapan_pub/articles/3da012ed4b49ed&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Aspire と独自のイベントソーシングフレームワークを組み合わせて、Cosmos DB をデータストアとしたアプリケーションを作る手順について。&lt;/p&gt;
&lt;h3 id="code-faster-and-better-with-github-copilots-new-features-slash-commands-and-context-variables-visual-studio-blog"&gt;Code Faster and Better with GitHub Copilot's New Features: Slash Commands and Context Variables - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/copilot-chat-slash-commands-and-context-variables/"&gt;https://devblogs.microsoft.com/visualstudio/copilot-chat-slash-commands-and-context-variables/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio の GitHub Copilot の新機能の紹介。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;スラッシュコマンド&lt;/li&gt;
&lt;li&gt;コンテキスト変数&lt;/li&gt;
&lt;li&gt;プレビュー機能
&lt;ul&gt;
&lt;li&gt;デバッガーでの例外アシスタント&lt;/li&gt;
&lt;li&gt;ブレークポイント式の提案&lt;/li&gt;
&lt;li&gt;コミットメッセージの提案&lt;/li&gt;
&lt;li&gt;ソリューション参照&lt;/li&gt;
&lt;li&gt;パフォーマンスプロファイラーでの提案&lt;/li&gt;
&lt;li&gt;失敗したテストの分析&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="c-span-unshift-qiita"&gt;C# で配列（Span）を Unshift しても大丈夫なのか - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/sator_imaging/items/49585b191af978b00ad2"&gt;https://qiita.com/sator_imaging/items/49585b191af978b00ad2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Span を Unshift する際にオーバーラップが発生するようなコードを書くとどうなるか、Unity/IL2CPP ではどうなるかといった…。&lt;/p&gt;
&lt;h3 id="net"&gt;.NET のガベージコレクションの仕組み&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://notnullvariable.com/2024/440/"&gt;https://notnullvariable.com/2024/440/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET のガベージコレクションの仕組みについての紹介。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="nuget-gallery-plantumlclassdiagramgenerator.sourcegenerator"&gt;NuGet Gallery | PlantUmlClassDiagramGenerator.SourceGenerator&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.nuget.org/packages/PlantUmlClassDiagramGenerator.SourceGenerator"&gt;https://www.nuget.org/packages/PlantUmlClassDiagramGenerator.SourceGenerator&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PlantUML のクラス図を生成する Source Generator。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/pierusan2010/items/cdd628f202a9767cf65d"&gt;Source GeneratorでC#のソースコードからPlantUMLのクラス図を生成する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;p&gt;OpenSilver で Silverlight Toolkit Samples がほとんどそのまま動いたという話。&lt;/p&gt;
&lt;!-- https://x.com/opensilverteam/status/1752735210846781602?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Some might think this is a joke, but it&amp;#39;s not! 😄 Who says Silverlight is dead? We&amp;#39;ve just successfully migrated the original &amp;quot;Silverlight Toolkit Samples&amp;quot; app by Microsoft with almost no code changes. Check it out live in browser—NO PLUGIN REQUIRED—at: &lt;a href="https://t.co/Z27hCh6cCZ"&gt;https://t.co/Z27hCh6cCZ&lt;/a&gt; &lt;a href="https://t.co/ErvkM6wfNP"&gt;pic.twitter.com/ErvkM6wfNP&lt;/a&gt;&lt;/p&gt;&amp;mdash; OpenSilver (Silverlight replacement) (&amp;#64;OpenSilverTeam) &lt;a href="https://twitter.com/OpenSilverTeam/status/1752735210846781602?ref_src=twsrc%5Etfw"&gt;January 31, 2024&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="epic-idistributedcache-updates-in.net-9-issue-53255-dotnetaspnetcore"&gt;Epic: IDistributedCache updates in .NET 9 · Issue #53255 · dotnet/aspnetcore&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/aspnetcore/issues/53255"&gt;https://github.com/dotnet/aspnetcore/issues/53255&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;分散キャッシュの .NET 9 でのアップデートの Issue。&lt;/p&gt;
&lt;h3 id="tracking-issue-for-remaining-assemblybuilder.save-work-in.net-9-issue-92975-dotnetruntime"&gt;Tracking issue for remaining AssemblyBuilder.Save work in .NET 9 · Issue #92975 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/issues/92975"&gt;https://github.com/dotnet/runtime/issues/92975&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 9 に向けた AssemblyBuilder.Save の作業 Issue。&lt;/p&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2024/01/24/updates</id>
		<title>2024-01-24: ReSharper &amp; Rider 2023.3.3, MySQL Connector 2.3.5, Avalonia 11.0.7, StackExchage.Redis 2.7.17</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2024/01/24/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2024-01-24T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="another-set-of-bug-fixes-for-resharper-and-rider-2023.3-is-here-the.net-tools-blog"&gt;Another Set of Bug-fixes for ReSharper and Rider 2023.3 Is Here! | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2024/01/22/2023-3-3-rsrp-rd/"&gt;https://blog.jetbrains.com/dotnet/2024/01/22/2023-3-3-rsrp-rd/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper と Rider 2023.3.3 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースではリネームやスペルチェック、QuickFix などでいくつかの不具合が修正されている。&lt;/p&gt;
&lt;h3 id="release-2.3.5-mysql-netmysqlconnector"&gt;Release 2.3.5 · mysql-net/MySqlConnector&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/mysql-net/MySqlConnector/releases/tag/2.3.5"&gt;https://github.com/mysql-net/MySqlConnector/releases/tag/2.3.5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MySQL Connector 2.3.5/2.3.4 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは TLS バージョンフォールバックの削除、NuGet パッケージの DLL のデジタル署名対応、その他いくつかの不具合が修正されている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mysql-net/MySqlConnector/releases/tag/2.3.4"&gt;Release 2.3.4 · mysql-net/MySqlConnector&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="release-11.0.7-avaloniauiavalonia"&gt;Release 11.0.7 · AvaloniaUI/Avalonia&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/AvaloniaUI/Avalonia/releases/tag/11.0.7"&gt;https://github.com/AvaloniaUI/Avalonia/releases/tag/11.0.7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Avalonia 11.0.7 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースではメモリーリークや XAML コンパイラーのエラー、様々な不具合の修正が含まれている。&lt;/p&gt;
&lt;h3 id="release-2.7.17-stackexchangestackexchange.redis"&gt;Release 2.7.17 · StackExchange/StackExchange.Redis&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/StackExchange/StackExchange.Redis/releases/tag/2.7.17"&gt;https://github.com/StackExchange/StackExchange.Redis/releases/tag/2.7.17&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;StackExchage.Redis 2.7.17 がリリースされた。&lt;/p&gt;
&lt;p&gt;接続のシャットダウン中の NullReferenceException の防止、トランザクションのコマンドマップ内の SELECT コマンドの祖雲長などいくつかの不具合が修正されている。&lt;/p&gt;
&lt;h3 id="release-v8.0.0-autofacautofac"&gt;Release v8.0.0 · autofac/Autofac&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/autofac/Autofac/releases/tag/v8.0.0"&gt;https://github.com/autofac/Autofac/releases/tag/v8.0.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Autofac 8.0.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースではターゲットフレームワークに .NET 8 が追加され、.NET Core 3.1 が削除された。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="net-framework-january-2024-cumulative-update-preview.net-blog"&gt;.NET Framework January 2024 Cumulative Update Preview - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-framework-january-2024-cumulative-update-preview/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-framework-january-2024-cumulative-update-preview/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2024年1月の .NET Framework の累積アップデートがプレビューリリースされた。&lt;/p&gt;
&lt;p&gt;ASP.NET MVC のリクエスト処理中に ArgumentException がスローされる問題の修正、zlib ライブラリーのバージョンが古い問題の対処などが含まれる。&lt;/p&gt;
&lt;h3 id="net-8-new-data-annotations"&gt;.NET 8 — New Data Annotations&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://henriquesd.medium.com/net-8-new-data-annotations-4434575db48b"&gt;https://henriquesd.medium.com/net-8-new-data-annotations-4434575db48b&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 8 で新しく追加された System.ComponentModel.DataAnnotations の属性についての紹介。&lt;/p&gt;
&lt;h3 id="elevate-your-git-and-github-skills-in-visual-studio-with-the-intermediate-and-advanced-series-visual-studio-blog"&gt;Elevate Your Git and GitHub Skills in Visual Studio with the Intermediate and Advanced Series - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/intermediate-and-advanced-git/"&gt;https://devblogs.microsoft.com/visualstudio/intermediate-and-advanced-git/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio での Git と GitHub のスキルを高めるための動画シリーズの紹介。&lt;/p&gt;
&lt;h3 id="avoiding-performance-pitfalls-in-incremental-generators-creating-a-source-generator-part-9"&gt;Avoiding performance pitfalls in incremental generators: Creating a source generator - Part 9&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/creating-a-source-generator-part-9-avoiding-performance-pitfalls-in-incremental-generators/"&gt;https://andrewlock.net/creating-a-source-generator-part-9-avoiding-performance-pitfalls-in-incremental-generators/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Incremental Source Generator のパフォーマンスの落とし穴を回避することについての解説。&lt;/p&gt;
&lt;p&gt;記事ではどのようなパターンで実行され、Source Generator の API を使用する際にパフォーマンスを前提に注意すべき点などを開設している。&lt;/p&gt;
&lt;h3 id="testing-your-incremental-generator-pipeline-outputs-are-cacheable-creating-a-source-generator-part-10"&gt;Testing your incremental generator pipeline outputs are cacheable: Creating a source generator - Part 10&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/creating-a-source-generator-part-10-testing-your-incremental-generator-pipeline-outputs-are-cacheable/"&gt;https://andrewlock.net/creating-a-source-generator-part-10-testing-your-incremental-generator-pipeline-outputs-are-cacheable/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Incremental Source Generator のパイプライン出力をキャッシュ可能にする方法についての解説。&lt;/p&gt;
&lt;h3 id="ridersourcegenerator-qiita"&gt;【Rider】SourceGeneratorをデバッグする方法 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/amenone_games/items/0a99f38fd08911b62c3a"&gt;https://qiita.com/amenone_games/items/0a99f38fd08911b62c3a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JetBrains Rider で Source Generator をデバッグする方法について。&lt;/p&gt;
&lt;h3 id="visual-studio-productivity-features-in-2023-visual-studio-blog"&gt;Visual Studio productivity features in 2023 - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-productivity-features-in-2023/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-productivity-features-in-2023/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2023年にリリースされた Visual Studio 2022 の生産性に関連する機能のまとめ紹介記事。&lt;/p&gt;
&lt;h3 id="analyzing-wpf-performance-by-enabling-etw-endjin"&gt;Analyzing WPF performance by enabling ETW | endjin&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://endjin.com/blog/2024/01/wpf-performance-enable-etw"&gt;https://endjin.com/blog/2024/01/wpf-performance-enable-etw&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ETW で WPF のパフォーマンスを計測する手順の解説。ETW からデータを取得し、PerfView で表示するといった方法について。&lt;/p&gt;
&lt;h3 id="porting-assistant-for.net-cli-qiita"&gt;Porting Assistant for .NET CLI を使って未対応のコンポーネントに対応させる - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/miyamocchi/items/99c098ebab1c4f8053f9"&gt;https://qiita.com/miyamocchi/items/99c098ebab1c4f8053f9&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AWS の Porting Assistant for .NET で未対応な ASP.NET のコントロールを処理できるようにする手順について。&lt;/p&gt;
&lt;h3 id="windowspart1-qiita"&gt;Windowsエクスプローラーに存在しないファイルをドロップする（Part1） - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/miswil/items/b97dd4914a335fa21790"&gt;https://qiita.com/miswil/items/b97dd4914a335fa21790&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;アプリケーションから実ファイルではないデータをエクスプローラーなどのドロップターゲットに渡す方法についての解説。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/miswil/items/49025648cc65fc7ae6e0"&gt;Windowsエクスプローラーに存在しないファイルをドロップする（Part2） - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/miswil/items/9771cb1de32b0713b744"&gt;Windowsエクスプローラーに存在しないファイルをドロップする（Part3） - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/miswil/items/39dfdffde6df0d2a384c"&gt;Windowsエクスプローラーに存在しないファイルをドロップする（Part4） - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="brc-in.net-among-fastest-on-linux-my-optimization-journey"&gt;1BRC in .NET among fastest on Linux: My Optimization Journey&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://hotforknowledge.com/2024/01/13/1brc-in-dotnet-among-fastest-on-linux-my-optimization-journey/"&gt;https://hotforknowledge.com/2024/01/13/1brc-in-dotnet-among-fastest-on-linux-my-optimization-journey/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The One Billion Row Challenge (いろいろな実装での10億行のデータを集計するチャレンジ) で .NET による実装の最適化手法についての解説。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/gunnarmorling/1brc"&gt;The One Billion Row Challenge&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="welcome-to-the-resharper-2024.1-early-access-program-the.net-tools-blog"&gt;Welcome to the ReSharper 2024.1 Early Access Program | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2024/01/19/resharper-2024-1-eap1/"&gt;https://blog.jetbrains.com/dotnet/2024/01/19/resharper-2024-1-eap1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper 2024.1 EAP のアナウンス。&lt;/p&gt;
&lt;p&gt;2024.1 EAP 1では C++ サポートにフォーカスした改善が含まれている。&lt;/p&gt;
&lt;h3 id="c"&gt;C# のプライマリー コンストラクターに属性を設定したい&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/microsoft/articles/primary-constructor-attr"&gt;https://zenn.dev/microsoft/articles/primary-constructor-attr&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 12 のプライマリーコンストラクターのメソッドそのものに属性を指定する方法について。&lt;/p&gt;
&lt;h3 id="preview-3-brings-exciting-changes-to-code-search-visual-studio-blog"&gt;17.9 Preview 3 brings exciting changes to Code Search - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/17-9-preview-3-brings-exciting-changes-to-code-search/"&gt;https://devblogs.microsoft.com/visualstudio/17-9-preview-3-brings-exciting-changes-to-code-search/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.9 Preview 3 でのコード検索のテキスト検索に関する強化についての紹介。&lt;/p&gt;
&lt;h3 id="interceptors-using-c-12-in-rider-and-resharper-the.net-tools-blog"&gt;Interceptors – Using C# 12 in Rider and ReSharper | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2024/01/16/interceptors-using-csharp-12-in-rider-and-resharper/"&gt;https://blog.jetbrains.com/dotnet/2024/01/16/interceptors-using-csharp-12-in-rider-and-resharper/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 12 のプレビュー機能である Interceptor を Rider と ReSharper のサポートについての紹介。&lt;/p&gt;
&lt;p&gt;Rider と ReSharper では Interceptor の対象にインレイヒントを表示できる。&lt;/p&gt;
&lt;h3 id="building-a-self-contained-game-in-c-under-2-kilobytes"&gt;Building a self-contained game in C# under 2 kilobytes&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://migeel.sk/blog/2024/01/02/building-a-self-contained-game-in-csharp-under-2-kilobytes/"&gt;https://migeel.sk/blog/2024/01/02/building-a-self-contained-game-in-csharp-under-2-kilobytes/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# で 2KB の自己完結型(ランタイム不要)のゲームアプリケーションを実現する手法について。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://flattened.net/"&gt;bflat - C# as you know it but with Go-inspired tooling&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="how-to-use-iasyncenumerable-with-blazor-stream-rendering"&gt;How to use IAsyncEnumerable with Blazor Stream Rendering&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://khalidabuhakmeh.com/how-to-use-iasyncenumerable-with-blazor-stream-rendering"&gt;https://khalidabuhakmeh.com/how-to-use-iasyncenumerable-with-blazor-stream-rendering&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor で IAsyncEnumerable からの値をレンダリングする方法について。&lt;/p&gt;
&lt;h3 id="mocking-graphql-queries-with-wiremock.net"&gt;Mocking GraphQL queries with WireMock.NET&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://cezarypiatek.github.io/post/mocking-graphql-with-wiremock/"&gt;https://cezarypiatek.github.io/post/mocking-graphql-with-wiremock/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WireMock.NET を使用して GraphQL クエリーのモックを実現する方法について。&lt;/p&gt;
&lt;h3 id="list-ilist-immutablearray-etc.c12-qiita"&gt;配列を初期化する (List, IList, ImmutableArray, etc. も初期化する) 《C#12》《コレクション式》 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/muniel/items/8af5b337d9bbbfbd2812"&gt;https://qiita.com/muniel/items/8af5b337d9bbbfbd2812&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 12 のコレクション式について。記述の仕方、利用できるパターン、できないパターンなどについて触れている。&lt;/p&gt;
&lt;h3 id="blazor-server.net-7.net-8-qiita"&gt;Blazor Serverで.NET 7から.NET 8への移行方法 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/yaju/items/762d48ecda8b9c59279a"&gt;https://qiita.com/yaju/items/762d48ecda8b9c59279a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor Server を .NET 7 から .NET 8 へ移行した際に発生した問題とその対応方法について。&lt;/p&gt;
&lt;h3 id="net-8-winui-3-netsdk1083"&gt;.NET 8 で WinUI 3 アプリをビルドする（NETSDK1083 対策）&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/shinta0806/articles/dotnet8-netsdk1083"&gt;https://zenn.dev/shinta0806/articles/dotnet8-netsdk1083&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 8 で　WinUI 3 アプリケーションをビルドする際に発生する場合のあるエラーとその対処方法について。&lt;/p&gt;
&lt;h3 id="exploring.net-frozen-segments"&gt;Exploring .NET frozen segments&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://minidump.net/exploring-frozen-segments/"&gt;https://minidump.net/exploring-frozen-segments/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 8 で導入された GC 対象外となるヒープが存在する固定されたセグメントを非公開な API を使用して使って解説する記事。&lt;/p&gt;
&lt;h3 id="net-continuous-profiler-under-the-hood-datadog"&gt;.NET Continuous Profiler: Under the Hood | Datadog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.datadoghq.com/ja/blog/engineering/dotnet-continuous-profiler/"&gt;https://www.datadoghq.com/ja/blog/engineering/dotnet-continuous-profiler/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET のプロファイラーのアーキテクチャーとどのような実装を行っているのかの簡単な解説。&lt;/p&gt;
&lt;h3 id="neue-cc.netunity"&gt;neue cc - .NETプロジェクトとUnityプロジェクトのソースコード共有最新手法&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://neue.cc/2024/01/15_shareprojectinunity.html"&gt;https://neue.cc/2024/01/15_shareprojectinunity.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET プロジェクトと Unity のプロジェクト間でソースコードを共有する手法。NuGet パッケージ開発時に Unity から参照する方法についても。&lt;/p&gt;
&lt;h2 id="section-2"&gt;イベント&lt;/h2&gt;
&lt;h3 id="c-blazor-webassembly-web-20240209-1200"&gt;昼休みに C# で Blazor WebAssembly 製の web アプリをイチから作る配信 (2024/02/09 12:00〜)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://msdevjp.connpass.com/event/308241/"&gt;https://msdevjp.connpass.com/event/308241/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;比較的短い時間で C# と Blazor WebAssembly で Web アプリケーションを作成するという配信。&lt;/p&gt;
&lt;p&gt;Let's Learn .NET (初心者向けの配信シリーズ) の日本ローカライズ版相当とのこと。&lt;/p&gt;
&lt;h2 id="section-3"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h2 id="section-4"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="learn-reactive-programming-for-free-introduction-to-rx.net-2nd-edition-2024-endjin"&gt;Learn Reactive Programming for FREE: Introduction to Rx.NET 2nd Edition (2024) | endjin&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://endjin.com/blog/2024/01/introduction-to-rx-dotnet-2nd-edition-book-available-for-free"&gt;https://endjin.com/blog/2024/01/introduction-to-rx-dotnet-2nd-edition-book-available-for-free&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Introduction to Rx.NET 2nd Edition の eBook。&lt;/p&gt;
&lt;h3 id="section-5"&gt;ツイート&lt;/h3&gt;
&lt;p&gt;C++ アプリケーションのプロジェクトから NativeAOT の C# ライブラリーを参照する構成を試みる。&lt;/p&gt;
&lt;!-- https://x.com/mstrehovsky/status/1749739317180891232?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Experimenting with a Visual Studio solution with a C++ console app that calls into a C# DLL (native AOT&amp;#39;d). Mostly have this working from the command line, but still struggling with F5 launch in VS. Any VS experts among my followers? &lt;a href="https://t.co/Ub5Qck7mXH"&gt;https://t.co/Ub5Qck7mXH&lt;/a&gt;&lt;/p&gt;&amp;mdash; Michal Strehovský (&amp;#64;MStrehovsky) &lt;a href="https://twitter.com/MStrehovsky/status/1749739317180891232?ref_src=twsrc%5Etfw"&gt;January 23, 2024&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Visual Studio のツールウィンドウはドッキング/フロート状態で Ctrl + ダブルクリック で元の位置に移動できるという話。&lt;/p&gt;
&lt;!-- https://x.com/mkristensen/status/1747701018815848592?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Toggle Visual Studio tool windows between last floating location and last docking location using Ctrl+double-click &lt;a href="https://t.co/us0camg6kv"&gt;pic.twitter.com/us0camg6kv&lt;/a&gt;&lt;/p&gt;&amp;mdash; Mads Kristensen (&amp;#64;mkristensen) &lt;a href="https://twitter.com/mkristensen/status/1747701018815848592?ref_src=twsrc%5Etfw"&gt;January 17, 2024&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Visual Studio の Disamo 拡張 (JIT の結果を表示できる) でカスタムランタイムなしで NativeAOT をサポート。&lt;/p&gt;
&lt;!-- https://x.com/egorbo/status/1746918915266252834?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;New release of Disasmo supports NativeAOT without custom runtimes! Just put your cursor on any method and click Shift+Alt+D! (after Disasmo VS add-in is installed of course 😉) &lt;a href="https://t.co/8lN9IhJe1Q"&gt;pic.twitter.com/8lN9IhJe1Q&lt;/a&gt;&lt;/p&gt;&amp;mdash; Egor Bogatov (&amp;#64;EgorBo) &lt;a href="https://twitter.com/EgorBo/status/1746918915266252834?ref_src=twsrc%5Etfw"&gt;January 15, 2024&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2024/01/15/updates</id>
		<title>2024-01-15: Windows App SDK 1.4.4, .NET 8.0.1 &amp; 7.0.15 &amp; 6.0.26</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2024/01/15/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2024-01-15T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="release-windows-app-sdk-1.4.4-1.4.231219000-microsoftwindowsappsdk"&gt;Release Windows App SDK 1.4.4 (1.4.231219000) · microsoft/WindowsAppSDK&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/microsoft/WindowsAppSDK/releases/tag/v1.4.4"&gt;https://github.com/microsoft/WindowsAppSDK/releases/tag/v1.4.4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows App SDK 1.4.4 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは WinUI 3 診断セキュリティー問題の修正、パスワードボックスでタッチ操作によるオンスクリーンキーボードが表示されない問題の修正などいくつかの不具合が修正されている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/windows/apps/windows-app-sdk/stable-channel#version-144-14231219000"&gt;Version 1.4.4 (1.4.231219000) | Stable channel release notes for the Windows App SDK - Windows apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/microsoft/microsoft-ui-xaml/releases/tag/winui3/release/1.4.4"&gt;Release WinUI 3 in WinAppSDK 1.4.4 · microsoft/microsoft-ui-xaml · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="net-january-2024-updates.net-8.0.1-7.0.15.net-6.0.26.net-blog"&gt;.NET January 2024 Updates – .NET 8.0.1, 7.0.15, .NET 6.0.26 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/january-2024-updates/"&gt;https://devblogs.microsoft.com/dotnet/january-2024-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 8.0.1, 7.0.15, 6.0.26 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは3つの脆弱性の修正が含まれる他、いくつかの不具合の修正などが含まれている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-0056"&gt;CVE-2024-0056 - セキュリティ更新プログラム ガイド - Microsoft - Microsoft.Data.SqlClient と System.Data.SqlClient の SQL データ プロバイダーのセキュリティ機能のバイパスの脆弱性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-0057"&gt;CVE-2024-0057 - セキュリティ更新プログラム ガイド - Microsoft - NET、.NET Framework、Visual Studio のセキュリティ機能のバイパス脆弱性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-21319"&gt;CVE-2024-21319 - セキュリティ更新プログラム ガイド - Microsoft - Microsoft ID のサービス拒否の脆弱性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="net-framework-january-2024-security-and-quality-rollup.net-blog"&gt;.NET Framework January 2024 Security and Quality Rollup - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-framework-january-2024-security-and-quality-rollup/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-framework-january-2024-security-and-quality-rollup/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2024年1月の .NET Framework のセキュリティーと品質のロールアップリリース。&lt;/p&gt;
&lt;p&gt;このリリースでは4つの脆弱性の修正が含まれ、品質に関する修正は含まれない。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2023-36042"&gt;CVE-2023-36042 - セキュリティ更新プログラム ガイド - Microsoft - Visual Studio のサービス拒否の脆弱性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-0056"&gt;CVE-2024-0056 - セキュリティ更新プログラム ガイド - Microsoft - Microsoft.Data.SqlClient と System.Data.SqlClient の SQL データ プロバイダーのセキュリティ機能のバイパスの脆弱性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-0057"&gt;CVE-2024-0057 - セキュリティ更新プログラム ガイド - Microsoft - NET、.NET Framework、Visual Studio のセキュリティ機能のバイパス脆弱性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-21312"&gt;CVE-2024-21312 - セキュリティ更新プログラム ガイド - Microsoft - .NET Framework のサービス拒否の脆弱性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="code-connect-learn-at-visual-studio-live-in-las-vegas-visual-studio-blog"&gt;Code, Connect &amp;amp; Learn at Visual Studio LIVE! in Las Vegas. - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-live-2024-las-vegas/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-live-2024-las-vegas/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio LIVE! イベントについてのアナウンス。&lt;/p&gt;
&lt;p&gt;Visual Studio LIVE! は3月3日から8日にかけて Las Vegas で開催される IDE や Azure、GitHub といった開発者向けのイベント。&lt;/p&gt;
&lt;p&gt;なお記事では2月9日までの特別割引オファーが提供されている。&lt;/p&gt;
&lt;h3 id="our-move-to-generated-sdks"&gt;Our move to generated SDKs&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.blog/2024-01-03-our-move-to-generated-sdks/"&gt;https://github.blog/2024-01-03-our-move-to-generated-sdks/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GitHub の API アクセス SDK である Octokit を Kiota を使用して生成されたものへと移行するというアナウンス。&lt;/p&gt;
&lt;p&gt;新しい SDK は Kiota によって OpenAPI 定義から Go と .NET のクライアントを生成する形となる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/octokit/dotnet-sdk"&gt;octokit/dotnet-sdk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="release-8.2.1-app-vnextpolly"&gt;Release 8.2.1 · App-vNext/Polly&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/App-vNext/Polly/releases/tag/8.2.1"&gt;https://github.com/App-vNext/Polly/releases/tag/8.2.1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Polly 8.2.1 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースではリトライやサーキットブレーカーに関するいくつかの不具合が修正されている。&lt;/p&gt;
&lt;h3 id="release-diagnostics-release-v8.0.505301-dotnetdiagnostics"&gt;Release Diagnostics Release - v8.0.505301 · dotnet/diagnostics&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/diagnostics/releases/tag/v8.0.505301"&gt;https://github.com/dotnet/diagnostics/releases/tag/v8.0.505301&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 診断ツール v8.0.505301 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースではいくつかの機能改善と不具合の修正、RISC-V の SOS 関連コードの実装などが含まれる。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="sortable-lists-for-blazor-using-a-sortablejs-component.net-blog"&gt;Sortable Lists for Blazor using a SortableJS Component - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/introducing-blazor-sortable/"&gt;https://devblogs.microsoft.com/dotnet/introducing-blazor-sortable/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SortableJS を使用した Blazor 上でソート可能なリストを実現するコンポーネント Bazor Sortable の紹介。&lt;/p&gt;
&lt;h3 id="short-history-of-all-windows-ui-frameworks-and-libraries"&gt;Short history of all Windows UI frameworks and libraries&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.irrlicht3d.org/index.php?t=1626"&gt;https://www.irrlicht3d.org/index.php?t=1626&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows の UI フレームワークとライブラリーの簡単な歴史。&lt;/p&gt;
&lt;h3 id="use-jetbrains-ai-assistant-to-help-you-understand-changes-in-your-code-the.net-tools-blog"&gt;Use JetBrains AI Assistant To Help You Understand Changes In Your Code | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2024/01/10/use-jetbrains-ai-assistant-to-help-you-understand-changes-in-your-code/"&gt;https://blog.jetbrains.com/dotnet/2024/01/10/use-jetbrains-ai-assistant-to-help-you-understand-changes-in-your-code/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper や Rider で利用できる JetBrains AI Assistant でできることの紹介。&lt;/p&gt;
&lt;p&gt;記事では Git の複数のコミットからログを要約したり、チャットでコミットによるコードの変更の概要を確認するといったタスクを行える例を紹介している。&lt;/p&gt;
&lt;h3 id="blazor-web-app.net8"&gt;Blazor Web App(.NET8)に多言語対応の機能を実装する。&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/tkeproject/articles/3069d23ab78123"&gt;https://zenn.dev/tkeproject/articles/3069d23ab78123&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor Web App で言語リソースを使用した多言語対応を実装する方法について。&lt;/p&gt;
&lt;h3 id="csyslogrsyslog"&gt;C#プログラムからsyslog(rsyslog)サーバーにログを送る&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/techmadot/articles/rsyslog-csharp"&gt;https://zenn.dev/techmadot/articles/rsyslog-csharp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Serilog の syslog Sink を使用して syslog/rsyslog サーバーにログを送信する方法について。&lt;/p&gt;
&lt;h3 id="a-year-of-community-experiments-visual-studio-blog"&gt;2023 – a year of community experiments - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/2023-a-year-of-community-experiments/"&gt;https://devblogs.microsoft.com/visualstudio/2023-a-year-of-community-experiments/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2023年のコミュニティーでの Visual Studio の機能実験に関する振り返り。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Differentiating Visual Studio instances&lt;/li&gt;
&lt;li&gt;Adding color to bracket pairs&lt;/li&gt;
&lt;li&gt;Comparing files in Visual Studio&lt;/li&gt;
&lt;li&gt;Copy with proper indentation&lt;/li&gt;
&lt;li&gt;Get your developer news&lt;/li&gt;
&lt;li&gt;Surround selection&lt;/li&gt;
&lt;li&gt;Scroll document tabs&lt;/li&gt;
&lt;li&gt;Image hover preview&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらの機能を実験的な拡張として提供したのち、どのような数のフィードバックがあり結果として Visual Studio に搭載されたかどうかについて書かれている。&lt;/p&gt;
&lt;h3 id="a-brief-look-at-stringvalues"&gt;A brief look at StringValues&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/a-brief-look-at-stringvalues/"&gt;https://andrewlock.net/a-brief-look-at-stringvalues/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core のコードによく出てくる &lt;code&gt;StringValues&lt;/code&gt; についての解説。&lt;/p&gt;
&lt;p&gt;記事では String の配列との違いや実際の実装の中身について解説している。&lt;/p&gt;
&lt;h3 id="netopentelemetry-qiita"&gt;.NETの汎用ホストでOpenTelemetry - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/kwhrkzk/items/1f31759dd570b3be4fa2"&gt;https://qiita.com/kwhrkzk/items/1f31759dd570b3be4fa2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET の Generic Host (汎用ホスト) で OpenTelemetry を使用する方法について。&lt;/p&gt;
&lt;p&gt;記事では Entity Framework Core の情報を Zipkin で表示するといった手順を紹介している。&lt;/p&gt;
&lt;h3 id="visual-studio-performance-highlights-delivered-in-2023-visual-studio-blog"&gt;Visual Studio Performance Highlights Delivered in 2023 - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-performance-highlights-delivered-in-2023/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-performance-highlights-delivered-in-2023/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2023年の Visual Studio のパフォーマンス向上記事の振り返り。&lt;/p&gt;
&lt;p&gt;17.5から17.8までのパフォーマンス改善に関する記事へのリンクとその内容の簡単な紹介。&lt;/p&gt;
&lt;h3 id="net-digest-january-2024-the.net-tools-blog"&gt;.NET Digest | January 2024 | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2024/01/08/net-digest-january-2024/"&gt;https://blog.jetbrains.com/dotnet/2024/01/08/net-digest-january-2024/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JetBrains による .NET ニュースレター1月号。&lt;/p&gt;
&lt;p&gt;今までは JetBrains .NET Annotated という名前だったが今回から JetBrains .NET Digest という名前に変更となった。&lt;/p&gt;
&lt;h3 id="asp.net-core-8.0-uses-c-12.0s-experimental-interceptors-to-enable-aot-endjin"&gt;ASP.NET Core 8.0 uses C# 12.0's experimental interceptors to enable AOT | endjin&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://endjin.com/blog/2024/01/asp-dotnet-8-aot-csharp-12-interceptors"&gt;https://endjin.com/blog/2024/01/asp-dotnet-8-aot-csharp-12-interceptors&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 12 のプレビュー機能のインターセプターと ASP.NET Core で利用されている部分についての解説。&lt;/p&gt;
&lt;p&gt;.NET 8 の ASP.NET Core では NativeAOT 時にはインターセプターを活用したコード生成を行っている。記事ではその動作についての解説。&lt;/p&gt;
&lt;h3 id="how-to-distribute-roslyn-analyzers-via-nuget"&gt;How to Distribute Roslyn Analyzers via NuGet&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://aaronstannard.com/roslyn-nuget/"&gt;https://aaronstannard.com/roslyn-nuget/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Roslyn Analyzer を .nuspec で NuGet パッケージにする方法について。&lt;/p&gt;
&lt;h3 id="wpfblazor-hybrid"&gt;WPFをベースにしたサイドビュー付きのBlazor Hybridアプリの構築方法&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/tkeproject/articles/59eb1b20381e41"&gt;https://zenn.dev/tkeproject/articles/59eb1b20381e41&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WPF による　Blazor Hybrid アプリケーションでサイドメニューを表示する構成を実装する方法について。&lt;/p&gt;
&lt;h3 id="blazor-hybrid"&gt;Blazor Hybrid でテキストボックスの右クリックメニューを表示する&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/microsoft/articles/blazor-hybrid-editable-context-menu"&gt;https://zenn.dev/microsoft/articles/blazor-hybrid-editable-context-menu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows 上の Blazor Hybrid アプリケーション内のテキストボックスでコンテキストメニューを表示できるようにする方法について。&lt;/p&gt;
&lt;h3 id="blazor-hybrid-f5"&gt;Blazor Hybrid で F5 キーでリフレッシュなどのブラウザ固有のキー操作を無効化したい&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/microsoft/articles/blazor-hybrid-disable-fkeys"&gt;https://zenn.dev/microsoft/articles/blazor-hybrid-disable-fkeys&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows 上の Blazor Hybrid アプリケーション内で F5 のようなブラウザーのショートカットキー操作を無効にする方法について。&lt;/p&gt;
&lt;h3 id="wpf-github-actions-qiita"&gt;[WPF] GitHub Actions を使った自動リリース - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/thinva/items/904191e7c8bdaf0441f8"&gt;https://qiita.com/thinva/items/904191e7c8bdaf0441f8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WPF アプリケーションを GitHub Actions を使用してリリースする方法について。&lt;/p&gt;
&lt;h3 id="net-qiita"&gt;[小ネタ] .NETアセンブリが存在するディレクトリパス名を取得する方法 (単一ファイルに発行対応版) - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/rougemeilland/items/3bd5f302778737df5b56"&gt;https://qiita.com/rougemeilland/items/3bd5f302778737df5b56&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;単一ファイル発行時にも対応したアセンブリーの存在するディレクトリーのパスを取得する方法について。&lt;/p&gt;
&lt;h3 id="net-8-blazor"&gt;.NET 8 での Blazor を整理整頓して理解しよう&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/microsoft/articles/blazor-dotnet8-all"&gt;https://zenn.dev/microsoft/articles/blazor-dotnet8-all&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 8 時点の Blazor と呼ばれるものはどのようなものがあるのか、どの動作モードを選択するのが適切なのかといったことのまとめ。&lt;/p&gt;
&lt;h3 id="net-8-new-randomness-methods"&gt;.NET 8 — New Randomness Methods&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://henriquesd.medium.com/net-8-new-randomness-methods-f2422f55320f"&gt;https://henriquesd.medium.com/net-8-new-randomness-methods-f2422f55320f&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 8 の Random クラスに追加された GetItems, Shuffle などの紹介記事。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="cysharpr3-the-new-future-of-dotnetreactive-and-unirx"&gt;Cysharp/R3: The new future of dotnet/reactive and UniRx.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/Cysharp/R3"&gt;https://github.com/Cysharp/R3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;既存の Rx や UniRx の知見をもとに、現代的で新しいよりよい実装を目指した Rx。&lt;/p&gt;
&lt;h3 id="funny-silkielongarraylib-implementation-of-the-array-with-64-bit-signed-integer-length"&gt;Funny-Silkie/LongArrayLib: Implementation of the array with 64-bit signed integer length&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/Funny-Silkie/LongArrayLib"&gt;https://github.com/Funny-Silkie/LongArrayLib&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Array.MaxLength (2147483591) を超える要素数を持てる配列的なものを実現するライブラリー。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/Funny_Silkie/items/171598f9e7e6eb280328"&gt;Array.MaxLength を超えたサイズの配列を扱えるライブラリを作ってみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="mayukidotnet-sail-downloads.net-project-from-gist-github-git-or-the-web-and-runs-it-in-a-container"&gt;mayuki/dotnet-sail: Downloads .NET project from Gist, GitHub, Git, or the web and runs it in a container.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/mayuki/dotnet-sail"&gt;https://github.com/mayuki/dotnet-sail&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Gist や GitHub や Git リポジトリー、その他 Web サイトから C# プロジェクトやソースコードをダウンロードして直接実行するコンテナーイメージ。&lt;/p&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="f"&gt;F# ではじめる関数型プログラミング入門 (上巻)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/midoliy/books/85dd010d0b2ce7"&gt;https://zenn.dev/midoliy/books/85dd010d0b2ce7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;F# を使用した関数型プログラミングの入門オンラインブック。&lt;/p&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;p&gt;CsWinRT で NativeAOT サポートを進めているという話。&lt;/p&gt;
&lt;!-- https://x.com/sergiopedri/status/1745086760244191523?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;My CsWinRT PR w/ NativeAOT support for authoring (&lt;a href="https://t.co/95hiRmvohb"&gt;https://t.co/95hiRmvohb&lt;/a&gt;) just got merged! Along w/ other improvements it allows you to create fully native, self-contained WinRT components using CsWinRT and NativeAOT. We can improve the size, but it&amp;#39;s a start! 🚀&lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/csharp?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#csharp&lt;/a&gt; &lt;a href="https://t.co/sJ7syu0yAz"&gt;pic.twitter.com/sJ7syu0yAz&lt;/a&gt;&lt;/p&gt;&amp;mdash; Sergio Pedri (&amp;#64;SergioPedri) &lt;a href="https://twitter.com/SergioPedri/status/1745086760244191523?ref_src=twsrc%5Etfw"&gt;January 10, 2024&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2024/01/05/updates</id>
		<title>2024-01-05: Visual Studio 2013 Retirement, grpc-dotnet v2.60, Azure Migrate application and code assessment tool for .NET</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2024/01/05/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2024-01-05T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="release-release-v2.60.0-grpcgrpc-dotnet"&gt;Release Release v2.60.0 · grpc/grpc-dotnet&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/grpc/grpc-dotnet/releases/tag/v2.60.0"&gt;https://github.com/grpc/grpc-dotnet/releases/tag/v2.60.0&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="visual-studio-2013-retirement-support-reminder-for-older-versions-of-visual-studio-visual-studio-blog"&gt;Visual Studio 2013 Retirement: Support reminder for older versions of Visual Studio - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2013-retirement-support-reminder-for-older-versions-of-visual-studio/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-2013-retirement-support-reminder-for-older-versions-of-visual-studio/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="announcing-the-azure-migrate-application-and-code-assessment-tool-for.net.net-blog"&gt;Announcing the Azure Migrate application and code assessment tool for .NET - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/azure-migrate-app-and-code-assessment-tool-release/"&gt;https://devblogs.microsoft.com/dotnet/azure-migrate-app-and-code-assessment-tool-release/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="tensorflow.netcby-nezura-qiita"&gt;TensorFlow.NETとC#で「ディープラーニングを実装から学ぶ」(by &amp;#64;Nezuraさん)を追体験する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/C5D5E5/items/9de54719f853ef375e95"&gt;https://qiita.com/C5D5E5/items/9de54719f853ef375e95&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="boosting-string-search-performance-in.net-8.0-with-searchvalues-endjin"&gt;Boosting string search performance in .NET 8.0 with SearchValues | endjin&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://endjin.com/blog/2024/01/dotnet-8-searchvalues-string-search-performance-boost"&gt;https://endjin.com/blog/2024/01/dotnet-8-searchvalues-string-search-performance-boost&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="cvs2022source-generator"&gt;[C#]VS2022を使用したSource Generator入門&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/mkmonaka/articles/8b9c1a87e35313"&gt;https://zenn.dev/mkmonaka/articles/8b9c1a87e35313&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="macoslinux-azure-function"&gt;macOS/Linux でネイティブ ライブラリを含む Azure Function をローカル実行するとエラーになる&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/karamem0/articles/2023_12_30_090000"&gt;https://zenn.dev/karamem0/articles/2023_12_30_090000&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="visitorswitchif-qiita"&gt;Visitorパターンで型によるswitchやif判定を消す - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/toRisouP/items/d96a09fab827af17fb37"&gt;https://qiita.com/toRisouP/items/d96a09fab827af17fb37&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="safer-recursion-in-f.net-blog"&gt;Safer recursion in F# - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/safer-recursion-in-fsharp/"&gt;https://devblogs.microsoft.com/dotnet/safer-recursion-in-fsharp/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="semantic-kernel-v1.0.1"&gt;Semantic Kernel v1.0.1 のプラグインを見てみよう&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/microsoft/articles/semantic-kernel-v1-003"&gt;https://zenn.dev/microsoft/articles/semantic-kernel-v1-003&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-aspire-qiita"&gt;.NET Aspire って何？ - 概要 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/takashiuesaka/items/f45e930ef296c5710acc"&gt;https://qiita.com/takashiuesaka/items/f45e930ef296c5710acc&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-aspire-qiita-1"&gt;.NET Aspire を使ってみる - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/takashiuesaka/items/8794f99b0bf3ce3c3106"&gt;https://qiita.com/takashiuesaka/items/8794f99b0bf3ce3c3106&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-aspire-qiita-2"&gt;.NET Aspire を デプロイする - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/takashiuesaka/items/3da744d0511f29270299"&gt;https://qiita.com/takashiuesaka/items/3da744d0511f29270299&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="next.js-asp.net-core.net-aspire-with-yarp-qiita"&gt;Next.js + ASP.NET Core を .NET Aspire で構成する（with YARP） - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/takashiuesaka/items/e167852af299a7b00939"&gt;https://qiita.com/takashiuesaka/items/e167852af299a7b00939&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-aspire-prometheus-jaeger-grafana-qiita"&gt;.NET Aspire で Prometheus, Jaeger, Grafana を使う - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/takashiuesaka/items/4811e62aa52e39ed834c"&gt;https://qiita.com/takashiuesaka/items/4811e62aa52e39ed834c&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="azurewindowscicddevdrive-qiita"&gt;AzureでWindowsアプリのCI/CD環境を作る：DevDriveの効果は？ - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/spc_ksudoh/items/42d7ab8ad27c475d011c"&gt;https://qiita.com/spc_ksudoh/items/42d7ab8ad27c475d011c&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="a-year-of-making-you-more-productive-using-git-in-visual-studio-visual-studio-blog"&gt;A year of making you more productive using Git in Visual Studio - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/a-year-of-making-you-more-productive-using-git-in-visual-studio/"&gt;https://devblogs.microsoft.com/visualstudio/a-year-of-making-you-more-productive-using-git-in-visual-studio/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="evolutive-and-robust-password-hashing-using-pbkdf2-in.net"&gt;Evolutive and robust password hashing using PBKDF2 in .NET&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/asimmon/evolutive-and-robust-password-hashing-using-pbkdf2-in-net-34pc"&gt;https://dev.to/asimmon/evolutive-and-robust-password-hashing-using-pbkdf2-in-net-34pc&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="qiita"&gt;削除可能な優先度付きキュー - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/saka_pon/items/7d42012e44978580a0c0"&gt;https://qiita.com/saka_pon/items/7d42012e44978580a0c0&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="a-short-guide-to-urgent-cpu-usage-profiling-of.net-applications-on-linux-using-perf"&gt;A short guide to urgent CPU usage profiling of .NET applications on Linux using perf&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://igorexplains.medium.com/a-short-guide-to-urgent-cpu-usage-profiling-of-net-applications-on-linux-using-perf-1e0dbd1f0533"&gt;https://igorexplains.medium.com/a-short-guide-to-urgent-cpu-usage-profiling-of-net-applications-on-linux-using-perf-1e0dbd1f0533&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="a-new-lock-type-in.net-9"&gt;A new lock type in .NET 9&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://steven-giesel.com/blogPost/d7f923b3-13ff-4ecc-8b8f-d847ae581f68"&gt;https://steven-giesel.com/blogPost/d7f923b3-13ff-4ecc-8b8f-d847ae581f68&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-native-aot-explained-ndepend-blog"&gt;.NET Native AOT Explained - NDepend Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.ndepend.com/net-native-aot-explained/?WT.mc_id=link-twitter-isaacl"&gt;https://blog.ndepend.com/net-native-aot-explained/?WT.mc_id=link-twitter-isaacl&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="c-12-primary-constructors-intellisense-xin9le.net"&gt;C# 12 の新機能「Primary Constructors」に対する IntelliSense の神対応 - xin9le.net&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.xin9le.net/entry/2023/12/27/220943"&gt;https://blog.xin9le.net/entry/2023/12/27/220943&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-semantic-kernel-v1.0-handlebars"&gt;.NET の Semantic Kernel v1.0 の使えない子の Handlebars テンプレートを使う方法と注意点&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/microsoft/articles/semantic-kernel-v1-002"&gt;https://zenn.dev/microsoft/articles/semantic-kernel-v1-002&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-semantic-kernel-v1.0"&gt;.NET の Semantic Kernel v1.0 がリリースされたので再復習してみた&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/microsoft/articles/semantic-kernel-v1-001"&gt;https://zenn.dev/microsoft/articles/semantic-kernel-v1-001&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="quartz.net"&gt;Quartz.NETでジョブをスケジュールする&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/oyasumi731/articles/6611ecad604d41"&gt;https://zenn.dev/oyasumi731/articles/6611ecad604d41&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="cthreadthreadpooltask"&gt;C#のThreadとThreadPoolとTaskについて理解する&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/higty/articles/fea5f57cd1b1c2"&gt;https://zenn.dev/higty/articles/fea5f57cd1b1c2&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="serializing-restaurant-tables-in-c"&gt;Serializing restaurant tables in C#&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.ploeh.dk/2023/12/25/serializing-restaurant-tables-in-c/"&gt;https://blog.ploeh.dk/2023/12/25/serializing-restaurant-tables-in-c/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="c-qiita"&gt;【C#】競プロ等で簡単・高速に入力を受け取れるライブラリを作成した話 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/Kujiro/items/facad439eb0873748f87"&gt;https://qiita.com/Kujiro/items/facad439eb0873748f87&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="c-qiita-1"&gt;C#でメソッドチェーンをうまく作る方法 前編 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/dhq_boiler/items/61752b74db5f1fa6dfd5"&gt;https://qiita.com/dhq_boiler/items/61752b74db5f1fa6dfd5&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="distributed-tracing-with-jaeger-and-opentelemetry-in-a-microservices-architecture"&gt;Distributed Tracing with Jaeger and OpenTelemetry in a Microservices Architecture&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;ebubekirdinc/distributed-tracing-with-jaeger-and-opentelemetry-in-a-microservices-architecture-62d69f51d84e"&gt;https://medium.com/&amp;#64;ebubekirdinc/distributed-tracing-with-jaeger-and-opentelemetry-in-a-microservices-architecture-62d69f51d84e&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="c-deque-qiita"&gt;C# で Deque を自作する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/YuHima03/items/e52fdebdf626192c4b1e"&gt;https://qiita.com/YuHima03/items/e52fdebdf626192c4b1e&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="opensilver-2.0vbhello-world-qiita"&gt;OpenSilver 2.0がVB対応したのでHello World!を表示してみた - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/yaju/items/8f210bcc90222fe8826f"&gt;https://qiita.com/yaju/items/8f210bcc90222fe8826f&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="fluent-ui-blazor"&gt;Fluent UI Blazorにおけるスイッチの使用法に関するガイドライン&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/tomokusaba/articles/bec7719e8dc282"&gt;https://zenn.dev/tomokusaba/articles/bec7719e8dc282&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="semantic-kernel"&gt;Semantic Kernelを使って天気を取得してみる&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/tomokusaba/articles/6f56ea6556036e"&gt;https://zenn.dev/tomokusaba/articles/6f56ea6556036e&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="f"&gt;F#でアセンブリプログラミング（基礎知識編）&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/sayurin/articles/22989af1e3833d"&gt;https://zenn.dev/sayurin/articles/22989af1e3833d&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="f-1"&gt;F#でアセンブリプログラミング（準備編）&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/sayurin/articles/6768087198fd70"&gt;https://zenn.dev/sayurin/articles/6768087198fd70&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="f-2"&gt;F#でアセンブリプログラミング（実践編）&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/sayurin/articles/fa986cfe698961"&gt;https://zenn.dev/sayurin/articles/fa986cfe698961&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="cboostdotnext-2-qiita"&gt;C#のBoost、DotNextライブラリ その2 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/up-hash/items/10138710a9d7c9cba209"&gt;https://qiita.com/up-hash/items/10138710a9d7c9cba209&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="github-kristofferstrubeblazor.webauthentication-a-blazor-wrapper-for-the-web-authentication-browser-api"&gt;GitHub - KristofferStrube/Blazor.WebAuthentication: A Blazor wrapper for the Web Authentication browser API.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/KristofferStrube/Blazor.WebAuthentication"&gt;https://github.com/KristofferStrube/Blazor.WebAuthentication&lt;/a&gt;&lt;/p&gt;
&lt;!-- https://x.com/kstrubeg/status/1740133676984246464?s=12&amp;t=ggvrrZ7oLogHyNoIGNgjbw --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Working on using the Web Authentication API in Blazor again today. Added a Minimal API to the sample project to validate the client-side credentials so that we now have a password-free public-key authentication mechanism.&lt;a href="https://twitter.com/hashtag/blazor?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#blazor&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/auth?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#auth&lt;/a&gt;&lt;br&gt;Project: &lt;a href="https://t.co/T9E9vhskaP"&gt;https://t.co/T9E9vhskaP&lt;/a&gt; &lt;a href="https://t.co/MRj6GNZVQi"&gt;pic.twitter.com/MRj6GNZVQi&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kristoffer Strube (&amp;#64;KStrubeG) &lt;a href="https://twitter.com/KStrubeG/status/1740133676984246464?ref_src=twsrc%5Etfw"&gt;December 27, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://x.com/sergiopedri/status/1740826434019434701?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;You can do it, but it&amp;#39;s a bit obscure. If you declare a ReadOnlySpan&amp;lt;T&amp;gt; local of a primitive type, initialized with a collection expression, it will be lowered to an RVA field, meaning it&amp;#39;s functionally speaking static constant data (embedded in the .data section of the PE file).&lt;/p&gt;&amp;mdash; Sergio Pedri (&amp;#64;SergioPedri) &lt;a href="https://twitter.com/SergioPedri/status/1740826434019434701?ref_src=twsrc%5Etfw"&gt;December 29, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;!-- https://x.com/a_taihei/status/1739889509679124589?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="ja" dir="ltr"&gt;今更失敗するまでテストを実行する機能があるのに気付いた &lt;a href="https://t.co/8TuAfiZLtK"&gt;pic.twitter.com/8TuAfiZLtK&lt;/a&gt;&lt;/p&gt;&amp;mdash; たいへー (&amp;#64;a_taihei) &lt;a href="https://twitter.com/a_taihei/status/1739889509679124589?ref_src=twsrc%5Etfw"&gt;December 27, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;!-- https://x.com/egorbo/status/1739696282686439519?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Some JIT magic for you - both methods do the same work, why the _hacker version is faster? 🙃 &lt;a href="https://t.co/i7YdmKWJVy"&gt;pic.twitter.com/i7YdmKWJVy&lt;/a&gt;&lt;/p&gt;&amp;mdash; Egor Bogatov (&amp;#64;EgorBo) &lt;a href="https://twitter.com/EgorBo/status/1739696282686439519?ref_src=twsrc%5Etfw"&gt;December 26, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;!-- https://x.com/steplyakov/status/1737895816050934101?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Here is an example with named method that does the same.&lt;a href="https://twitter.com/jaredpar?ref_src=twsrc%5Etfw"&gt;&amp;#64;jaredpar&lt;/a&gt; this feature feels very dangerous. &lt;a href="https://t.co/iFevCDQEHW"&gt;https://t.co/iFevCDQEHW&lt;/a&gt; &lt;a href="https://t.co/AqjRlpEtWX"&gt;pic.twitter.com/AqjRlpEtWX&lt;/a&gt;&lt;/p&gt;&amp;mdash; Sergiy Teplyakov 🇺🇦 🇺🇸 (&amp;#64;STeplyakov) &lt;a href="https://twitter.com/STeplyakov/status/1737895816050934101?ref_src=twsrc%5Etfw"&gt;December 21, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2023/12/24/updates</id>
		<title>2023-12-24: .NET Aspire Preview 2, OpenSilver 2.0, WCF 8.0</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2023/12/24/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2023-12-24T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="announcing.net-aspire-preview-2.net-blog"&gt;Announcing .NET Aspire Preview 2 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-dotnet-aspire-preview-2/"&gt;https://devblogs.microsoft.com/dotnet/announcing-dotnet-aspire-preview-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Aspire Preview 2 がリリースされた。&lt;/p&gt;
&lt;p&gt;Dashboard の各種ビューの改善やコンテナー実行時の構成カスタマイズ性の向上、MySQL や MongoDB といったコンポーネントの追加など様々な改善が含まれている。&lt;/p&gt;
&lt;h3 id="introducing-opensilver-2.0-opensilver"&gt;Introducing OpenSilver 2.0 - OpenSilver&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://opensilver.net/announcements/2-0/"&gt;https://opensilver.net/announcements/2-0/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OpenSilver 2.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは Visual Basic .NET のサポート、Blazor や React, Angular との統合、デザインタイムライブ XAML プレビュー、拡張レイアウトシステムのサポート、WebView ベースのより高速なシミュレーター、様々なパフォーマンス改善といったものが含まれている。&lt;/p&gt;
&lt;h3 id="release-wcf-8.0-dotnetwcf"&gt;Release WCF 8.0 · dotnet/wcf&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/wcf/releases/tag/v8.0.0-rtm"&gt;https://github.com/dotnet/wcf/releases/tag/v8.0.0-rtm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WCF Client 8.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは構成名を受け取る API が削除された以外の大きな変更はないものの、クライアントサポートポリシーとしてリリースから3年（2026年まで)のサポートが提供される。前バージョンの WCF Client 6.0 のサポート終了は2024年11月までとなっている。&lt;/p&gt;
&lt;h3 id="release-2.3.3-mysql-netmysqlconnector"&gt;Release 2.3.3 · mysql-net/MySqlConnector&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/mysql-net/MySqlConnector/releases/tag/2.3.3"&gt;https://github.com/mysql-net/MySqlConnector/releases/tag/2.3.3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MySQL Connector for .NET 2.3.3/2.3.2 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースではスキーマのサポート強化やいくつかの不具合の修正が含まれている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mysql-net/MySqlConnector/releases/tag/2.3.2"&gt;Release 2.3.2 · mysql-net/MySqlConnector&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="resharper-and-rider-2023.3.2-bug-fixes-have-landed-the.net-tools-blog"&gt;ReSharper and Rider 2023.3.2 – Bug Fixes Have Landed! | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/12/20/resharper-and-rider-2023-3-2-bug-fix/"&gt;https://blog.jetbrains.com/dotnet/2023/12/20/resharper-and-rider-2023-3-2-bug-fix/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper / Rider 2023.3.2 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは ReSharper と Rider ともに 2023.3 リリース以降の様々な不具合が修正されている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/12/13/rsrp-rd-2023-3-1-bug-fix/"&gt;The First Set of Bug-fixes for ReSharper and Rider 2023.3 Are Here! | The .NET Tools Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="wpfui-collaboration-for-win11-theming-dotnetwpf-discussion-8533-github"&gt;WPFUI collaboration for Win11 Theming · dotnet/wpf · Discussion #8533 · GitHub&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/wpf/discussions/8533"&gt;https://github.com/dotnet/wpf/discussions/8533&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WPF に Windows 11 の Fluent UI テーマを持ち込むため、WPFUI とのコラボレーションを行うというアナウンス。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/lepoco/wpfui/discussions/880"&gt;WPF UI x WPF collaboration · lepoco/wpfui · Discussion #880&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="whats-new-in-our-code-coverage-tooling.net-blog"&gt;What's New in Our Code Coverage Tooling? - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/whats-new-in-our-code-coverage-tooling/"&gt;https://devblogs.microsoft.com/dotnet/whats-new-in-our-code-coverage-tooling/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;コードカバレッジツール (Microsoft.CodeCoverage) の新機能について。&lt;/p&gt;
&lt;p&gt;静的インストルメンテーションでのすべてのプラットフォームのサポート、新しいレポート形式のサポート、 dotnet-coverage コマンドの導入、ソリューションの自動マージ、パフォーマンスの改善など。&lt;/p&gt;
&lt;h3 id="advent-calendar-2023"&gt;Advent Calendar 2023&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C# Advent Calendar
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://neue.cc/2023/12/19_zlogger2.html"&gt;neue cc - ZLogger v2 による .NET 8活用事例 と Unity C# 11対応の紹介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/Shaula/items/7622127c60b7c19a0a15"&gt;UnsafeAccessorでprivateメソッドをテストしよう - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kakovail.info/entry/advent_2023_cs"&gt;UntiyからC#を始めたぼくのIEnumerator - Kakoのいろいろやったこと記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/michimichix521/items/fd60471434698c297e88"&gt;C#（.NET）で Min-Max 正規化 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/shimat/articles/d8812d20e803cf"&gt;LINQ - Python チートシート&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/skitoy4321/items/394ebfb6385ef482cada"&gt;StrideでBepuPhysicsを物理エンジンとして使う - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scrapbox.io/hadashiA/async%2Fawait%E3%81%AF%E4%BB%8A%E5%BE%8C%E3%82%82%E3%83%99%E3%82%B9%E3%83%88%E3%83%95%E3%83%AC%E3%83%B3%E3%83%89%E3%81%A7%E3%81%82%E3%82%8A%E7%B6%9A%E3%81%91%E3%82%8B%E3%81%8B"&gt;async/awaitは今後もベストフレンドであり続けるか - hadashiA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/secile/items/21b7da5d32bc44dbb947"&gt;USBカメラを使ってみよう - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/TechNinja/items/ac7faf3363e263b8c619"&gt;機械学習の専門知識がなくてもC#＋ML.NETで高性能なAIが作成できるAutoMLを試してみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/ruccho/articles/a8bbb8f0a58225"&gt;Mono.Cecilでは &amp;quot;.s&amp;quot; 命令にご用心&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/guil/articles/167f6a872d8a81"&gt;Microsoft.Extensions.ObjectPoolを使ってみる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/qa65000/items/64be8bcf45dc2c39b48f"&gt;C#で作る。組み込み用GUIアプリ通信方法について - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/up-hash/items/57b5beb95e8fb7f94e1c"&gt;ジェネリクスツリーで、可変長構造体っぽいことをする🌳 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/nekohei/items/abee7fe81ca9d04221aa"&gt;EF Coreのクエリ式 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/saka_pon/items/ea260f454d8b1c47b377"&gt;mex のライブラリ化 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.neno.dev/entry/2023/12/23/194947"&gt;C# ではじめる OpenTelemetry。 - ねののお庭。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Blazor Advent Calendar
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/jsakamoto/items/3965b7a3c895fe122dc8"&gt;&amp;quot;ゲームなどでよく見る「長押しのボタン」のUIをWEBで表現してみた&amp;quot; を Blazor で実装してみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://koudenpa.hatenablog.com/entry/2023/12/14/000000"&gt;プラモの写真を光らせたい x Blazor WebAssembly x OpenCV - koudenpaのブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/jsakamoto/items/9378a345a96113319102"&gt;Blazor WebAssembly で作った Web アプリ &amp;quot;snow catch&amp;quot; ゲームを、🎙️ボイスコマンド (音声認識) で操作できるようにする - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/jsakamoto/items/15f330fdfcf4ddf9e2c5"&gt;Blazor WebAssembly アプリを .NET 8 の Auto レンダーモードに移行したら InvalidOperationException で動作しない - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/jsakamoto/items/7409fb67c9a8a80880de"&gt;Blazor でも View Transition したい - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/jsakamoto/items/b2a7a4aed0f4d6868340"&gt;Blazor Server で Scoped なサービスに状態保存してたら、.NET 8 の新しい Render Mode では危ないかもね、という話 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/kaorumori/items/a8d03f451a9087573cda"&gt;Blazorアプリで2年間放置していたコードの警告と向き合います - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/jsakamoto/items/8999d0322c64f265369b"&gt;Blazor - サーバーで実行されているのかブラウザで実行されているのかを判別する方法 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/jsakamoto/items/8bb81d11c151cec5920a"&gt;Blazor in .NET 8 の Auto レンダーモードは、.wasm ダウンロード済みでも、WebAssembly モードで動作しない場合がある - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/KennethEHD/items/0aa02369ec5914e76430"&gt;軽量かつ高機能なHAVIT Blazorを使ったBlazor開発 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/jsakamoto/items/a326ddb14b0a7b6c4a74"&gt;[改訂版] Blazor でラジオボタン input 要素に双方向データバインドする方法 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;その他
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/yn-cover/items/6bf9b404bb7685e60b44"&gt;C# と YouTube API を使って VTuber の配信の流行を調べてみる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/meglia/articles/0f7262c09d87dc"&gt;[C#]asyncを利用してCPUバウンドな処理を呼び出すと、スレッドは分散しない&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/h-uminoue-gxp/items/9218fd32a33e3b71edae"&gt;C# + xUnitのプロジェクトでユニットテストの結果とテストカバレッジ率をレポートに出力させる。 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/mania3bb2007/items/fe7fc7ee374ae28dcf37"&gt;SQL CLR と CData ADO.NET Provider を使って、SQL Server から直接kintone にアクセスする - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/lx-sasabo/items/5732e944e290391771bc"&gt;Roslyn API でフィールドとプロパティの型と名称を取得する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/happy_elements/articles/c471ee57b48036"&gt;【C#】In-Place Merge Sort を実装してみた&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/lx-sasabo/items/793a0b5b8b7d56579acb"&gt;Roslyn API でサマリータグのコメントの一行目だけを取得する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="actix-webblazor-webassembly-qiita"&gt;actix-webでBlazor WebAssemblyをホストする - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/TellMin/items/9e7f1e576a195103aa92"&gt;https://qiita.com/TellMin/items/9e7f1e576a195103aa92&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rust の actix-web フレームワークで Blazor WebAssembly アプリケーションをホストする方法について。&lt;/p&gt;
&lt;h3 id="net-aspire-qiita"&gt;.NET Aspireを試してみた - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/hydrangeas/items/b87bd39843eee0633cb0"&gt;https://qiita.com/hydrangeas/items/b87bd39843eee0633cb0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Aspire のプロジェクトを作成し、構成やロギングなどを触ってみた記録。&lt;/p&gt;
&lt;h3 id="net-8grpc-qiita"&gt;.NET 8のプロセス間通信には、gRPCのパイプ通信が優秀なようです - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/spc_ksudoh/items/760a41a73c825eb70e70"&gt;https://qiita.com/spc_ksudoh/items/760a41a73c825eb70e70&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;プロセス間通信の方法として名前付きパイプによる gRPC を使用するメリットとその実装方法について。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/spc_ksudoh/items/b998a0decc772b0e4785"&gt;.NET 8のプロセス間通信には、gRPCのパイプ通信が優秀なようです：その2 具体的なコードの書き方 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="string-interning-to-use-or-not-to-use-a-performance-question"&gt;String Interning - To Use or Not to Use? A Performance Question&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://sergeyteplyakov.github.io/Blog/benchmarking/2023/12/10/Intern_or_Not_Intern.html"&gt;https://sergeyteplyakov.github.io/Blog/benchmarking/2023/12/10/Intern_or_Not_Intern.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;String.Intern のパフォーマンスについて。記事では NativeAOT で実行した場合との差についても触れている。&lt;/p&gt;
&lt;h3 id="a-year-in-recap-celebrating-this-years-milestones"&gt;A Year in Recap: Celebrating this years milestones&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://avaloniaui.net/Blog/a-year-in-recap-celebrating-this-years-milestones"&gt;https://avaloniaui.net/Blog/a-year-in-recap-celebrating-this-years-milestones&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Avalonia の2023年の振り返り記事。&lt;/p&gt;
&lt;h3 id="semantic-kernel"&gt;Semantic Kernelのプロンプトをファイルに書く&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/tomokusaba/articles/379d39dc225b88"&gt;https://zenn.dev/tomokusaba/articles/379d39dc225b88&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Semantic Kernel で使用するプロンプトを外部ファイルに記述しておき、呼び出す方法について。&lt;/p&gt;
&lt;h3 id="c.net"&gt;【C#】初心者におすすめ！コードアナライザーを使おう！【.NET】&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/inuinu/articles/c60abf13d5f47a"&gt;https://zenn.dev/inuinu/articles/c60abf13d5f47a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;アナライザーの使用方法についての解説。組み込みのアナライザーの紹介やアナライザーの抑制方法、Roslynator などのサードパーティーアナライザーの紹介など。&lt;/p&gt;
&lt;h3 id="announcing-the-hacktogether-the-great.net-8-hack-winners.net-blog"&gt;Announcing the HackTogether: The Great .NET 8 Hack Winners - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/great-dotnet-8-hack-winners/"&gt;https://devblogs.microsoft.com/dotnet/great-dotnet-8-hack-winners/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Great .NET 8 Hack イベントの受賞者の発表。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;総合: &lt;a href="https://github.com/tagr/greatnet8hack-techport"&gt;NASA TechPort Headlines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ベスト AI: &lt;a href="https://github.com/ZadokJoshua/betakads-avalonia-app"&gt;Betakads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ベストクラウドネイティブ: &lt;a href="https://github.com/Cloud-Jas/AI-Counselor"&gt;AI Counselor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="semantic-kernel-1"&gt;Semantic Kernelのプロンプトのテンプレート化&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/tomokusaba/articles/a403d9ec250ec8"&gt;https://zenn.dev/tomokusaba/articles/a403d9ec250ec8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Semantic Kernel でプロンプトをテンプレート関数化して呼び出す方法について。&lt;/p&gt;
&lt;h3 id="github-codespaces-semantic-kernel-v1.0.1-handson"&gt;GitHub Codespaces Semantic Kernel v1.0.1 handson&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/ymd65536/articles/semantic_kernel_v101_handson"&gt;https://zenn.dev/ymd65536/articles/semantic_kernel_v101_handson&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Semantic Kernel v1.0.1 を GitHub Codespace と Azure OpenAI で実行するためのセットアップ手順。&lt;/p&gt;
&lt;h3 id="updates-to-the-stronglytypedid-library-simplification-templating-and-codefixes-using-strongly-typed-entity-ids-to-avoid-primitive-obsession-part-8"&gt;Updates to the StronglyTypedId library - simplification, templating, and CodeFixes: Using strongly-typed entity IDs to avoid primitive obsession - Part 8&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/updates-to-the-stronglytypedid-library/"&gt;https://andrewlock.net/updates-to-the-stronglytypedid-library/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;StronglyTypedId ライブラリを再設計し、テンプレート化などの対応を行ったことについて。&lt;/p&gt;
&lt;h3 id="net-8.0-wsl2-ubuntu"&gt;.NET 8.0 を WSL2 Ubuntu にインストールする&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/yukiko_bass/articles/e6f9f22da5f15e"&gt;https://zenn.dev/yukiko_bass/articles/e6f9f22da5f15e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WSL2 の Ubuntu 22.04 に .NET 8 をインストールする手順について。&lt;/p&gt;
&lt;h3 id="naming-made-easy-ai-powered-rename-suggestions-visual-studio-blog"&gt;Naming Made Easy: AI-Powered Rename Suggestions - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/ai-powered-rename-suggestions/"&gt;https://devblogs.microsoft.com/visualstudio/ai-powered-rename-suggestions/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio Preview でサポートされた GitHub Copilot を使用した識別子のリネームサジェスト機能の紹介。&lt;/p&gt;
&lt;h3 id="net-8-blazor-web-app-mudblazor"&gt;.NET 8 の Blazor Web App で MudBlazor を使う&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/tetr4lab/articles/74bd50585434ab"&gt;https://zenn.dev/tetr4lab/articles/74bd50585434ab&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 8 の Blazor Web App で .NET 8 正式対応前の MudBlazor を利用する手順について。&lt;/p&gt;
&lt;h3 id="integrating-openai-image-generation-into-a.net-application"&gt;Integrating OpenAI Image Generation into a .NET Application&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://weblog.west-wind.com/posts/2023/Dec/21/Integrating-OpenAI-image-generation-into-your-NET-Application"&gt;https://weblog.west-wind.com/posts/2023/Dec/21/Integrating-OpenAI-image-generation-into-your-NET-Application&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OpenAI の画像生成 API を .NET から利用する方法やその簡単なラッパーライブラリーの紹介。&lt;/p&gt;
&lt;h3 id="revisiting-wasm-for-f"&gt;Revisiting WASM for F#&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/tunaxor/revisiting-wasm-for-f-38c1"&gt;https://dev.to/tunaxor/revisiting-wasm-for-f-38c1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;F# を Blazor WebAssembly で使用する上でのライブラリーや JavaScript との相互運用について。&lt;/p&gt;
&lt;h3 id="semantic-kernelfunctionsemantic-kernel1.0.1"&gt;Semantic KernelのFunctionを自動的に選択して回答を返すSemantic Kernel1.0.1正式版&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/tomokusaba/articles/e667217a2045cc"&gt;https://zenn.dev/tomokusaba/articles/e667217a2045cc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Semantic Kernel でカスタムの Function を自動的に選択する実装方法について。&lt;/p&gt;
&lt;h3 id="unlocking-the-secrets-of-managed-memory-dive-into-event-handler-leak-insights-visual-studio-blog"&gt;Unlocking the Secrets of Managed Memory: Dive into Event Handler Leak Insights! - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/unlocking-the-secrets-of-managed-memory-dive-into-event-handler-leak-insights/"&gt;https://devblogs.microsoft.com/visualstudio/unlocking-the-secrets-of-managed-memory-dive-into-event-handler-leak-insights/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 17.9 Preview 1 で導入された新しいメモリー分析機能の紹介。&lt;/p&gt;
&lt;p&gt;この機能によってイベントハンドラーのオブジェクトリークを素早く見つけることが可能となるとのこと。&lt;/p&gt;
&lt;h3 id="net-corewindowslinuxtimezoneid"&gt;.NET CoreでWindowsとLinuxでTimeZoneのIDが異なる&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/ynug/articles/dot-net-time-zone"&gt;https://zenn.dev/ynug/articles/dot-net-time-zone&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows と Linux などプラットフォームごとにタイムゾーンの ID が異なることその対処について。&lt;/p&gt;
&lt;h3 id="net-8libraryimportattributesafehandlepublic"&gt;.NET 8からはLibraryImportAttributeで使うSafeHandle型のコンストラクタをpublicにしよう - プログラム系統備忘録ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://tan.hatenadiary.jp/entry/2023/11/23/015139"&gt;https://tan.hatenadiary.jp/entry/2023/11/23/015139&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 8 では LibraryImportAttribute で宣言された外部ライブラリーの呼び出しに使用している SafeHandle 型はコンストラクターを public にする必要がある変更について。&lt;/p&gt;
&lt;p&gt;記事ではどのように生成されるコードが変更され、必要となった理由と経緯などにも触れている。&lt;/p&gt;
&lt;h3 id="fukuoka.net-conf-2023-connpass"&gt;Fukuoka.NET Conf 2023 - connpass&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://fukuten.connpass.com/event/303390/"&gt;https://fukuten.connpass.com/event/303390/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;福岡での .NET Conf 2023 ローカルイベント。2024年2月3日(土)に開催。&lt;/p&gt;
&lt;h3 id="httpcontext-issues-with-azure-signalr-service"&gt;HttpContext Issues with Azure SignalR Service&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/1kevgriff/httpcontext-issues-with-azure-signalr-service-21d0"&gt;https://dev.to/1kevgriff/httpcontext-issues-with-azure-signalr-service-21d0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure SignalR Service では HttpContext を利用できないという固有の特性があり、問題となる場合があることについて。&lt;/p&gt;
&lt;h3 id="nunit4"&gt;NUnit4の新しい非同期アサートを試してみる&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/tomokusaba/articles/890091dd520f08"&gt;https://zenn.dev/tomokusaba/articles/890091dd520f08&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NUnit 4 での非同期アサートについての紹介。&lt;/p&gt;
&lt;h3 id="azure-openai-service-json-tools.net-sdk"&gt;Azure OpenAI Service の JSON モードと tools を .NET SDK で使ってみよう&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/microsoft/articles/aoai-tools-jsonmode-in-dotnet"&gt;https://zenn.dev/microsoft/articles/aoai-tools-jsonmode-in-dotnet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure OpenAI Service の JSON モードと tools プロパティーを .NET 向けの SDK から利用する方法について。&lt;/p&gt;
&lt;h3 id="react-typescript-spa.net-8"&gt;最新の React-TypeScript SPA テンプレートを .NET 8 で試してみよう | ドクセル&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.docswell.com/s/shosuz/Z4QRL8-2023-11-25-172313"&gt;https://www.docswell.com/s/shosuz/Z4QRL8-2023-11-25-172313&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 8 で新しくなった React と ASP.NET Core を組み合わせる SPA テンプレートについての紹介。&lt;/p&gt;
&lt;script async class="docswell-embed" src="https://www.docswell.com/assets/libs/docswell-embed/docswell-embed.min.js" data-src="https://www.docswell.com/slide/Z4QRL8/embed" data-aspect="0.5625"&gt;&lt;/script&gt;&lt;div class="docswell-link"&gt;&lt;a href="https://www.docswell.com/s/shosuz/Z4QRL8-2023-11-25-172313"&gt;最新の React/TypeScript SPA テンプレートを .NET 8 で試してみよう by &amp;#64;shosuz&lt;/a&gt;&lt;/div&gt;
&lt;h3 id="http2-rapid-reset"&gt;お客様、そこは秘孔です！突かないでください！ HTTP/2 Rapid reset の概要と対策&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://speakerdeck.com/murachiakira/2-rapid-reset-nogai-yao-todui-ce"&gt;https://speakerdeck.com/murachiakira/2-rapid-reset-nogai-yao-todui-ce&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;HTTP/2 Rapid Reset 攻撃についての解説。&lt;/p&gt;
&lt;script defer class="speakerdeck-embed" data-id="a4d66795ebb2484ca862ded3cca312f1" data-ratio="1.7777777777777777" src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt;
&lt;h3 id="net-8blazor"&gt;.NET 8世代のBlazorについて&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://speakerdeck.com/tomokusaba/dot-net-8shi-dai-noblazornituite"&gt;https://speakerdeck.com/tomokusaba/dot-net-8shi-dai-noblazornituite&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 8 の Blazor のホスティングモデルの変更点などの簡単な解説。&lt;/p&gt;
&lt;script defer class="speakerdeck-embed" data-id="003c54b2cb844c519cf6b2ad3faab3a2" data-ratio="1.7777777777777777" src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt;
&lt;h3 id="c-opentelemetry"&gt;C# ではじめる OpenTelemetry&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://speakerdeck.com/nenonaninu/c-number-dehazimeru-opentelemetry"&gt;https://speakerdeck.com/nenonaninu/c-number-dehazimeru-opentelemetry&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OpenTelmetry についての紹介から、ASP.NET でのサポートと使い方、SignalR でのトレースなど。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.neno.dev/entry/2023/12/23/194947"&gt;C# ではじめる OpenTelemetry。 - ねののお庭。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;script defer class="speakerdeck-embed" data-id="eeed7ed843954973b65b8adce7089257" data-ratio="1.7777777777777777" src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt;
&lt;h3 id="net-conf-recap-japannight-party"&gt;.NET Conf Recap Japan/Night Party&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ufcpp/DotNetConf2023Recap"&gt;GitHub - ufcpp/DotNetConf2023Recap: .NET Conf 2023 Recap Japan 「開発ツールの最新アップデート」向け&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/ymd65536/articles/dotnet_night_party_2023"&gt;.NET Night Party&amp;#64;品川&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/tomokusaba/articles/e582d24e37d930"&gt;.NET Night Party&amp;#64;品川 ライブコーディング対決&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/tomokusaba/articles/afbf1e0718d3df"&gt;.NET Night Party&amp;#64;品川 ライブコーディング対決 IF Blazor Appsテンプレだったら？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="github-swisslife-osssnapshooter-snapshooter-is-a-snapshot-testing-tool-for.net-core-and.net-framework"&gt;GitHub - SwissLife-OSS/snapshooter: Snapshooter is a snapshot testing tool for .NET Core and .NET Framework&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/SwissLife-OSS/snapshooter"&gt;https://github.com/SwissLife-OSS/snapshooter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET でのスナップショットテストを行うためのライブラリー。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://johnnyreilly.com/snapshot-log-tests-dotnet"&gt;Snapshot log tests in .NET | johnnyreilly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="github-sator-imagingdocfx-pages-deploy-docfx-api-reference-to-github-pages-with-only-1-action"&gt;GitHub - sator-imaging/docfx-pages: Deploy docfx API Reference to GitHub Pages with only 1 Action&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/sator-imaging/docfx-pages"&gt;https://github.com/sator-imaging/docfx-pages&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;docfx を使用して API リファレンスを GitHub Pages にパブリッシュする GitHub Action。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/sator_imaging/items/53d9d9e00ad3059c540a"&gt;docfx + GitHub ページの手抜きテンプレート - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="github-timonkrebsmemoizr-declarative-structured-concurrency-for-c"&gt;GitHub - timonkrebs/MemoizR: Declarative Structured Concurrency for C#&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/timonkrebs/MemoizR"&gt;https://github.com/timonkrebs/MemoizR&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://khalidabuhakmeh.com/memoizr-declarative-structured-concurrency-for-csharp"&gt;MemoizR - Declarative Structured Concurrency for C#&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="sekiban-event-sourcing-and-cqrs-framework-home"&gt;Sekiban - Event Sourcing and CQRS Framework - Home&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.sekiban.dev/"&gt;https://www.sekiban.dev/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure Cosmos DB や AWS Dynamo DB を使用する C# によるイベントソーシングフレームワーク。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/J-Tech-Japan/Sekiban"&gt;GitHub - J-Tech-Japan/Sekiban: Sekiban - Event Sourcing and CQRS Framework using C#. It can store data into Azure Cosmos DB or AWS Dynamo DB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://prtimes.jp/main/html/rd/p/000000003.000103357.html"&gt;株式会社ジェイテックジャパン、C#によるイベントソーシングフレームワーク「Sekiban」をオープンソースソフトウェアとして公開&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;p&gt;ターゲット型によるコレクションリテラルで生成されるコードの違い。&lt;/p&gt;
&lt;!-- https://x.com/steplyakov/status/1737524544171384927?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Collection literals are trickier then you might think (in a good sense).&lt;br&gt;&lt;br&gt;Initialization logic is quite smart. For lists it relies on new CollectionsMarshal API and uses the span to fill the list in a very efficient way.&lt;br&gt;&lt;br&gt;Its way more efficient than collection initializers! &lt;a href="https://t.co/e3ypnpKGay"&gt;pic.twitter.com/e3ypnpKGay&lt;/a&gt;&lt;/p&gt;&amp;mdash; Sergiy Teplyakov 🇺🇦 🇺🇸 (&amp;#64;STeplyakov) &lt;a href="https://twitter.com/STeplyakov/status/1737524544171384927?ref_src=twsrc%5Etfw"&gt;December 20, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;async/await の歴史のはなし。&lt;/p&gt;
&lt;!-- https://x.com/dsymetweets/status/1735396207328162082?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Lord what is this.&lt;br&gt;&lt;br&gt;Some of the **actual** history, peer-reviewed, is in &lt;a href="https://t.co/KqDJF5ifyx"&gt;https://t.co/KqDJF5ifyx&lt;/a&gt;. As indicated there that only touches on the many strands of prior history.&lt;/p&gt;&amp;mdash; Don Syme (&amp;#64;dsymetweets) &lt;a href="https://twitter.com/dsymetweets/status/1735396207328162082?ref_src=twsrc%5Etfw"&gt;December 14, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;!-- https://x.com/davidfowl/status/1735686682354356690?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;I have massive respect for &lt;a href="https://twitter.com/dsymetweets?ref_src=twsrc%5Etfw"&gt;&amp;#64;dsymetweets&lt;/a&gt; and I want to make sure credit (even more credit) is given where it is due, F# created async workflows that heavily influenced C#&amp;#39;s async/await design.&lt;/p&gt;&amp;mdash; David Fowler (&amp;#64;davidfowl) &lt;a href="https://twitter.com/davidfowl/status/1735686682354356690?ref_src=twsrc%5Etfw"&gt;December 15, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;DebuggerDisplay 属性の Name プロパティーを使うことでインデックスの代わりにキーを表示できるという話。&lt;/p&gt;
&lt;!-- https://x.com/nietras1/status/1736703070401155195?s=12&amp;t=ggvrrZ7oLogHyNoIGNgjbw --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Trick is to define custom type with DebuggerDisplay attribute and using Name for the key. Sep uses this too in the SepReader.Row. 👇&lt;a href="https://t.co/mcVv8h5fJV"&gt;https://t.co/mcVv8h5fJV&lt;/a&gt;&lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://t.co/ry3OzenqLt"&gt;https://t.co/ry3OzenqLt&lt;/a&gt; &lt;a href="https://t.co/60jK9tnufS"&gt;pic.twitter.com/60jK9tnufS&lt;/a&gt;&lt;/p&gt;&amp;mdash; nietras 👾 (&amp;#64;nietras1) &lt;a href="https://twitter.com/nietras1/status/1736703070401155195?ref_src=twsrc%5Etfw"&gt;December 18, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;NativeAOT 上で Mono のインタープリターを動かす試み。&lt;/p&gt;
&lt;!-- https://x.com/filipnavara/status/1734996595349836154?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;NativeAOT/LLVM is getting some attention recently. There were experiments with NativeAOT on Android with Jave interop. I did, however, miss that there was also attempt to mix MonoVM interpreter with NativeAOT: &lt;a href="https://t.co/Ap74G4beba"&gt;https://t.co/Ap74G4beba&lt;/a&gt; 😶&lt;/p&gt;&amp;mdash; Filip Navara 🇺🇦 (parody of myself) (&amp;#64;filipnavara) &lt;a href="https://twitter.com/filipnavara/status/1734996595349836154?ref_src=twsrc%5Etfw"&gt;December 13, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2023/12/13/updates</id>
		<title>2023-12-13: Rider and ReSharper 2023.3, BenchmarkDotNet v0.13.11, StackExchange.Redis 2.7.10, WindowsAppSDK 1.5-experimental1</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2023/12/13/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2023-12-13T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="rider-2023.3-support-for.net-8-sdk-the-latest-from-c-12-performance-enhancements-predictive-debugging-and-more-ai-powered-features.the.net-tools-blog"&gt;Rider 2023.3: Support for .NET 8 SDK, the Latest From C# 12, Performance Enhancements, Predictive Debugging, and More AI-powered Features. | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/12/07/rider-2023-3-release/"&gt;https://blog.jetbrains.com/dotnet/2023/12/07/rider-2023-3-release/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="resharper-2023.3-support-for-c-12-performance-enhancements-and-more-ai-powered-features-the.net-tools-blog"&gt;ReSharper 2023.3: Support For C# 12, Performance Enhancements, and More AI-Powered Features | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/12/07/resharper-2023-3-release/"&gt;https://blog.jetbrains.com/dotnet/2023/12/07/resharper-2023-3-release/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="dotcover-dotmemory-dotpeek-and-dottrace-2023.3-release-the.net-tools-blog"&gt;dotCover, dotMemory, dotPeek, and dotTrace 2023.3 Release | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/12/07/dotcover-dotmemory-dotpeek-and-dottrace-2023-3-release/"&gt;https://blog.jetbrains.com/dotnet/2023/12/07/dotcover-dotmemory-dotpeek-and-dottrace-2023-3-release/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="benchmarkdotnet-v0.13.11-dotnetbenchmarkdotnet-discussion-2479"&gt;BenchmarkDotNet v0.13.11 · dotnet/BenchmarkDotNet · Discussion #2479&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/BenchmarkDotNet/discussions/2479"&gt;https://github.com/dotnet/BenchmarkDotNet/discussions/2479&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="release-2.7.10-stackexchangestackexchange.redis"&gt;Release 2.7.10 · StackExchange/StackExchange.Redis&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/StackExchange/StackExchange.Redis/releases/tag/2.7.10"&gt;https://github.com/StackExchange/StackExchange.Redis/releases/tag/2.7.10&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="release-v8.0.1-npgsqlnpgsql"&gt;Release v8.0.1 · npgsql/npgsql&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/npgsql/npgsql/releases/tag/v8.0.1"&gt;https://github.com/npgsql/npgsql/releases/tag/v8.0.1&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="release-11.0.6-avaloniauiavalonia"&gt;Release 11.0.6 · AvaloniaUI/Avalonia&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/AvaloniaUI/Avalonia/releases/tag/11.0.6"&gt;https://github.com/AvaloniaUI/Avalonia/releases/tag/11.0.6&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="release-v1.5-experimental1-microsoftwindowsappsdk"&gt;Release v1.5-experimental1 · microsoft/WindowsAppSDK&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/microsoft/WindowsAppSDK/releases/tag/v1.5-exp1"&gt;https://github.com/microsoft/WindowsAppSDK/releases/tag/v1.5-exp1&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/microsoft/microsoft-ui-xaml/releases/tag/winui3/release/1.5-experimental1"&gt;Release WinUI 3 in WinAppSDK 1.5-experimental1 · microsoft/microsoft-ui-xaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/windows/apps/windows-app-sdk/experimental-channel#version-15-experimental-150-experimental1"&gt;Experimental release channel for the Windows App SDK - Windows apps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="net-8-networking-improvements.net-blog"&gt;.NET 8 Networking Improvements - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-8-networking-improvements/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-8-networking-improvements/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="extending-webassembly-to-the-cloud-with.net.net-blog"&gt;Extending WebAssembly to the Cloud with .NET - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/extending-web-assembly-to-the-cloud/"&gt;https://devblogs.microsoft.com/dotnet/extending-web-assembly-to-the-cloud/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-conf-2023-recap-celebrating-community-innovation-and-the-launch-of.net-8.net-blog"&gt;.NET Conf 2023 Recap - Celebrating Community, Innovation, and the Launch of .NET 8 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-conf-2023-recap-videos-slides-demos-and-more/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-conf-2023-recap-videos-slides-demos-and-more/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="qodana-for.net-8-is-almost-ready-try-the-eap-and-let-us-know-what-you-think-the-qodana-blog"&gt;Qodana for .NET 8 is almost ready! Try the EAP and let us know what you think | The Qodana Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/qodana/2023/12/qodana-for-net-8-is-almost-ready-try-the-eap-and-let-us-know-what-you-think/"&gt;https://blog.jetbrains.com/qodana/2023/12/qodana-for-net-8-is-almost-ready-try-the-eap-and-let-us-know-what-you-think/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="c-advent-calendar-2023"&gt;C# Advent Calendar 2023&lt;/h2&gt;
&lt;h3 id="net-8blazorwebapppwa-qiita"&gt;[.NET 8]素のBlazorWebAppにチョイ足しでPWAを作る - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/nr_ck/items/f22c24c0583309577a5e"&gt;https://qiita.com/nr_ck/items/f22c24c0583309577a5e&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="c12.0.net8.0utf8"&gt;C#12.0 .NET8.0における、Utf8文字列の作り方とパフォーマンス – 技探&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://gitan.dev/?p=320"&gt;https://gitan.dev/?p=320&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="mvvminotifypropertychanged-qiita"&gt;MVVMで、INotifyPropertyChangedを簡潔に使う。コードスニペット付き。 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/hiro_t/items/556868bc6d1f5fd53a6f"&gt;https://qiita.com/hiro_t/items/556868bc6d1f5fd53a6f&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="c"&gt;自作キーボードをちょっとだけ便利にするツールをC#で書いた話&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.alglab.net/archives/csharp-prkkeymap/"&gt;https://blog.alglab.net/archives/csharp-prkkeymap/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-sdk-8.0publishtrimmed-qiita"&gt;.NET SDK 8.0でPublishTrimmedしようとすると失敗する場合がある話 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/skitoy4321/items/c6ae2b58245b6874ec35"&gt;https://qiita.com/skitoy4321/items/c6ae2b58245b6874ec35&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="http-server-c-qiita"&gt;簡易HTTP Serverを作ってみた (C#編) - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/t0r/items/ef2fa3ae15af592e8674"&gt;https://qiita.com/t0r/items/ef2fa3ae15af592e8674&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="if-c-qiita"&gt;迷路みたいなif文が秒で綺麗になる魔法 [C#, タプル, パターンマッチング] - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/hysui/items/ea0b00788f98cbb15980"&gt;https://qiita.com/hysui/items/ea0b00788f98cbb15980&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="cunsafe-annulus-games"&gt;【C#】unsafeコードを書いてみよう - Annulus Games&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://annulusgames.com/blog/unsafe/"&gt;https://annulusgames.com/blog/unsafe/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="stacktrace-qiita"&gt;例外はStackTraceを記録するとき、遡りながら追記していく - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/up-hash/items/47feaf9dbd94763431d7"&gt;https://qiita.com/up-hash/items/47feaf9dbd94763431d7&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="c-qiita"&gt;最新のC#をチーム全員で書くための取り組み - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/wipiano/items/7fbf5d61d68f29fdbd36"&gt;https://qiita.com/wipiano/items/7fbf5d61d68f29fdbd36&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="c-qiita-1"&gt;C#でインラインアセンブラをする - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/up-hash/items/8e9e18c55d23686b2eb1"&gt;https://qiita.com/up-hash/items/8e9e18c55d23686b2eb1&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="microsoft.extensions.configuration.jsonprefix"&gt;Microsoft.Extensions.Configuration.Jsonで読み込んだ設定値にPrefixを付与する&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/guil/articles/dfdcba6a7f4636"&gt;https://zenn.dev/guil/articles/dfdcba6a7f4636&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="const-qiita"&gt;再代入不可能なconst変数風味（小ネタ） - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/up-hash/items/8eb07cdace041896e3e8"&gt;https://qiita.com/up-hash/items/8eb07cdace041896e3e8&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="c-qiita-2"&gt;【C#】抽象クラスとインターフェースを併用する理由を考えた - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/seiya2130/items/6c639efadbfcb279e4ed"&gt;https://qiita.com/seiya2130/items/6c639efadbfcb279e4ed&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="exceldnaasyncawait-qiita"&gt;ExcelDNAで、async/awaitを利用する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/hiro_t/items/f37256a59946c6c0faa7"&gt;https://qiita.com/hiro_t/items/f37256a59946c6c0faa7&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="cdefaultinterpolatedstringhandler-stringbuilder"&gt;【C#】DefaultInterpolatedStringHandler を StringBuilder 的に使う - てくメモ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://aneuf.hatenablog.com/entry/2023/12/12/000000"&gt;https://aneuf.hatenablog.com/entry/2023/12/12/000000&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="cboostdotnext-qiita"&gt;C#のBoost、DotNextライブラリ - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/up-hash/items/059975d06347b81087de"&gt;https://qiita.com/up-hash/items/059975d06347b81087de&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="roslyn-api-qiita"&gt;Roslyn API を使ってみよう！概要編 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/lx-sasabo/items/d3791b305d85bb686ae4"&gt;https://qiita.com/lx-sasabo/items/d3791b305d85bb686ae4&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="c-timeprovider.net8-qiita"&gt;C# TimeProvider の利用について (.NET8) - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/sh1ch/items/936945705d0c7a4ab655"&gt;https://qiita.com/sh1ch/items/936945705d0c7a4ab655&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="ispanformattable-qiita"&gt;ISpanFormattableを使おう - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/Shaula/items/563ef337ae578ceebede"&gt;https://qiita.com/Shaula/items/563ef337ae578ceebede&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="creating-zip-files-in-azure-blob-storage"&gt;Creating Zip Files in Azure Blob Storage&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://markheath.net/post/create-zip-files-in-blob-storage"&gt;https://markheath.net/post/create-zip-files-in-blob-storage&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="blazorbecanvas-qiita"&gt;[Blazor]BECanvasで描画処理 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/onsen_koichi/items/a0d9a88254eec34c1afc"&gt;https://qiita.com/onsen_koichi/items/a0d9a88254eec34c1afc&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-framework-c-qiita"&gt;.NET Framework でも C# の最新機能を使う - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/diontools/items/2d5625419bb4f43da1a5"&gt;https://qiita.com/diontools/items/2d5625419bb4f43da1a5&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="vscode.net-maui-qiita"&gt;VSCodeで.NET MAUIの開発環境構築 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/aqua_ix/items/ba9533d60633abe4c850"&gt;https://qiita.com/aqua_ix/items/ba9533d60633abe4c850&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="c.lab.srt"&gt;【C#】合成音声ソフトのタイミング情報ファイル(.lab)から字幕ファイル(.srt)をつくる&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/inuinu/articles/07ea814ca573c1"&gt;https://zenn.dev/inuinu/articles/07ea814ca573c1&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="skiasharp-qiita"&gt;SkiaSharpを使用しての地図描画 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/ingen084/items/8c4492bfb3cc50129507"&gt;https://qiita.com/ingen084/items/8c4492bfb3cc50129507&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-conf-japan-2023.net-ai"&gt;.NET Conf Japan 2023「.NET + AI」補足記事&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/chomado/articles/231219-dot-net-conf"&gt;https://zenn.dev/chomado/articles/231219-dot-net-conf&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-native-aot-explained-ndepend-blog"&gt;.NET Native AOT Explained - NDepend Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.ndepend.com/net-native-aot-explained/"&gt;https://blog.ndepend.com/net-native-aot-explained/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="semantic-kernel-rc-3"&gt;Semantic Kernel (RC-3 版) ハローワールドを日本語で動かす&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/chomado/articles/231207-semantic-kernel-rc3"&gt;https://zenn.dev/chomado/articles/231207-semantic-kernel-rc3&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="snykc.net-qiita"&gt;Snykでこんなに脆弱性検出できちゃうのかい（C# / .NET 編） - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/akid3020/items/df2fed5ecfd1ec9e4d33"&gt;https://qiita.com/akid3020/items/df2fed5ecfd1ec9e4d33&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="learn.net-8-with-new-beginner-videos.net-blog"&gt;Learn .NET 8 with New Beginner Videos - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/learn-dotnet8-beginner-videos/"&gt;https://devblogs.microsoft.com/dotnet/learn-dotnet8-beginner-videos/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="windows.data.pdfuwp"&gt;Windows.Data.Pdfを非UWP環境で使う&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/nuits_jp/articles/2023-12-06-use-windows-data-pdf-out-of-uwp"&gt;https://zenn.dev/nuits_jp/articles/2023-12-06-use-windows-data-pdf-out-of-uwp&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="netpdfjpeg"&gt;.NETでPDF⇒JPEG変換をベンチマークしてみた&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/nuits_jp/articles/2023-12-06-pdf-to-jpeg-benchmarks"&gt;https://zenn.dev/nuits_jp/articles/2023-12-06-pdf-to-jpeg-benchmarks&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="ridersource-generator-qiita"&gt;RiderでSource Generatorを使用したツールを作成するフローを紹介 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/Tanakancolle/items/b12c48e0cf0fe78af2ad"&gt;https://qiita.com/Tanakancolle/items/b12c48e0cf0fe78af2ad&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="optimizing.net-solution-architecture-for-faster-compilation-through-project-decoupling"&gt;Optimizing .NET solution architecture for faster compilation through project decoupling&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/asimmon/optimizing-net-solution-architecture-for-faster-compilation-through-project-decoupling-5eg6"&gt;https://dev.to/asimmon/optimizing-net-solution-architecture-for-faster-compilation-through-project-decoupling-5eg6&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-8mvvmblazor-web-app-qiita"&gt;[.NET 8]MVVMで作るBlazor Web App - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/nr_ck/items/6faa86c5e381fb96c67a"&gt;https://qiita.com/nr_ck/items/6faa86c5e381fb96c67a&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="enriching-logs-with-tagprovider-and-ilogenricher"&gt;Enriching logs with [TagProvider] and ILogEnricher&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/customising-the-new-telemetry-logging-source-generator/"&gt;https://andrewlock.net/customising-the-new-telemetry-logging-source-generator/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-aspire"&gt;.NET Aspire&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://henriquesd.medium.com/net-aspire-296e24b952c0"&gt;https://henriquesd.medium.com/net-aspire-296e24b952c0&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="scroll-to-expand-document-tabs-visual-studio-blog"&gt;Scroll to expand document tabs - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/scroll-to-expand-document-tabs/"&gt;https://devblogs.microsoft.com/visualstudio/scroll-to-expand-document-tabs/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="another-look-into-the-future-with-riders-predictive-debugger-the.net-tools-blog"&gt;Another Look into the Future with Rider's Predictive Debugger | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/12/04/another-look-into-the-future-with-riders-predictive-debugger/"&gt;https://blog.jetbrains.com/dotnet/2023/12/04/another-look-into-the-future-with-riders-predictive-debugger/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="global-error-handling-in-asp.net-core-8"&gt;Global Error Handling in ASP.NET Core 8&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/milanjovanovictech/global-error-handling-in-aspnet-core-8-2mki"&gt;https://dev.to/milanjovanovictech/global-error-handling-in-aspnet-core-8-2mki&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net8application-insightstraceinformation-qiita"&gt;.NET8のApplication InsightsでTrace/Informationログをタイムラインに出す方法 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/hydrangeas/items/bca8ecc5d5cb0f14a37c"&gt;https://qiita.com/hydrangeas/items/bca8ecc5d5cb0f14a37c&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="dependency-injection-using-keyed-services-is-finally-in-asp.net"&gt;Dependency Injection using keyed services is finally in ASP.NET&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.elmah.io/dependency-injection-using-keyed-services-is-finally-in-asp-net/"&gt;https://blog.elmah.io/dependency-injection-using-keyed-services-is-finally-in-asp-net/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="how.net-8.0-boosted-json-schema-performance-by-20-endjin"&gt;How .NET 8.0 boosted JSON Schema performance by 20% | endjin&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.endjin.com/blog/2023/12/how-dotnet-8-boosted-json-schema-performance-by-20-percent-for-free"&gt;https://www.endjin.com/blog/2023/12/how-dotnet-8-boosted-json-schema-performance-by-20-percent-for-free&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="adding-environment-vars-to.net-aspire-services"&gt;Adding environment vars to .NET Aspire services&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://timheuer.com/blog/add-environment-variables-to-aspire-services/"&gt;https://timheuer.com/blog/add-environment-variables-to-aspire-services/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="how-to-make-libraries-compatible-with-native-aot.net-blog"&gt;How to make libraries compatible with native AOT - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/creating-aot-compatible-libraries/"&gt;https://devblogs.microsoft.com/dotnet/creating-aot-compatible-libraries/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="e"&gt;\e (エスケープ文字のエスケープ シーケンス)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2023/12/escape-escape/"&gt;https://ufcpp.net/blog/2023/12/escape-escape/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="testing-typesense-search-with-testcontainers-and.net"&gt;Testing Typesense search with Testcontainers and .NET&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://khalidabuhakmeh.com/testing-typesense-search-with-testcontainers-and-dotnet"&gt;https://khalidabuhakmeh.com/testing-typesense-search-with-testcontainers-and-dotnet&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="building-a-bare-metal-bootable-game-for-raspberry-pi-in-c"&gt;Building a bare-metal bootable game for Raspberry Pi in C#&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://migeel.sk/blog/2023/12/08/building-bare-metal-bootable-game-for-raspberry-pi-in-csharp/"&gt;https://migeel.sk/blog/2023/12/08/building-bare-metal-bootable-game-for-raspberry-pi-in-csharp/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="pre-commit-hooks-with-husky.net-build-format-and-test-your.net-application-before-a-git-commit"&gt;Pre-commit hooks with Husky.NET - build, format, and test your .NET application before a Git commit&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/bellonedavide/pre-commit-hooks-with-huskynet-build-format-and-test-your-net-application-before-a-git-commit-3cbd"&gt;https://dev.to/bellonedavide/pre-commit-hooks-with-huskynet-build-format-and-test-your-net-application-before-a-git-commit-3cbd&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="redacting-sensitive-data-in-logs-with-microsoft.extensions.compliance.redaction"&gt;Redacting sensitive data in logs with Microsoft.Extensions.Compliance.Redaction&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/redacting-sensitive-data-with-microsoft-extensions-compliance/"&gt;https://andrewlock.net/redacting-sensitive-data-with-microsoft-extensions-compliance/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-native-aot-hardware-intrinsics"&gt;.NET Native AOT で Hardware Intrinsics を使用する&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/naminodarie/articles/dotnet_native_aot_i"&gt;https://zenn.dev/naminodarie/articles/dotnet_native_aot_i&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-annotated-monthly-december-2023-the.net-tools-blog"&gt;.NET Annotated Monthly | December 2023 | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/12/11/net-annotated-monthly-december-2023/"&gt;https://blog.jetbrains.com/dotnet/2023/12/11/net-annotated-monthly-december-2023/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="github-actions-visual-studio-marketplace"&gt;GitHub Actions - Visual Studio Marketplace&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=TimHeuer.GitHubActionsVS"&gt;https://marketplace.visualstudio.com/items?itemName=TimHeuer.GitHubActionsVS&lt;/a&gt;&lt;/p&gt;
&lt;!-- https://x.com/timheuer/status/1731011137389695140?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Just a reminder that if you are a &lt;a href="https://twitter.com/VisualStudio?ref_src=twsrc%5Etfw"&gt;&amp;#64;VisualStudio&lt;/a&gt; user and work with GitHub Actions, you can trigger and observe workflow runs, add/edit secrets from VS with this extension: &lt;a href="https://t.co/OQpQufn97d"&gt;https://t.co/OQpQufn97d&lt;/a&gt; &lt;a href="https://t.co/0dbImYj580"&gt;pic.twitter.com/0dbImYj580&lt;/a&gt;&lt;/p&gt;&amp;mdash; Tim (&amp;#64;timheuer) &lt;a href="https://twitter.com/timheuer/status/1731011137389695140?ref_src=twsrc%5Etfw"&gt;December 2, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://x.com/aaronontheweb/status/1731500517816201611?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Hacking on .NET 8&amp;#39;s QUIC APIs and using &lt;a href="https://twitter.com/AkkaDotNET?ref_src=twsrc%5Etfw"&gt;&amp;#64;AkkaDotNET&lt;/a&gt; to build some custom protocol servers here: &lt;a href="https://t.co/9xk1jAGsIz"&gt;https://t.co/9xk1jAGsIz&lt;/a&gt;&lt;br&gt;&lt;br&gt;Hope to have a reactive &amp;quot;hello world&amp;quot; echo server done by the end of the week - left a set of questions I&amp;#39;m wrestling with in the README&lt;/p&gt;&amp;mdash; Aaron Stannard (&amp;#64;Aaronontheweb) &lt;a href="https://twitter.com/Aaronontheweb/status/1731500517816201611?ref_src=twsrc%5Etfw"&gt;December 4, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2023/12/06/updates</id>
		<title>2023-12-06: C# Advent Calendar, NUnit 4.0.1, ML.NET 3.0</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2023/12/06/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2023-12-06T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="c-advent-calendar-2023-qiita"&gt;C#のカレンダー | Advent Calendar 2023 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/advent-calendar/2023/csharplang"&gt;https://qiita.com/advent-calendar/2023/csharplang&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2023 年の C# Advent Calendar が現在進行中。&lt;/p&gt;
&lt;h3 id="nunit-4.0.1-framework-release-nunit-docs"&gt;NUnit 4.0.1 | Framework Release | NUnit Docs&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.nunit.org/articles/nunit/release-notes/framework.html#nunit-401---december-2-2023"&gt;https://docs.nunit.org/articles/nunit/release-notes/framework.html#nunit-401---december-2-2023&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NUnit 4.0.0/4.0.1 がリリースされた。&lt;/p&gt;
&lt;p&gt;TestCaseSource の非同期対応、.NET 6 ターゲット対応、テストのキャンセル(CancelAfter) など多くの改善や修正が含まれている他、.NET Framework 3.5, 4.0, 4.5, .NET Core 2.1 といったターゲットの削除も行われている。&lt;/p&gt;
&lt;h3 id="announcing-ml.net-3.0.net-blog"&gt;Announcing ML.NET 3.0 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-ml-net-3-0/"&gt;https://devblogs.microsoft.com/dotnet/announcing-ml-net-3-0/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ML.NET 3.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは物体検出 API、質問応答(QA)と固有表現抽出(NER)、Intel oneDAL ハードウェアトレーニングアクセラレーション、AutoML の改善、DataFrame のアップデート、Tensor プリミティブの統合などが含まれる。&lt;/p&gt;
&lt;h3 id="release-v2.5.140-messagepack-csharpmessagepack-csharp"&gt;Release v2.5.140 · MessagePack-CSharp/MessagePack-CSharp&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/MessagePack-CSharp/MessagePack-CSharp/releases/tag/v2.5.140"&gt;https://github.com/MessagePack-CSharp/MessagePack-CSharp/releases/tag/v2.5.140&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MessagePack v2.5.140 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは Mono ランタイムでの不具合の対応などが含まれている。&lt;/p&gt;
&lt;h3 id="the-developer-ecosystem-in-2023-key-trends-for-c-the.net-tools-blog"&gt;The Developer Ecosystem in 2023: Key Trends for C# | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/11/30/the-developer-ecosystem-in-2023-key-trends-for-csharp/"&gt;https://blog.jetbrains.com/dotnet/2023/11/30/the-developer-ecosystem-in-2023-key-trends-for-csharp/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JetBrains による C# 開発者のエコシステムのトレンド調査結果。&lt;/p&gt;
&lt;p&gt;ASP.NET Core で利用している機能、C# バージョン、開発対象、IDE やエディタ、プラグインの使用状況など。&lt;/p&gt;
&lt;h3 id="the-resharper-2023.3-release-candidate-is-now-available-the.net-tools-blog"&gt;The ReSharper 2023.3 Release Candidate Is Now Available | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/11/29/the-resharper-2023-3-rc/"&gt;https://blog.jetbrains.com/dotnet/2023/11/29/the-resharper-2023-3-rc/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper 2023.3 Release Candidate がリリースされた。&lt;/p&gt;
&lt;p&gt;AI アシスタントの強化、C# 12 のサポート、Entity Framework 関連の調査とダイアグラム、UI の改善、Razor のフォーマットエンジンの刷新、ユニットテストの AI 生成、新しい文法およびスペルチェッカーなど。&lt;/p&gt;
&lt;h3 id="the-rider-2023.3-release-candidate-is-now-available-the.net-tools-blog"&gt;The Rider 2023.3 Release Candidate Is Now Available | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/11/29/the-rider-2023-3-rc/"&gt;https://blog.jetbrains.com/dotnet/2023/11/29/the-rider-2023-3-rc/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider 2023.3 Release Candidate がリリースされた。&lt;/p&gt;
&lt;p&gt;AI アシスタントの強化、C# 12 および F# 8 を含む .NET 8 SDK のサポート、複数プロジェクトのスタートアップの改善、型の依存関係ダイアグラム、予測デバッグ、ユニットテストの AI 生成など様々な新機能を含む。&lt;/p&gt;
&lt;h3 id="six-labors-announcing-imagesharp-3.1.0"&gt;Six Labors : Announcing ImageSharp 3.1.0&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://sixlabors.com/posts/announcing-imagesharp-310/"&gt;https://sixlabors.com/posts/announcing-imagesharp-310/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ImageSharp 3.1.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースではアニメーション WebP や PNG のサポート、Quite Ok (Qoi) のサポート、デコーダーの信頼性の向上、各種パフォーマンスの向上。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="blazor-web-app-oauth-asp.net-core-8.0"&gt;Blazor Web App でOAuth認証を最小規模で使う (ASP.NET Core 8.0)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/tetr4lab/articles/1946ec08aec508"&gt;https://zenn.dev/tetr4lab/articles/1946ec08aec508&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 8 の Blazor Web App で Google OAuth 認証を実装する方法について。&lt;/p&gt;
&lt;h3 id="bitmapsourcebitmap"&gt;BitmapSourceからBitmapへ変換するベストプラクティス&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/nuits_jp/articles/2023-12-03-convert-bitmapsource-to-bitmap"&gt;https://zenn.dev/nuits_jp/articles/2023-12-03-convert-bitmapsource-to-bitmap&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WPF において BitmapSource から Bitmap へ変換する方法として良い方法の紹介。&lt;/p&gt;
&lt;h3 id="mac.net-maui-ios-iphone-qiita"&gt;【Mac不要】.NET MAUI 製 iOS アプリを iPhone に手軽にデバッグ配備する手順 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/kami_teru/items/b2a6bd77f7c836ae3d1e"&gt;https://qiita.com/kami_teru/items/b2a6bd77f7c836ae3d1e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows のみで Visual Studio から .NET MAUI 製の iOS アプリを iPhone 等の実機でデバッグ実行する方法について。&lt;/p&gt;
&lt;h3 id="net8blazor-wasmasp.net-core-hosted"&gt;.Net8のBlazor WASMでASP.Net Core Hostedの構成を作る方法&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/vigilanteyu/articles/d7a47dff63e8e2"&gt;https://zenn.dev/vigilanteyu/articles/d7a47dff63e8e2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 まであった Blazor WebAssembly の ASP.NET Core Hosted 相当の構成を .NET 8 でも実現する方法について。&lt;/p&gt;
&lt;h3 id="visual-basic-2023-qiita"&gt;Visual Basic 2023年振り返り - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/yaju/items/97c7d6ae94a303bdbb5b"&gt;https://qiita.com/yaju/items/97c7d6ae94a303bdbb5b&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;今年の Visual Basic .NET を含めた Visual Basic に関するトピックのまとめ。&lt;/p&gt;
&lt;h3 id="storing-local-data-in-a.net-maui-blazor-hybrid-app-using-indexeddb-part-1"&gt;Storing local data in a .NET MAUI Blazor Hybrid App using IndexedDB - Part 1&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/icebeam7/storing-local-data-in-a-net-maui-blazor-hybrid-app-using-indexeddb-part-1-3hn2"&gt;https://dev.to/icebeam7/storing-local-data-in-a-net-maui-blazor-hybrid-app-using-indexeddb-part-1-3hn2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI Blazor Hybrid アプリで IndexedDB を使用してローカルデータを保存する方法について。&lt;/p&gt;
&lt;h3 id="imagemagickimagesharpsystem.drawing"&gt;ImageMagickとImageSharpとSystem.Drawingの性能評価してみた&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/nuits_jp/articles/2023-12-01-imagemagic-imagesharp-benchmarks"&gt;https://zenn.dev/nuits_jp/articles/2023-12-01-imagemagic-imagesharp-benchmarks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;画像を操作するライブラリーの Magick.NET (ImageMagick) と ImageSharp と System.Drawing の性能の比較。
記事ではデコード、クロップ、二値化の処理を .NET Framework と .NET 8 で比較している。&lt;/p&gt;
&lt;h3 id="how.net-8.0-boosted-ais.net-performance-by-27-endjin"&gt;How .NET 8.0 boosted AIS.NET performance by 27% | endjin&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://endjin.com/blog/2023/11/how-dotnet-8-boosted-ais-dotnet-performance-by-27-percent-for-free"&gt;https://endjin.com/blog/2023/11/how-dotnet-8-boosted-ais-dotnet-performance-by-27-percent-for-free&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AIS デコーダー (AIS は船舶の無線メッセージ) を解析するライブラリーである AIS.NET を .NET 8 で実行した場合にパフォーマンスが大きく改善されたことについて。&lt;/p&gt;
&lt;h3 id="my-favorite-features-in-visual-studio-17.8-visual-studio-blog"&gt;My favorite features in Visual Studio 17.8 - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/my-favorite-features-in-visual-studio-17-8/"&gt;https://devblogs.microsoft.com/visualstudio/my-favorite-features-in-visual-studio-17-8/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Mads Kristensen 氏のおすすめする Visual Studio 2022 version 17.8 の新機能の紹介。&lt;/p&gt;
&lt;p&gt;記事では大文字小文字を維持したままの検索と置換、リッチな Pull request 体験といった機能を紹介している。&lt;/p&gt;
&lt;h3 id="behind-logproperties-and-the-new-telemetry-logging-source-generator"&gt;Behind [LogProperties] and the new telemetry logging source generator&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/behind-logproperties-and-the-new-telemetry-logging-source-generator/"&gt;https://andrewlock.net/behind-logproperties-and-the-new-telemetry-logging-source-generator/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 8 と共に提供された  Microsoft.Extensions.Telemetry.Abstractions にふくまれる、ログにプロパティーの値を残す &lt;code&gt;LogProperties&lt;/code&gt; 属性についての解説。&lt;/p&gt;
&lt;h3 id="alllinq-qiita"&gt;【Allって】LINQ、この場合どうなる？【空配列は？】 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/RyotaMurohoshi/items/bf45f4e7d52e6aad8ef7"&gt;https://qiita.com/RyotaMurohoshi/items/bf45f4e7d52e6aad8ef7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# Advent Calendar 2023 の1日目の記事。LINQ の All を空の配列に対して実行した場合の結果や、同点となる要素がある場合の OrderBy の結果などのコーナーケースを解説。&lt;/p&gt;
&lt;h3 id="vscode-c"&gt;VSCode で C# のブロック&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://aquasoftware.net/blog/?p=1975"&gt;https://aquasoftware.net/blog/?p=1975&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# Advent Calendar 2023 の2日目の記事。C# のコードフォーマット設定でブレースの前後の開業を設定する方法について。&lt;/p&gt;
&lt;h3 id="the-rise-of-c-markup-for-cross-platform-development"&gt;The Rise of C# Markup for Cross Platform Development&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://platform.uno/blog/the-rise-of-c-markup-for-cross-platform-development/"&gt;https://platform.uno/blog/the-rise-of-c-markup-for-cross-platform-development/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Uno Platform の C# での UI 記述方法である C# マークアップについての紹介。&lt;/p&gt;
&lt;h3 id="hot-reload-for-c-dev-kit"&gt;Hot Reload for C# Dev Kit&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.poppastring.com/blog/hot-reload-for-c-dev-kit"&gt;https://www.poppastring.com/blog/hot-reload-for-c-dev-kit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio Code の拡張 C# Dev Kit で実験的機能の Hot Reload を有効にする方法について。&lt;/p&gt;
&lt;h3 id="omnisharp-vim-ide0001-qiita"&gt;OmniSharp-Vim で IDE0001 などのコードスタイルの分析結果を表示する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/lx-sasabo/items/4ceb7be5e2721e4e52f8"&gt;https://qiita.com/lx-sasabo/items/4ceb7be5e2721e4e52f8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OmniSharp-Vim で Analyzer 等のコード解析結果を表示する方法について。&lt;/p&gt;
&lt;h3 id="net-8-blazor-ssr-javascript"&gt;.NET 8 の Blazor の静的 サーバー レンダリング (SSR) で JavaScript を使う方法&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/microsoft/articles/aspnetcore-blazor-dotnet8-jsinterop"&gt;https://zenn.dev/microsoft/articles/aspnetcore-blazor-dotnet8-jsinterop&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 8 の Blazor で静的サーバーレンダリング (SSR) を使用した際にカスタムな JavaScript を実装、実行する方法について。&lt;/p&gt;
&lt;h3 id="net-httpclient-timeout-jsakamoto"&gt;.NET の HttpClient の Timeout は何の時間切れを指しているのか | &amp;#64;jsakamoto&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devadjust.exblog.jp/29756261/"&gt;https://devadjust.exblog.jp/29756261/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;HttpClient に設定できる Timeout が実際にはどのように作用するのかについての解説。&lt;/p&gt;
&lt;h3 id="embedding-a-minimal-asp.net-web-server-into-a-desktop-application"&gt;Embedding a minimal ASP.NET Web Server into a Desktop Application&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://weblog.west-wind.com/posts/2023/Nov/27/Embed-a-minimal-ASPNET-Web-Server-into-a-Desktop-Application"&gt;https://weblog.west-wind.com/posts/2023/Nov/27/Embed-a-minimal-ASPNET-Web-Server-into-a-Desktop-Application&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;デスクトップアプリケーションに最小の ASP.NET Core サーバーを組み込む方法について。&lt;/p&gt;
&lt;h3 id="cfaketimeprovider-fakelogger"&gt;【C#】FakeTimeProvider と FakeLogger を試す - てくメモ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://aneuf.hatenablog.com/entry/2023/11/27/210000"&gt;https://aneuf.hatenablog.com/entry/2023/11/27/210000&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 8 で導入された &lt;code&gt;ITimeProvider&lt;/code&gt; の Fake 実装となる &lt;code&gt;FakeTimeProvider&lt;/code&gt; と新たに導入された &lt;code&gt;ILogger&lt;/code&gt; の Fake 実装となる &lt;code&gt;FakeLogger&lt;/code&gt; についての紹介。&lt;/p&gt;
&lt;h3 id="c-collectionbuilder"&gt;【C#】コレクション式 ： 独自型でコレクション式を使ってみる (CollectionBuilder 属性) - てくメモ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://aneuf.hatenablog.com/entry/2023/11/24/210000"&gt;https://aneuf.hatenablog.com/entry/2023/11/24/210000&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 12 のコレクション式を独自型で実現する &lt;code&gt;CollectionBuilderAttribute&lt;/code&gt; とそれを使用した実装方法について。&lt;/p&gt;
&lt;h3 id="cdependency-injection-annulus-games"&gt;【C#】Dependency Injection(依存性の注入)とは - Annulus Games&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://annulusgames.com/blog/dependency-injection/"&gt;https://annulusgames.com/blog/dependency-injection/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Dependency Injection についての解説。サービスロケーターとその問題点、 DI コンテナーとして Microsoft.Extensions.DependencyInjection を例にした各種例、.NET/Unity 向けの M.E.DI 以外の DI コンテナーの紹介など。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="thomhurstmodularpipelines-write-your-pipelines-in-c"&gt;thomhurst/ModularPipelines: Write your pipelines in C# !&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/thomhurst/ModularPipelines"&gt;https://github.com/thomhurst/ModularPipelines&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;モジュールを組み合わせて何らかの処理/作業をパイプラインを作るフレームワーク。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/&amp;#64;thomhurst/write-your-pipelines-in-c-using-modularpipelines-226de1a24bb7"&gt;Write your pipelines in C# using ModularPipelines&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="nenonaninuaspnetcore.signalr.opentelemetry-this-is-an-instrumentation-library-which-instruments-asp.net-core-signalr-and-collect-metrics-and-traces-about-signalr-hub-method-invocations"&gt;nenoNaninu/AspNetCore.SignalR.OpenTelemetry: This is an Instrumentation Library, which instruments ASP.NET Core SignalR and collect metrics and traces about SignalR hub method invocations.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/nenoNaninu/AspNetCore.SignalR.OpenTelemetry"&gt;https://github.com/nenoNaninu/AspNetCore.SignalR.OpenTelemetry&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SignalR のメトリックを OpenTelemtry に流すためのライブラリー。&lt;/p&gt;
&lt;!-- https://x.com/nenomake/status/1730229080455303389?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="ja" dir="ltr"&gt;OpenTelemetry を SignalR でも有効活用するためのライブラリをリリースしました！とりあえずトレースだけはできるようにしたのですが、順次いろいろなメトリクス計測できるようにアップデートしていきます...!&lt;a href="https://t.co/C11Q0fcox2"&gt;https://t.co/C11Q0fcox2&lt;/a&gt;&lt;/p&gt;&amp;mdash; 何縫ねの。 (&amp;#64;nenoMake) &lt;a href="https://twitter.com/nenoMake/status/1730229080455303389?ref_src=twsrc%5Etfw"&gt;November 30, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="debug-output-filter-visual-studio-marketplace"&gt;Debug Output Filter - Visual Studio Marketplace&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=GrantDavies.NiahTextFilter2022"&gt;https://marketplace.visualstudio.com/items?itemName=GrantDavies.NiahTextFilter2022&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;デバッグ出力の履歴やフィルタリングを行える Visual Studio 拡張。&lt;/p&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;p&gt;Avalonia XPF (Avalonia によるクロスプラットフォーム WPF 互換キット) を使って PerfView をブラウザーで動かせた、という話。&lt;/p&gt;
&lt;!-- https://twitter.com/AvaloniaUI/status/1729403695392059887 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Many of you have been curious about Avalonia XPF in the browser. &lt;br&gt;&lt;br&gt;Good news! We&amp;#39;re on track for private previews next year. 🌟 &lt;br&gt;&lt;br&gt;For now, enjoy this sneak peek: Microsoft&amp;#39;s PerfView running in the browser!  🚀 &lt;a href="https://t.co/5KmSOMfJ9j"&gt;pic.twitter.com/5KmSOMfJ9j&lt;/a&gt;&lt;/p&gt;&amp;mdash; Avalonia UI (&amp;#64;AvaloniaUI) &lt;a href="https://twitter.com/AvaloniaUI/status/1729403695392059887?ref_src=twsrc%5Etfw"&gt;November 28, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;空のクラスやインターフェースを定義する際に &lt;code&gt;;&lt;/code&gt; でボディーなしで宣言できて便利という話。&lt;/p&gt;
&lt;!-- https://x.com/sergiopedri/status/1730233715345826173?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;There&amp;#39;s a small new little feature in C# 12 that I think most didn&amp;#39;t notice. You can now declare empty class, record and interface types without specifying a body at all, just with a semicolon token. It&amp;#39;s not even called out in the docs, I should go update them 😄&lt;a href="https://twitter.com/hashtag/csharp?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#csharp&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://t.co/Vsjxld9lZt"&gt;pic.twitter.com/Vsjxld9lZt&lt;/a&gt;&lt;/p&gt;&amp;mdash; Sergio Pedri (&amp;#64;SergioPedri) &lt;a href="https://twitter.com/SergioPedri/status/1730233715345826173?ref_src=twsrc%5Etfw"&gt;November 30, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;プロファイリングする際に、アプリを起動時にはプロファイリングを一時停止するという機能について。&lt;/p&gt;
&lt;!-- https://x.com/vs_debugger/status/1730647909279166974?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;🛠️ Introducing the &amp;quot;start-pause&amp;quot; feature in application profiling—launch your app without immediate data collection for seamless game development experiences! 🎮 Resume data collection with a click. Compatible with both native and managed projects.&lt;a href="https://twitter.com/hashtag/vsdebuggertip?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#vsdebuggertip&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/VS2022?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#VS2022&lt;/a&gt; 17.9 P1 &lt;a href="https://t.co/Py6LqdMqMv"&gt;pic.twitter.com/Py6LqdMqMv&lt;/a&gt;&lt;/p&gt;&amp;mdash; Visual Studio Debugger (&amp;#64;VS_Debugger) &lt;a href="https://twitter.com/VS_Debugger/status/1730647909279166974?ref_src=twsrc%5Etfw"&gt;December 1, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Ghidra のスクリプトで Native AOT の String 検索ができるようにしたという話。&lt;/p&gt;
&lt;!-- https://x.com/washi_dev/status/1725270583011688726?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Ever tried &lt;a href="https://twitter.com/hashtag/reversing?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#reversing&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; binaries compiled with &lt;a href="https://twitter.com/hashtag/nativeaot?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#nativeaot&lt;/a&gt;? I decided to publish some of my (hacky) &lt;a href="https://twitter.com/hashtag/ghidra?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#ghidra&lt;/a&gt; scripts that may help you out with mundane tasks like finding strings.&lt;br&gt;&lt;br&gt;👉&lt;a href="https://t.co/BRU8EyeTq0"&gt;https://t.co/BRU8EyeTq0&lt;/a&gt;&lt;br&gt;&lt;br&gt;The scripts could probably use some work but at least it&amp;#39;s a start😃 &lt;a href="https://t.co/QrSWnu5Tgw"&gt;pic.twitter.com/QrSWnu5Tgw&lt;/a&gt;&lt;/p&gt;&amp;mdash; Washi (&amp;#64;washi_dev) &lt;a href="https://twitter.com/washi_dev/status/1725270583011688726?ref_src=twsrc%5Etfw"&gt;November 16, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;PolySharp で C# 12 の新しい polyfill が利用できるようになったという話。&lt;/p&gt;
&lt;!-- https://x.com/sergiopedri/status/1729878697824698514?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Just released a new version of PolySharp w/ new polyfills to make it super easy to leverage C# 12 features downlevel! Just enable C# 12 in your .NET Standard, .NET Framework, UWP, etc. project and have fun with all the new cool features! 🎉&lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/csharp?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#csharp&lt;/a&gt;&lt;a href="https://t.co/ZuhYzUgip0"&gt;https://t.co/ZuhYzUgip0&lt;/a&gt; &lt;a href="https://t.co/A1emi4WLUM"&gt;pic.twitter.com/A1emi4WLUM&lt;/a&gt;&lt;/p&gt;&amp;mdash; Sergio Pedri (&amp;#64;SergioPedri) &lt;a href="https://twitter.com/SergioPedri/status/1729878697824698514?ref_src=twsrc%5Etfw"&gt;November 29, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;&lt;code&gt;[InlineArray]&lt;/code&gt; の最大値は 1MB&lt;/p&gt;
&lt;!-- https://x.com/hypeartistmusic/status/1728123597968011688?s=12&amp;t=ggvrrZ7oLogHyNoIGNgjbw --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;TIL: Overall size of a structure marked b&lt;br&gt;with [InlineArray] is limited to 1mb&lt;a href="https://twitter.com/hashtag/csharp?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#csharp&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://t.co/DgChywaCzq"&gt;pic.twitter.com/DgChywaCzq&lt;/a&gt;&lt;/p&gt;&amp;mdash; Hypeartist (&amp;#64;hypeartistmusic) &lt;a href="https://twitter.com/hypeartistmusic/status/1728123597968011688?ref_src=twsrc%5Etfw"&gt;November 24, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="api-proposal-introduce-new-memory-cache-library-issue-4766-dotnetextensions"&gt;[API Proposal]: Introduce new memory cache library · Issue #4766 · dotnet/extensions&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/extensions/issues/4766"&gt;https://github.com/dotnet/extensions/issues/4766&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;RCache というメモリー効率の良い新しいメモリーキャッシュを導入したいという提案。&lt;/p&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2023/11/26/updates</id>
		<title>2023-11-26: Cake v4.0.0, NATS.Net v2.0.0, Npgsql 8.0</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2023/11/26/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2023-11-26T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="cake-v4.0.0-released"&gt;Cake v4.0.0 released&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://cakebuildnet.medium.com/cake-v4-0-0-released-475ce3ddd987"&gt;https://cakebuildnet.medium.com/cake-v4-0-0-released-475ce3ddd987&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Cake v4.0.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;このバージョンでは C# 12 および .NET 8 のサポート、ファイル API の強化などが含まれている。&lt;/p&gt;
&lt;h3 id="release-nats.net-v2.0.0-nats-ionats.net.v2"&gt;Release NATS.Net v2.0.0 · nats-io/nats.net.v2&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/nats-io/nats.net.v2/releases/tag/v2.0.0"&gt;https://github.com/nats-io/nats.net.v2/releases/tag/v2.0.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NATS.Net v2.0.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;NATS の .NET クライアントライブラリーで v2.0.0 から AlterNats をベースとしたモダンな実装となった。このバージョンではコアとなる NATS コマンドのサポート、JetStream のサポート、NATS Service API サポート、Native AOT サポートなどが含まれている。&lt;/p&gt;
&lt;h3 id="npgsql-8.0-release-notes-npgsql-documentation"&gt;Npgsql 8.0 Release Notes | Npgsql Documentation&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.npgsql.org/doc/release-notes/8.0.html"&gt;https://www.npgsql.org/doc/release-notes/8.0.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Npgsql 8.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;このバージョンでは Native AOT および Trimming のサポート、Metrics API による OpenTelemetry メトリクスのサポート、キー付きサービスとしての登録といった新機能が含まれている。その他、いくつかの破壊的変更が含まれている。&lt;/p&gt;
&lt;p&gt;バージョン 8.0 が .NET Framework (.NET Standard 2.0) をサポートする最後のバージョンとなり 9.0 からはサポートされなくなるとのこと。&lt;/p&gt;
&lt;h3 id="announcing.net-chiseled-containers.net-blog"&gt;Announcing .NET Chiseled Containers - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-dotnet-chiseled-containers/"&gt;https://devblogs.microsoft.com/dotnet/announcing-dotnet-chiseled-containers/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Chiseled Containers のリリースアナウンス。&lt;/p&gt;
&lt;p&gt;Chiseled イメージは Ubuntu のリリースした最小限のコンポーネントを含むコンテナーイメージであり、それを元に .NET のランタイムを含めたものをリリースした。&lt;/p&gt;
&lt;p&gt;記事では Chiseled での容量や依存関係、脆弱性対応といった部分でのメリット、Distroless を採用する場合との違いなどについて説明している。&lt;/p&gt;
&lt;h3 id="announcing-nuget.exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure-the-nuget-blog"&gt;Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure - The NuGet Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/"&gt;https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NuGet.exe と NuGet クライアント SDK パッケージのサポートポリシーについて。&lt;/p&gt;
&lt;p&gt;記事では NuGet.exe と NuGet クライアント SDK の今後のサポートについて説明している。原則として更新は現行バージョンおよび Visual Studio と .NET SDK の LTS サポートにのみ提供され、脆弱なバージョンの NuGet は tools.json から削除され、パッケージは非推奨となる。&lt;/p&gt;
&lt;h3 id="visual-studio-2022-17.8-performance-enhancements-visual-studio-blog"&gt;Visual Studio 2022 – 17.8 Performance Enhancements - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2022-17-8-performance-enhancements/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-2022-17-8-performance-enhancements/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 version 17.8 でのパフォーマンス改善についての解説。&lt;/p&gt;
&lt;p&gt;記事ではファイルを開く際の応答性の改善、Razor/Blazor での応答性の向上、F5 (デバッグ実行) の速度向上、Unreal Engine C++ での IntelliSense の最適化、非 SDK スタイル .NET プロジェクトのビルドの最適化について紹介している。&lt;/p&gt;
&lt;h3 id="hosted-image-runners-for-azure-pipelines-and-github-actions-have-now-completed-rollout-to-include.net-8-sdk-latest-and-visual-studio-17.8-windows-latest"&gt;Hosted image runners for Azure Pipelines and GitHub Actions have now completed rollout to include .NET 8 SDK (*-latest) and Visual Studio 17.8 (windows-latest)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/actions/runner-images/blob/main/images/ubuntu/Ubuntu2204-Readme.md"&gt;https://github.com/actions/runner-images/blob/main/images/ubuntu/Ubuntu2204-Readme.md&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure Pipelines および GitHub Actions のランナーイメージに .NET 8 SDK と Visual Studio 2022 17.8 (Windows) が含まれるようになった。&lt;/p&gt;
&lt;!-- https://x.com/timheuer/status/1727006190306287773?s=12&amp;t=ggvrrZ7oLogHyNoIGNgjbw --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;📢 Hosted image runners for Azure Pipelines and GitHub Actions have now completed rollout to include .NET 8 SDK (*-latest) and Visual Studio 17.8 (windows-latest) &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt;&lt;a href="https://t.co/UCazh39yYa"&gt;https://t.co/UCazh39yYa&lt;/a&gt;&lt;a href="https://t.co/827aQSwqkt"&gt;https://t.co/827aQSwqkt&lt;/a&gt;&lt;/p&gt;&amp;mdash; Tim (&amp;#64;timheuer) &lt;a href="https://twitter.com/timheuer/status/1727006190306287773?ref_src=twsrc%5Etfw"&gt;November 21, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="servicestack-v8"&gt;ServiceStack v8&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.servicestack.net/releases/v8_00"&gt;https://docs.servicestack.net/releases/v8_00&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ServiceStack v8 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは Blazor や認証など様々なプロジェクトのテンプレートが更新されたほか、PHP のための End-to-End 型付き API サポートなど様々な改善が含まれている。&lt;/p&gt;
&lt;!-- https://x.com/servicestack/status/1726603790453989682?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;ServiceStack v8 is here!&lt;br&gt;&lt;br&gt;✅ All packages with .net8.0 builds&lt;br&gt;✅ All Project Templates upgraded to .NET 8&lt;br&gt; - GH Actions now use .NET 8 Docker containers&lt;br&gt;✅New Tailwind Blazor, Razor Pages &amp;amp; MVC Templates&lt;br&gt;✅Switch to ASP .NET Identity Auth &amp;amp; EF&lt;br&gt;lots more!&lt;a href="https://t.co/yCgbel7FDq"&gt;https://t.co/yCgbel7FDq&lt;/a&gt; &lt;a href="https://t.co/xHFaRiO1wN"&gt;pic.twitter.com/xHFaRiO1wN&lt;/a&gt;&lt;/p&gt;&amp;mdash; ServiceStack (&amp;#64;ServiceStack) &lt;a href="https://twitter.com/ServiceStack/status/1726603790453989682?ref_src=twsrc%5Etfw"&gt;November 20, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="release-2.1.0-microsoftreverse-proxy"&gt;Release 2.1.0 · microsoft/reverse-proxy&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/microsoft/reverse-proxy/releases/tag/v2.1.0"&gt;https://github.com/microsoft/reverse-proxy/releases/tag/v2.1.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Yarp 2.1.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースではいくつかの不具合の修正や改善が含まれている。&lt;/p&gt;
&lt;h3 id="the-end-of-the-tye-experiment-issue-1622-dotnettye"&gt;The end of the Tye Experiment · Issue #1622 · dotnet/tye&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/tye/issues/1622"&gt;https://github.com/dotnet/tye/issues/1622&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ローカルでのマイクロサービス開発ツールを目標としていた Tye は .NET Aspire が公開されたことによりアーカイブされることとなった。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="tannergooding-tannergoodingdotnet.social"&gt;tannergooding (&amp;#64;tannergooding&amp;#64;dotnet.social)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dotnet.social/&amp;#64;tannergooding/111423937700237917"&gt;https://dotnet.social/&amp;#64;tannergooding/111423937700237917&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET の Hardware Intrinsics の簡単な歴史とデモなど。&lt;/p&gt;
&lt;h3 id="primary-constructors-using-c-12-in-rider-and-resharper-the.net-tools-blog"&gt;Primary Constructors – Using C# 12 in Rider and ReSharper | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/11/23/primary-constructors-using-csharp-12-in-rider-and-resharper/"&gt;https://blog.jetbrains.com/dotnet/2023/11/23/primary-constructors-using-csharp-12-in-rider-and-resharper/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider と ReSharper での C# 12 のプライマリーコンストラクターの対応についての紹介。&lt;/p&gt;
&lt;p&gt;どのような変換/簡素化に対応しているか、二重キャプチャ警告について、パラメータの強調表示、コードスタイルなど。&lt;/p&gt;
&lt;h3 id="building-arm64-docker-images-with.net-8-a-quick-solution"&gt;Building Arm64 Docker Images with .NET 8: A Quick Solution&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/medialesson/building-arm64-docker-images-with-net-8-a-quick-solution-5491a94eb507"&gt;https://medium.com/medialesson/building-arm64-docker-images-with-net-8-a-quick-solution-5491a94eb507&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Arm64 の Docker イメージを作成するにあたり &lt;code&gt;FROM&lt;/code&gt; で &lt;code&gt;--platform=$BUILDPLATFORM&lt;/code&gt; を指定しておくことでビルド時にプラットフォームを決定できる。&lt;/p&gt;
&lt;h3 id="net-8-blazor-interactivewebassembly"&gt;.NET 8 の Blazor で InteractiveWebAssembly でプリレンダリングをなるべく避けたい&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/microsoft/articles/aspnetcore-blazor-dotnet8-wasmloading"&gt;https://zenn.dev/microsoft/articles/aspnetcore-blazor-dotnet8-wasmloading&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor で InteractiveWebAssembly を使用しつつ、可能な限りプリレンダリングをする範囲を小さくする方法について。&lt;/p&gt;
&lt;h3 id="set-up-github-codespaces-for-a.net-8-application"&gt;Set up GitHub Codespaces for a .NET 8 application&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/this-is-learning/set-up-github-codespaces-for-a-net-8-application-5999"&gt;https://dev.to/this-is-learning/set-up-github-codespaces-for-a-net-8-application-5999&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 8 のアプリケーションのための GitHub Codespaces 環境の作り方について。&lt;/p&gt;
&lt;h3 id="new-minimal-apis-features-in-asp.net-core-8.0"&gt;New Minimal APIs features in ASP.NET Core 8.0&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/abp-community/new-minimal-apis-features-in-asp-net-core-8-0-683d8a79b18d"&gt;https://medium.com/abp-community/new-minimal-apis-features-in-asp-net-core-8-0-683d8a79b18d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 8 の ASP.NET Core の Minimal APIs の新機能の簡単な紹介。&lt;/p&gt;
&lt;h3 id="visualize-entity-framework-relationships-and-additional-query-analysis-in-resharper-2023.3-the.net-tools-blog"&gt;Visualize Entity Framework Relationships and Additional Query Analysis in ReSharper 2023.3 | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/11/20/visualize-entity-framework-relationships-and-additional-query-analysis-in-resharper-2023-3/"&gt;https://blog.jetbrains.com/dotnet/2023/11/20/visualize-entity-framework-relationships-and-additional-query-analysis-in-resharper-2023-3/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper 2023.3 の Entity Framework に関するビジュアライズとクエリーの解析についての紹介。&lt;/p&gt;
&lt;p&gt;エンティティ関連図の生成や長さ制限の指定されていない文字列の検査、SQL に変換できないメソッド呼び出しの検出など。&lt;/p&gt;
&lt;h3 id="modernizing-reactive-extensions-for.net-endjin"&gt;Modernizing Reactive Extensions for .NET | endjin&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://endjin.com/what-we-think/talks/modernizing-reactive-extensions-for-dotnet"&gt;https://endjin.com/what-we-think/talks/modernizing-reactive-extensions-for-dotnet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rx.NET の昔から今までの流れと、その中で行ってきたモダナイズのための作業などについて。&lt;/p&gt;
&lt;h3 id="a-failed-experiment-with-interceptors-in-c-12-and.net-8"&gt;A failed experiment with interceptors in C# 12 and .NET 8&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/a-failed-experiment-with-interceptors-in-csharp-12-and-dotnet-8/"&gt;https://andrewlock.net/a-failed-experiment-with-interceptors-in-csharp-12-and-dotnet-8/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 12 のプレビュー機能である Interceptor を Enum と拡張メソッドで使用しようとしたところ Roslyn の不具合にひかかったことについて。&lt;/p&gt;
&lt;h3 id="community-feedback-building-17.8-17.9-preview-1-visual-studio-blog"&gt;Community Feedback Building 17.8 &amp;amp; 17.9 Preview 1 - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/community-feedback-building-17-8-17-9-preview-1/"&gt;https://devblogs.microsoft.com/visualstudio/community-feedback-building-17-8-17-9-preview-1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio のコミュニティーからのフィードバックによる新機能の紹介やコメントを求めている提案の紹介、フィードバックの送り方などについて。&lt;/p&gt;
&lt;h3 id="improvements-changes-in-android-resource-generation-in.net-8.net-blog"&gt;Improvements &amp;amp; Changes in Android resource generation in .NET 8 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/android-resource-designer-dotnet-8/"&gt;https://devblogs.microsoft.com/dotnet/android-resource-designer-dotnet-8/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 8 で新たに導入された Android のリソースにアクセスするための仕組みについての解説。&lt;/p&gt;
&lt;p&gt;新たに導入された仕組みでは起動時間の削減や Trimer フレンドリーとなったことによるサイズの削減といった恩恵を得られる&lt;/p&gt;
&lt;h3 id="create-a-pull-request-with-summary-difference-view-available-in-ga-visual-studio-blog"&gt;Create a Pull Request with Summary Difference View Available in GA - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/create-a-pull-request/"&gt;https://devblogs.microsoft.com/visualstudio/create-a-pull-request/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.9 Preview 1 で実装された IDE からの Pull request 作成機能の紹介。&lt;/p&gt;
&lt;h3 id="fake-it-til-you-make-it.to-production.net-blog"&gt;Fake It Til You Make It...To Production - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/fake-it-til-you-make-it-to-production/"&gt;https://devblogs.microsoft.com/dotnet/fake-it-til-you-make-it-to-production/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 8 で導入されたフェイクを実現するためのクラス(FakeLogger, MetricCollector, ITimeProvider) などを紹介している。&lt;/p&gt;
&lt;h3 id="net-night-party-connpass"&gt;.NET Night Party&amp;#64;品川 - connpass&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://msdevjp.connpass.com/event/303250/"&gt;https://msdevjp.connpass.com/event/303250/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Conf 2023 Recap Japan の後に行われるオフラインイベント。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mktoevents.com/Microsoft+Event/415522/157-GQE-382"&gt;.NET Conf 2023 Recap Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="producerconsumer-pipelines-with-system.threading.channels"&gt;Producer/consumer pipelines with System.Threading.Channels&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.maartenballiauw.be/post/2020/08/26/producer-consumer-pipelines-with-system-threading-channels.html"&gt;https://blog.maartenballiauw.be/post/2020/08/26/producer-consumer-pipelines-with-system-threading-channels.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;System.Threading.Channels の簡単な解説と Open.ChannelExtensions を使用した簡単なパイプラインの構築方法について。&lt;/p&gt;
&lt;h3 id="net-8-whats-new-for-authentication-and-authorization"&gt;.NET 8: What's New for Authentication and Authorization&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://auth0.com/blog/whats-new-dotnet8-authentication-authorization/"&gt;https://auth0.com/blog/whats-new-dotnet8-authentication-authorization/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 8 の Identity API によるトークンベースの認証についての解説。&lt;/p&gt;
&lt;h3 id="net-8-blazor"&gt;.NET 8 での Blazor のエラーハンドリングの注意点&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/microsoft/articles/aspnetcore-blazor-dotnet8-errorhandling"&gt;https://zenn.dev/microsoft/articles/aspnetcore-blazor-dotnet8-errorhandling&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ErrorBoundary は異なる実行方式をまたいでハンドリングできない問題について。&lt;/p&gt;
&lt;h3 id="path.getdirectoryname-overload-xin9le.net"&gt;Path.GetDirectoryName() は overload によって挙動が異なる - xin9le.net&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.xin9le.net/entry/2023/11/20/212653"&gt;https://blog.xin9le.net/entry/2023/11/20/212653&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Path.GetDirectoryName メソッドはオーバーロードによってパスの区切り文字の正規化の有無が異なることについて。&lt;/p&gt;
&lt;h3 id="native-aot-compilation-in.net-8"&gt;Native AOT Compilation in .NET 8&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/abp-community/native-aot-compilation-in-net-8-3c9b80a77f06"&gt;https://medium.com/abp-community/native-aot-compilation-in-net-8-3c9b80a77f06&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 8 での Native AOT に関する変更と有効化方法、結果などを簡単に紹介。&lt;/p&gt;
&lt;h3 id="c-12-qiita"&gt;C# 12 新機能メモ - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/habakino094/items/57dca2d0c49c9c02395a"&gt;https://qiita.com/habakino094/items/57dca2d0c49c9c02395a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 12 の新機能の簡単な紹介。プライマリーコンストラクター、コレクション式、任意の型の別名指定、ラムダパラメータの規定値について。&lt;/p&gt;
&lt;h3 id="blazor-html.fluent-ui-blazor-on.net-8"&gt;Blazor で HTML を書きたくないよぉ…(Fluent UI Blazor 編 on .NET 8)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/microsoft/articles/aspnetcore-blazor-dotnet8-fluentui"&gt;https://zenn.dev/microsoft/articles/aspnetcore-blazor-dotnet8-fluentui&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Fluent UI Blazor の組み込み方、使い方について。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="keithwillvestpocket"&gt;keithwill/VestPocket&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/keithwill/VestPocket"&gt;https://github.com/keithwill/VestPocket&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AOT 向けのファイルベースでのシンプルなデータストレージ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://khalidabuhakmeh.com/vestpocket-file-based-data-storage-for-aot-dotnet-applications"&gt;VestPocket: File-based Data Storage for AOT .NET Applications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="jonpsmithefcore.schemacompare-library-to-compare-ef-cores-model-of-the-database-against-a-databases-schema"&gt;JonPSmith/EfCore.SchemaCompare: Library to compare EF Core's Model of the database against a database's schema.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/JonPSmith/EfCore.SchemaCompare"&gt;https://github.com/JonPSmith/EfCore.SchemaCompare&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core のモデルをベースとしたスキーマの比較ライブラリー。&lt;/p&gt;
&lt;h3 id="debug-output-filter-visual-studio-marketplace"&gt;Debug Output Filter - Visual Studio Marketplace&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=GrantDavies.NiahTextFilter2022"&gt;https://marketplace.visualstudio.com/items?itemName=GrantDavies.NiahTextFilter2022&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;デバッグ出力をフィルターしたり履歴を確認できたりする Visual Studio 拡張。&lt;/p&gt;
&lt;!-- https://x.com/mkristensen/status/1726721505193803802?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;This extension keeps a history of builds and debug sessions, and lets you filter the output window data in a super powerful way. I&amp;#39;m a fan!&lt;a href="https://t.co/dbttKBa1Vw"&gt;https://t.co/dbttKBa1Vw&lt;/a&gt; &lt;a href="https://t.co/LIqwUdiFMm"&gt;pic.twitter.com/LIqwUdiFMm&lt;/a&gt;&lt;/p&gt;&amp;mdash; Mads Kristensen (&amp;#64;mkristensen) &lt;a href="https://twitter.com/mkristensen/status/1726721505193803802?ref_src=twsrc%5Etfw"&gt;November 20, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;p&gt;Win2D 1.27.1 と Windows App SDK 1.1.1 がリリースされた話。&lt;/p&gt;
&lt;!-- https://x.com/sergiopedri/status/1727279008243482663?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;We just released Win2D 1.27.1 (UWP) and 1.1.1 (WinAppSDK) with support for .NET 8! These releases switch to using the portable RID schema for native binaries and include some bug fixes (eg. the interop header now builds correctly). Try it out! 🚀&lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt;&lt;a href="https://t.co/zoOe2CcUaT"&gt;https://t.co/zoOe2CcUaT&lt;/a&gt;&lt;/p&gt;&amp;mdash; Sergio Pedri (&amp;#64;SergioPedri) &lt;a href="https://twitter.com/SergioPedri/status/1727279008243482663?ref_src=twsrc%5Etfw"&gt;November 22, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Service Discovery (Microsoft.Extensions.ServiceDiscovery) が .NET 8 で利用可能となったという話(Aspire は不要)。&lt;/p&gt;
&lt;!-- https://x.com/david_whitney/status/1726948359523758347?s=12&amp;t=ggvrrZ7oLogHyNoIGNgjbw --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Really happy that the new Service Discovery APIs in .NET8 are usable stand-alone, and outside of Aspire.&lt;br&gt;&lt;br&gt;Here&amp;#39;s a console app, using service discovery, to call a nodejs API that &amp;quot;just works&amp;quot;.&lt;a href="https://t.co/VrXIn2rGHA"&gt;https://t.co/VrXIn2rGHA&lt;/a&gt; &lt;a href="https://t.co/J0alXGlJFE"&gt;pic.twitter.com/J0alXGlJFE&lt;/a&gt;&lt;/p&gt;&amp;mdash; David Whitney (&amp;#64;david_whitney) &lt;a href="https://twitter.com/david_whitney/status/1726948359523758347?ref_src=twsrc%5Etfw"&gt;November 21, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;&lt;code&gt;ConcurrentDictionary&amp;lt;K,V&amp;gt;.Count&lt;/code&gt; はロックするのでパフォーマンスで不利となるので空かどうかを判断したいだけであれば IsEmpty を使用すべきという話。&lt;/p&gt;
&lt;!-- https://x.com/steplyakov/status/1727016474211176784?s=12&amp;t=ggvrrZ7oLogHyNoIGNgjbw --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Just a friendly reminder that using `ConcurrentDictionary&amp;lt;K,V&amp;gt;.Count` to check for emptiness is not the right way, since the property would acquire all the locks of the world! Just use `.IsEmpty` property instead!&lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/performnace?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#performnace&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/tips?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#tips&lt;/a&gt; &lt;a href="https://t.co/ZJbe79wgq4"&gt;pic.twitter.com/ZJbe79wgq4&lt;/a&gt;&lt;/p&gt;&amp;mdash; Sergiy Teplyakov 🇺🇦 🇺🇸 (&amp;#64;STeplyakov) &lt;a href="https://twitter.com/STeplyakov/status/1727016474211176784?ref_src=twsrc%5Etfw"&gt;November 21, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;セッションで GC の動きをビジュアライズしてデモするためのツールを作っているという話。&lt;/p&gt;
&lt;!-- https://x.com/kookiz/status/1726262030418481643?s=12&amp;t=ggvrrZ7oLogHyNoIGNgjbw --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;In preparation for my talk at &lt;a href="https://twitter.com/update_conf?ref_src=twsrc%5Etfw"&gt;&amp;#64;update_conf&lt;/a&gt;, I&amp;#39;ve prepared a tool to visualize the activity of the GC. It was initially meant as a gimmick, but it turns out to be a good way to understand some GC mechanisms.&lt;br&gt;&lt;br&gt;For instance, here you can see the effect of… &lt;a href="https://t.co/Iebli6VHFl"&gt;pic.twitter.com/Iebli6VHFl&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kevin Gosse (&amp;#64;KooKiz) &lt;a href="https://twitter.com/KooKiz/status/1726262030418481643?ref_src=twsrc%5Etfw"&gt;November 19, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2023/11/19/updates</id>
		<title>2023-11-19: .NET 8, .NET Aspire</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2023/11/19/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2023-11-19T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="announcing.net-8.net-blog"&gt;Announcing .NET 8 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-dotnet-8/"&gt;https://devblogs.microsoft.com/dotnet/announcing-dotnet-8/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/dotnet/core/whats-new/dotnet-8"&gt;What's new in .NET 8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-asp-net-core-in-dotnet-8/"&gt;Announcing ASP.NET Core in .NET 8 - .NET Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-csharp-12/"&gt;Announcing C# 12 - .NET Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-dotnet-maui-in-dotnet-8/"&gt;Announcing .NET MAUI in .NET 8 - .NET Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-ef8/"&gt;Entity Framework Core 8 (EF8) is available today - .NET Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-fsharp-8/"&gt;Announcing F# 8 - .NET Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devblogs.microsoft.com/nuget/announcing-nuget-6-8-maintaining-security-with-ease/"&gt;Announcing NuGet 6.8 - Maintaining Security with Ease - The NuGet Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="visual-studio-17.8-now-available-visual-studio-blog"&gt;Visual Studio 17.8 now available! - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-17-8-now-available/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-17-8-now-available/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="introducing.net-aspire-simplifying-cloud-native-development-with.net-8.net-blog"&gt;Introducing .NET Aspire: Simplifying Cloud-Native Development with .NET 8 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/introducing-dotnet-aspire-simplifying-cloud-native-development-with-dotnet-8/"&gt;https://devblogs.microsoft.com/dotnet/introducing-dotnet-aspire-simplifying-cloud-native-development-with-dotnet-8/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/dotnet/aspire/"&gt;.NET Aspire documentation (Preview)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/aspire/"&gt;dotnet/aspire: .NET Aspire&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="net-framework-november-2023-security-and-quality-rollup.net-blog"&gt;.NET Framework November 2023 Security and Quality Rollup - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-framework-november-2023-security-and-quality-rollup/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-framework-november-2023-security-and-quality-rollup/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-november-2023-updates.net-7.0.14.net-6.0.25.net-blog"&gt;.NET November 2023 Updates – .NET 7.0.14, .NET 6.0.25 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/november-2023-updates/"&gt;https://devblogs.microsoft.com/dotnet/november-2023-updates/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="introducing-visual-studio-17.9-preview-1-is-here-visual-studio-blog"&gt;Introducing Visual Studio 17.9 - Preview 1 is Here! - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/introducing-visual-studio-17-9-preview-1-is-here/"&gt;https://devblogs.microsoft.com/visualstudio/introducing-visual-studio-17-9-preview-1-is-here/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="the-visual-studio-ui-refresh-preview-is-here-visual-studio-blog"&gt;The Visual Studio UI Refresh Preview is here! - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/the-visual-studio-ui-refresh-preview-is-here/"&gt;https://devblogs.microsoft.com/visualstudio/the-visual-studio-ui-refresh-preview-is-here/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="linqpad-8"&gt;LINQPad 8&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.linqpad.net/LINQPad8.aspx"&gt;https://www.linqpad.net/LINQPad8.aspx&lt;/a&gt;&lt;/p&gt;
&lt;!-- https://x.com/linqpad/status/1724762440330793436?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;LINQPad 8 for &lt;a href="https://twitter.com/dotnet?ref_src=twsrc%5Etfw"&gt;&amp;#64;dotnet&lt;/a&gt; 8 is now RTM! &lt;a href="https://t.co/PLjf98TJgW"&gt;https://t.co/PLjf98TJgW&lt;/a&gt;&lt;/p&gt;&amp;mdash; LINQPad·Joe Albahari (&amp;#64;linqpad) &lt;a href="https://twitter.com/linqpad/status/1724762440330793436?ref_src=twsrc%5Etfw"&gt;November 15, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="release-2.3.1-mysql-netmysqlconnector"&gt;Release 2.3.1 · mysql-net/MySqlConnector&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/mysql-net/MySqlConnector/releases/tag/2.3.1"&gt;https://github.com/mysql-net/MySqlConnector/releases/tag/2.3.1&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mysql-net/MySqlConnector/releases/tag/2.3.0"&gt;Release 2.3.0 · mysql-net/MySqlConnector&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="release-windows-app-sdk-1.4.3-1.4.231115000-microsoftwindowsappsdk"&gt;Release Windows App SDK 1.4.3 (1.4.231115000) · microsoft/WindowsAppSDK&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/microsoft/WindowsAppSDK/releases/tag/v1.4.3"&gt;https://github.com/microsoft/WindowsAppSDK/releases/tag/v1.4.3&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/microsoft/microsoft-ui-xaml/releases/tag/winui3/release/1.4.3"&gt;Release WinUI 3 in WinAppSDK 1.4.3 · microsoft/microsoft-ui-xaml&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="release-8.2.0-app-vnextpolly"&gt;Release 8.2.0 · App-vNext/Polly&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/App-vNext/Polly/releases/tag/8.2.0"&gt;https://github.com/App-vNext/Polly/releases/tag/8.2.0&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="release-4.10.0-openiddictopeniddict-core"&gt;Release 4.10.0 · openiddict/openiddict-core&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/openiddict/openiddict-core/releases/tag/4.10.0"&gt;https://github.com/openiddict/openiddict-core/releases/tag/4.10.0&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="introducing-v1.0.0-beta6-for-the.net-semantic-kernel-sdk-semantic-kernel"&gt;Introducing v1.0.0 Beta6 for the .NET Semantic Kernel SDK | Semantic Kernel&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/semantic-kernel/introducing-v1-0-0-beta6-for-the-net-semantic-kernel-sdk/"&gt;https://devblogs.microsoft.com/semantic-kernel/introducing-v1-0-0-beta6-for-the-net-semantic-kernel-sdk/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="announcing-the-monogame-foundation-news-community-monogame"&gt;Announcing the MonoGame Foundation - News - Community | MonoGame&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://community.monogame.net/t/announcing-the-monogame-foundation/19809"&gt;https://community.monogame.net/t/announcing-the-monogame-foundation/19809&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="net-conf2023"&gt;.NET Conf2023 おすすめ動画まとめ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/tomokusaba/articles/3dd75339210ddc"&gt;https://zenn.dev/tomokusaba/articles/3dd75339210ddc&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-8-asp.net-core-metrics"&gt;.NET 8 — ASP.NET Core Metrics&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/abp-community/net-8-asp-net-core-metrics-e69c908e583b"&gt;https://medium.com/abp-community/net-8-asp-net-core-metrics-e69c908e583b&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="automatically-analyze-asp.net-core-performance-with-dynamic-program-analysis-the.net-tools-blog"&gt;Automatically Analyze ASP.NET Core Performance With Dynamic Program Analysis | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/11/14/automatically-analyze-asp-net-core-performance-with-dynamic-program-analysis/"&gt;https://blog.jetbrains.com/dotnet/2023/11/14/automatically-analyze-asp-net-core-performance-with-dynamic-program-analysis/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="optimizing-c-code-analysis-for-quicker.net-compilation"&gt;Optimizing C# code analysis for quicker .NET compilation&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/asimmon/optimizing-c-code-analysis-for-quicker-net-compilation-4e3d"&gt;https://dev.to/asimmon/optimizing-c-code-analysis-for-quicker-net-compilation-4e3d&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="configureawait-in.net-8"&gt;ConfigureAwait in .NET 8&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.stephencleary.com/2023/11/configureawait-in-net-8.html"&gt;https://blog.stephencleary.com/2023/11/configureawait-in-net-8.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-8-asp.net-core-blazor"&gt;.NET 8 の ASP.NET Core Blazor 新機能オーバービュー&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/microsoft/articles/aspnetcore-blazor-dotnet8-overview"&gt;https://zenn.dev/microsoft/articles/aspnetcore-blazor-dotnet8-overview&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="calling-rust-from-c-and-back-again-part-1-aaron-schlesingers-personal-site"&gt;Calling Rust from C#, and back again: Part 1 - Aaron Schlesinger's Personal Site&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ecomaz.net/blog/csharp-rust/"&gt;https://ecomaz.net/blog/csharp-rust/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ecomaz.net/blog/csharp-rust-2/"&gt;Calling Rust from C#, and back again: Part 2 - Aaron Schlesinger's Personal Site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="net-8linq-qiita"&gt;.NET 8でLINQに追加されたメソッド - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/RyotaMurohoshi/items/aa57e96a01c6627ec08d"&gt;https://qiita.com/RyotaMurohoshi/items/aa57e96a01c6627ec08d&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="whats-new-for-the-microsoft-fluent-ui-blazor-components-version-4.0.0"&gt;What's new for the Microsoft Fluent UI Blazor components version 4.0.0&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://baaijte.net/blog/microsoft-fluentui-aspnetcore.components-4/"&gt;https://baaijte.net/blog/microsoft-fluentui-aspnetcore.components-4/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-and-c-versions-812-update"&gt;.NET and C# Versions - 8/12 Update&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://nietras.com/2023/11/14/dotnet-and-csharp-versions/"&gt;https://nietras.com/2023/11/14/dotnet-and-csharp-versions/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="authentication-with-multiple-identity-providers-in-asp.net-core"&gt;Authentication with multiple identity providers in ASP.NET Core&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://damienbod.com/2023/11/13/authentication-with-multiple-identity-providers-in-asp-net-core/"&gt;https://damienbod.com/2023/11/13/authentication-with-multiple-identity-providers-in-asp-net-core/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="more-sqlite-encryption-in.net"&gt;More SQLite Encryption in .NET&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.bricelam.net/2023/11/10/more-sqlite-encryption.html"&gt;https://www.bricelam.net/2023/11/10/more-sqlite-encryption.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="superjmndotnetpackaging-easier-packaging-for.net"&gt;SuperJMN/DotnetPackaging: Easier packaging for .NET&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/SuperJMN/DotnetPackaging"&gt;https://github.com/SuperJMN/DotnetPackaging&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="microsoftdev-proxy-dev-proxy-is-a-command-line-tool-that-simulates-real-world-behaviors-of-http-apis-including-microsoft-graph-locally"&gt;microsoft/dev-proxy: Dev Proxy is a command line tool that simulates real world behaviors of HTTP APIs, including Microsoft Graph, locally.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/microsoft/dev-proxy"&gt;https://github.com/microsoft/dev-proxy&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="dotnetconf2023digitalswag-at-main-dotnet-presentationsdotnetconf"&gt;dotNETConf/2023/DigitalSWAG at main · dotnet-presentations/dotNETConf&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet-presentations/dotNETConf/tree/main/2023/DigitalSWAG"&gt;https://github.com/dotnet-presentations/dotNETConf/tree/main/2023/DigitalSWAG&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://x.com/higenekotech/status/1724641578109776215?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="ja" dir="ltr"&gt;.Net 8.0でWinUI&lt;br&gt;既存のプロジェクトの.netターゲットを8.0にするとビルドエラーが出るのでUseRidGraphを追加することで無事に動作することが確認できました&lt;br&gt;&lt;br&gt;参考&lt;a href="https://t.co/ZLlFr8kM5g"&gt;https://t.co/ZLlFr8kM5g&lt;/a&gt; &lt;a href="https://t.co/zYFyOZhSXi"&gt;pic.twitter.com/zYFyOZhSXi&lt;/a&gt;&lt;/p&gt;&amp;mdash; ひげねこ&amp;#64;技 (&amp;#64;HigenekoTech) &lt;a href="https://twitter.com/HigenekoTech/status/1724641578109776215?ref_src=twsrc%5Etfw"&gt;November 15, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;!-- https://x.com/skitoy4321/status/1724577626235523483?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="ja" dir="ltr"&gt;コンソールアプリでbroken pipeが起こった場合、Marshal.GetLastWin32ErrorかMarshal.GetLastPInvokeErrorで検知してねとのこと(0x10043てなんだ?)。&lt;a href="https://t.co/DSczV3NQI8"&gt;https://t.co/DSczV3NQI8&lt;/a&gt;&lt;/p&gt;&amp;mdash; skitoy4321 (&amp;#64;skitoy4321) &lt;a href="https://twitter.com/skitoy4321/status/1724577626235523483?ref_src=twsrc%5Etfw"&gt;November 14, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;!-- https://x.com/marcgravell/status/1724473162094505999?s=12&amp;t=ggvrrZ7oLogHyNoIGNgjbw --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;With .NET 8 released, I&amp;#39;ve also just released v1 of Dapper.AOT / Dapper.Advisor&lt;br&gt;&lt;br&gt;Love Dapper, but not a fan of runtime ref-emit, and/or want to deploy with AOT? Today may be your lucky day!&lt;br&gt;&lt;br&gt;I need to write up a *lot* of new feature notes, but for today:&lt;a href="https://t.co/UlwqKM1aaN"&gt;https://t.co/UlwqKM1aaN&lt;/a&gt;&lt;/p&gt;&amp;mdash; Marc Gravell (&amp;#64;marcgravell) &lt;a href="https://twitter.com/marcgravell/status/1724473162094505999?ref_src=twsrc%5Etfw"&gt;November 14, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;!-- https://x.com/socketnorm/status/1722853028435538060?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Now .NET 8 is done &lt;a href="https://twitter.com/davidfowl?ref_src=twsrc%5Etfw"&gt;&amp;#64;davidfowl&lt;/a&gt;, AWS .NET SDK updated with new .NET 8 target with AOT trimming support. &lt;br&gt;&lt;br&gt;Blog post on the AOT trimming support to follow once we get some more .NET 8 updates for our Lambda tooling. &lt;a href="https://t.co/wZqNTGttML"&gt;https://t.co/wZqNTGttML&lt;/a&gt; &lt;a href="https://t.co/2t7EVvKl2F"&gt;pic.twitter.com/2t7EVvKl2F&lt;/a&gt;&lt;/p&gt;&amp;mdash; Norm Johanson (&amp;#64;socketnorm) &lt;a href="https://twitter.com/socketnorm/status/1722853028435538060?ref_src=twsrc%5Etfw"&gt;November 10, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;!-- https://x.com/debugprivilege/status/1723679401466880039?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;I&amp;#39;ve worked over the weekend on a write-up on how to analyze ProxyShell in a memory dump. Write-up contains different .NET debugging techniques that is applicable to other Exchange CVEs as well, including two mem dumps of w3wp.exe - All WinDbg ofc ;-) &lt;a href="https://t.co/S4s4KN1OK2"&gt;https://t.co/S4s4KN1OK2&lt;/a&gt;&lt;/p&gt;&amp;mdash; DebugPrivilege (&amp;#64;DebugPrivilege) &lt;a href="https://twitter.com/DebugPrivilege/status/1723679401466880039?ref_src=twsrc%5Etfw"&gt;November 12, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="api-diff-between.net-7-and.net-8-by-carlossanlop-pull-request-8921-dotnetcore"&gt;API diff between .NET 7 and .NET 8 by carlossanlop · Pull Request #8921 · dotnet/core&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/core/pull/8921"&gt;https://github.com/dotnet/core/pull/8921&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="improve-performance-of-biginteger.multiplylarge-small-by-kzrnm-pull-request-92208-dotnetruntime"&gt;Improve performance of BigInteger.Multiply(large, small) by kzrnm · Pull Request #92208 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/92208"&gt;https://github.com/dotnet/runtime/pull/92208&lt;/a&gt;&lt;/p&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2023/11/12/updates</id>
		<title>2023-11-12: The convenience of System.IO, ILSpy 8.2, .NET MAUI Community Toolkit v6.1.0</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2023/11/12/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2023-11-12T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="the-convenience-of-system.io.net-blog"&gt;The convenience of System.IO - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/the-convenience-of-system-io/"&gt;https://devblogs.microsoft.com/dotnet/the-convenience-of-system-io/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="whats-new-with-identity-in.net-8.net-blog"&gt;What's new with identity in .NET 8 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/whats-new-with-identity-in-dotnet-8/"&gt;https://devblogs.microsoft.com/dotnet/whats-new-with-identity-in-dotnet-8/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="release-ilspy-8.2-icsharpcodeilspy"&gt;Release ILSpy 8.2 · icsharpcode/ILSpy&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/icsharpcode/ILSpy/releases/tag/v8.2"&gt;https://github.com/icsharpcode/ILSpy/releases/tag/v8.2&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="release-v6.1.0-a-new-release-popped-up-communitytoolkitmaui"&gt;Release v6.1.0: A New Release Popped Up! · CommunityToolkit/Maui&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/CommunityToolkit/Maui/releases/tag/6.1.0"&gt;https://github.com/CommunityToolkit/Maui/releases/tag/6.1.0&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="release-release-v2.59.0-grpcgrpc-dotnet"&gt;Release Release v2.59.0 · grpc/grpc-dotnet&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/grpc/grpc-dotnet/releases/tag/v2.59.0"&gt;https://github.com/grpc/grpc-dotnet/releases/tag/v2.59.0&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="release-2.3.0-beta-4-mysql-netmysqlconnector"&gt;Release 2.3.0 Beta 4 · mysql-net/MySqlConnector&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/mysql-net/MySqlConnector/releases/tag/2.3.0-beta.4"&gt;https://github.com/mysql-net/MySqlConnector/releases/tag/2.3.0-beta.4&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="release-microsoft.ui.xaml-v2.8.6-microsoftmicrosoft-ui-xaml"&gt;Release Microsoft.UI.Xaml v2.8.6 · microsoft/microsoft-ui-xaml&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/microsoft/microsoft-ui-xaml/releases/tag/v2.8.6"&gt;https://github.com/microsoft/microsoft-ui-xaml/releases/tag/v2.8.6&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="more-bug-fixes-resharper-2023.2.3-and-rider-2023.2.3-are-out-the.net-tools-blog"&gt;More Bug Fixes: ReSharper 2023.2.3 and Rider 2023.2.3 Are Out! | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/11/03/resharper-rider-2023-2-3/"&gt;https://blog.jetbrains.com/dotnet/2023/11/03/resharper-rider-2023-2-3/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="c"&gt;【C#】固定長配列をリフレクションで操作する&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/ruccho/articles/c000525edfaffe"&gt;https://zenn.dev/ruccho/articles/c000525edfaffe&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="reading-json-and-binary-data-from-multipartform-data-sections-in-asp.net-core"&gt;Reading JSON and binary data from multipart/form-data sections in ASP.NET Core&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/reading-json-and-binary-data-from-multipart-form-data-sections-in-aspnetcore/"&gt;https://andrewlock.net/reading-json-and-binary-data-from-multipart-form-data-sections-in-aspnetcore/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-annotated-monthly-november-2023-the.net-tools-blog"&gt;.NET Annotated Monthly | November 2023 | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/11/09/net-annotated-monthly-november-2023/"&gt;https://blog.jetbrains.com/dotnet/2023/11/09/net-annotated-monthly-november-2023/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="section-2"&gt;いまさらはしごだか対応&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/panda728/articles/1846b923cfab6a"&gt;https://zenn.dev/panda728/articles/1846b923cfab6a&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="resharper-2023.3-eap-6-code-analysis-performance-improvements-support-for-c-12-interceptors-and-much-more.the.net-tools-blog"&gt;ReSharper 2023.3 EAP 6: Code Analysis Performance Improvements, Support for C# 12 Interceptors, and Much More. | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/11/08/resharper-2023-3-eap-6/"&gt;https://blog.jetbrains.com/dotnet/2023/11/08/resharper-2023-3-eap-6/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="moonsharp-running-lua-scripts-in.net"&gt;MoonSharp - Running Lua Scripts in .NET&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://khalidabuhakmeh.com/moonsharp-running-lua-scripts-in-dotnet"&gt;https://khalidabuhakmeh.com/moonsharp-running-lua-scripts-in-dotnet&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="how-to-dig-into-the-clr"&gt;How to dig into the CLR&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://chnasarre.medium.com/how-to-dig-into-the-clr-bd67d884f8da"&gt;https://chnasarre.medium.com/how-to-dig-into-the-clr-bd67d884f8da&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="how-jetbrains-rider-implemented.net-webassembly-debugging-the.net-tools-blog"&gt;How JetBrains Rider Implemented .NET WebAssembly Debugging | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/11/07/how-jetbrains-rider-implemented-net-webassembly-debugging/"&gt;https://blog.jetbrains.com/dotnet/2023/11/07/how-jetbrains-rider-implemented-net-webassembly-debugging/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="configureawait-in.net-8"&gt;ConfigureAwait in .NET 8&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.stephencleary.com/2023/11/configureawait-in-net-8.html"&gt;https://blog.stephencleary.com/2023/11/configureawait-in-net-8.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="exploring-object-layouts-to-kill-a-mocking-bug"&gt;Exploring Object Layouts - To kill a mocking bug&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://vannevel.net/posts/exploring-object-layouts/"&gt;https://vannevel.net/posts/exploring-object-layouts/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-httpclient-extensibility-support-for-unix-domain-sockets-named-pipes"&gt;.NET HttpClient extensibility: Support for Unix Domain Sockets &amp;amp; Named Pipes&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;madhus.bsg/net-httpclient-extensibility-support-for-unix-domain-sockets-named-pipes-abe3c66ffb6e"&gt;https://medium.com/&amp;#64;madhus.bsg/net-httpclient-extensibility-support-for-unix-domain-sockets-named-pipes-abe3c66ffb6e&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="czero-byte-reads"&gt;【C#】zero-byte reads という最適化とピン留めについて。 - ねののお庭。&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.neno.dev/entry/2023/11/11/215353"&gt;https://blog.neno.dev/entry/2023/11/11/215353&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="native-aot-with-asp.net-core-overview"&gt;Native AOT with ASP.NET Core - Overview&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.thinktecture.com/en/net/native-aot-with-asp-net-core-overview/"&gt;https://www.thinktecture.com/en/net/native-aot-with-asp-net-core-overview/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-conf-2023-recap-japan.net-microsoft-event"&gt;.NET Conf 2023 Recap Japan ～ 最新の.NETを学ぶ | Microsoft Event&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://mktoevents.com/Microsoft+Event/415522/157-GQE-382"&gt;https://mktoevents.com/Microsoft+Event/415522/157-GQE-382&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-conf-2023-sendai-connpass"&gt;.NET Conf 2023 Sendai - connpass&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://minamimachi.connpass.com/event/298198/"&gt;https://minamimachi.connpass.com/event/298198/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="section-3"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="microsoftinshellisense-ide-style-command-line-auto-complete"&gt;microsoft/inshellisense: IDE style command line auto complete&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/microsoft/inshellisense"&gt;https://github.com/microsoft/inshellisense&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="mikihiro-tnormalizejapaneseaddressesnet.net"&gt;mikihiro-t/NormalizeJapaneseAddressesNET: オープンソースの住所正規化ライブラリ。 .NET版&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/mikihiro-t/NormalizeJapaneseAddressesNET"&gt;https://github.com/mikihiro-t/NormalizeJapaneseAddressesNET&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/hiro_t/items/8884e817bd40642c63e8"&gt;オープンソースの住所正規化ライブラリ NormalizeJapaneseAddresses .NET版 公開 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-4"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-5"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://x.com/terrajobst/status/1722011787053424825?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;In case you missed it: &lt;a href="https://t.co/BCOvhYeb4v"&gt;https://t.co/BCOvhYeb4v&lt;/a&gt;&lt;/p&gt;&amp;mdash; Immo Landwerth (&amp;#64;terrajobst) &lt;a href="https://twitter.com/terrajobst/status/1722011787053424825?ref_src=twsrc%5Etfw"&gt;November 7, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;!-- https://x.com/ufcpp/status/1720646144139911476?s=12&amp;t=ggvrrZ7oLogHyNoIGNgjbw --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="ja" dir="ltr"&gt;&lt;a href="https://t.co/f5l6qzs6XQ"&gt;https://t.co/f5l6qzs6XQ&lt;/a&gt;&lt;br&gt;16年ぶりにページ更新(追記・部分書き換え)すると、ずいぶん文体変わっててどうしようってなった。&lt;/p&gt;&amp;mdash; ++C++; // 管理人: 岩永 (&amp;#64;ufcpp) &lt;a href="https://twitter.com/ufcpp/status/1720646144139911476?ref_src=twsrc%5Etfw"&gt;November 4, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
</feed>