<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
	<channel>
		<title>WeekRef.NET</title>
		<link>/</link>
		<description>.NET 関連の情報をほぼ週刊配信</description>
		<copyright>Copyright © Mayuki Sawatari &lt;mayuki@misuzilla.org&gt;</copyright>
		<managingEditor>Mayuki Sawatari</managingEditor>
		<pubDate>Sat, 04 Feb 2023 14:29:15 GMT</pubDate>
		<lastBuildDate>Sat, 04 Feb 2023 14:29:15 GMT</lastBuildDate>
		<item>
			<title>2023-02-04: MySqlConnector 2.3.0 Beta 1, Visual Studio Code January 2023, ReSharper &amp; Rider 2023.1 EAP 3</title>
			<link>/2023/02/04/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2023/02/04/updates</guid>
			<pubDate>Sat, 04 Feb 2023 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="release-2.3.0-beta-1-mysql-netmysqlconnector"&gt;Release 2.3.0 Beta 1 · mysql-net/MySqlConnector&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/mysql-net/MySqlConnector/releases/tag/2.3.0-beta.1"&gt;https://github.com/mysql-net/MySqlConnector/releases/tag/2.3.0-beta.1&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="visual-studio-code-january-2023"&gt;Visual Studio Code January 2023&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://code.visualstudio.com/updates/v1_75"&gt;https://code.visualstudio.com/updates/v1_75&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="resharper-2023.1-eap-3-is-here-the.net-tools-blog"&gt;ReSharper 2023.1 EAP 3 Is Here! | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/02/03/resharper-2023-1-eap-3/"&gt;https://blog.jetbrains.com/dotnet/2023/02/03/resharper-2023-1-eap-3/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="rider-2023.1-eap-3-is-available-with-docker-and-structure-view-improvements-and-a-localization-preview-the.net-tools-blog"&gt;Rider 2023.1 EAP 3 is Available With Docker and Structure View Improvements and a Localization Preview | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/02/03/rider-2023-1-eap-3/"&gt;https://blog.jetbrains.com/dotnet/2023/02/03/rider-2023-1-eap-3/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="release-7.0.59-service-release-3-dotnetmaui"&gt;Release 7.0.59 Service Release 3 · dotnet/maui&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/maui/releases/tag/7.0.59"&gt;https://github.com/dotnet/maui/releases/tag/7.0.59&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="c-12-c-c"&gt;【C# 12 候補】コレクション リテラル | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2023/1/collection-literal"&gt;https://ufcpp.net/blog/2023/1/collection-literal&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="blazor"&gt;Blazor でバリデーション ロジックを部品化したい&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/okazuki/articles/viewside-validation"&gt;https://zenn.dev/okazuki/articles/viewside-validation&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="blazorvalidationsummaryasp-validation-summary"&gt;BlazorのValidationSummaryでasp-validation-summaryのように表示エラーメッセージを絞り込みたい&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/okazuki/articles/blazor-validationsummary-tips"&gt;https://zenn.dev/okazuki/articles/blazor-validationsummary-tips&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="signalr"&gt;SignalR を使ったアプリケーション開発をより快適に！&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://speakerdeck.com/nenonaninu/signalr-woshi-tutaapurikesiyonkai-fa-woyorikuai-shi-ni"&gt;https://speakerdeck.com/nenonaninu/signalr-woshi-tutaapurikesiyonkai-fa-woyorikuai-shi-ni&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="c3-qiita"&gt;C#初心者による初心者のためのオススメ勉強サイト3選レビュー - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/YouKnow/items/34a24351991c6744b691"&gt;https://qiita.com/YouKnow/items/34a24351991c6744b691&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="redis-university-ru102n-redis-for.net-developers"&gt;Redis University RU102N: Redis for .NET Developers&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/slorello/redis-university-ru102n-redis-for-net-developers-30om"&gt;https://dev.to/slorello/redis-university-ru102n-redis-for-net-developers-30om&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="mapping-asp.net-core-minimal-api-endpoints-with-c-source-generators"&gt;Mapping ASP.NET Core minimal API endpoints with C# source generators&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/joaofbantunes/mapping-aspnet-core-minimal-api-endpoints-with-c-source-generators-3faj"&gt;https://dev.to/joaofbantunes/mapping-aspnet-core-minimal-api-endpoints-with-c-source-generators-3faj&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="play-audio-and-video-in.net-maui-apps-with-the-new-mediaelement"&gt;Play Audio and Video in .NET MAUI apps with the new MediaElement&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-dotnet-maui-communitytoolkit-mediaelement/"&gt;https://devblogs.microsoft.com/dotnet/announcing-dotnet-maui-communitytoolkit-mediaelement/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="c"&gt;C#でコンソール出力時の文字エンコーディングを制御する&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/oyasumi731/articles/26309b705704cc"&gt;https://zenn.dev/oyasumi731/articles/26309b705704cc&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="generating-argument-expressions-for-minimal-apis-continued-behind-the-scenes-of-minimal-apis-part-5"&gt;Generating argument expressions for minimal APIs (continued): Behind the scenes of minimal APIs - Part 5&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/behind-the-scenes-of-minimal-apis-5-generating-argument-expressions-for-minimal-apis-continuted/"&gt;https://andrewlock.net/behind-the-scenes-of-minimal-apis-5-generating-argument-expressions-for-minimal-apis-continuted/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="bloom-filters"&gt;Bloom Filters&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;marcioalthmann/bloom-filters-8dde17bc7ee6"&gt;https://medium.com/&amp;#64;marcioalthmann/bloom-filters-8dde17bc7ee6&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="integration-testing-with-respawn-in-asp.net-core"&gt;Integration testing with Respawn in ASP.NET Core&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;niko.kantaria/integration-testing-with-respawn-in-asp-net-core-6de63dcfc7ba"&gt;https://medium.com/&amp;#64;niko.kantaria/integration-testing-with-respawn-in-asp-net-core-6de63dcfc7ba&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="basic-windows-machine-hardware-information-from-wmi-for-exception-logging-from.net"&gt;Basic Windows Machine Hardware information from WMI for Exception Logging from .NET&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://weblog.west-wind.com/posts/2023/Feb/02/Basic-Windows-Machine-Hardware-information-from-WMI-for-Exception-Logging-from-NET"&gt;https://weblog.west-wind.com/posts/2023/Feb/02/Basic-Windows-Machine-Hardware-information-from-WMI-for-Exception-Logging-from-NET&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="sql-server-computed-columns-with-ef-core"&gt;SQL-Server: Computed columns with Ef Core&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/karenpayneoregon/sql-server-computed-columns-with-ef-core-3h8d"&gt;https://dev.to/karenpayneoregon/sql-server-computed-columns-with-ef-core-3h8d&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="dapper-qiita"&gt;個人的に使っているDapper の使うときの小技とか - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/mania3bb2007/items/3319279676ff820998cb"&gt;https://qiita.com/mania3bb2007/items/3319279676ff820998cb&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-appsettings.json-qiita"&gt;【.NET】設定ファイル(例 appsettings.json)をクラスにマッピングする - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/yaju/items/3c0de1341e6c96cc1afa"&gt;https://qiita.com/yaju/items/3c0de1341e6c96cc1afa&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="static-and-non-static-interface-member-calls-in.net-they-are-not-the-same"&gt;Static and non-static interface member calls in .NET: they are not the same&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;ocoanet/static-and-non-static-interface-member-calls-in-net-they-are-not-the-same-b22bf2d00ae5"&gt;https://medium.com/&amp;#64;ocoanet/static-and-non-static-interface-member-calls-in-net-they-are-not-the-same-b22bf2d00ae5&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="cysharpsimdlinq-drop-in-replacement-of-linq-aggregation-operations-extremely-faster-with-simd"&gt;Cysharp/SimdLinq: Drop-in replacement of LINQ aggregation operations extremely faster with SIMD.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/Cysharp/SimdLinq/"&gt;https://github.com/Cysharp/SimdLinq/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://neue.cc/2023/01/30-SimdLinq.html"&gt;neue cc - SimdLinq - LINQをそのままSIMD対応して超高速化するライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="jjconsultingjjmasterdata-jjmasterdata-is-an-open-source.net-library-to-help-you-create-cruds-at-runtime-quickly-from-data-dictionaries-metadata"&gt;JJConsulting/JJMasterData: JJMasterData is an open-source .NET library to help you create CRUDs at runtime quickly from data dictionaries (metadata).&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/jjconsulting/JJMasterData"&gt;https://github.com/jjconsulting/JJMasterData&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/gumbarros/jjmasterdata-a-net-library-to-generate-cruds-from-database-metadata-at-runtime-3d5b"&gt;JJMasterData - A .NET library to generate CRUDs from database metadata at runtime.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/egorbo/status/1619448596360994816?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;🎉Roslyn team has just merged &amp;quot;faster switch over string literals&amp;quot; optimization - &lt;a href="https://t.co/kIBIfjBIXp"&gt;https://t.co/kIBIfjBIXp&lt;/a&gt; Here is a quick explanation: &lt;a href="https://t.co/EnN8snC3sN"&gt;pic.twitter.com/EnN8snC3sN&lt;/a&gt;&lt;/p&gt;&amp;mdash; Egor Bogatov (&amp;#64;EgorBo) &lt;a href="https://twitter.com/EgorBo/status/1619448596360994816?ref_src=twsrc%5Etfw"&gt;January 28, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="enable-support-for-nativeaot-targeting-ios-via-opt-in-feature-issue-80905-dotnetruntime"&gt;Enable support for NativeAOT targeting iOS via opt-in feature · Issue #80905 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/issues/80905"&gt;https://github.com/dotnet/runtime/issues/80905&lt;/a&gt;&lt;/p&gt;
&lt;!-- https://twitter.com/austinwise/status/1619228434680680448?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;With much guidance from from &lt;a href="https://twitter.com/JanKotas7?ref_src=twsrc%5Etfw"&gt;&amp;#64;JanKotas7&lt;/a&gt; , &lt;a href="https://twitter.com/MStrehovsky?ref_src=twsrc%5Etfw"&gt;&amp;#64;MStrehovsky&lt;/a&gt; , and &lt;a href="https://twitter.com/v_sadov?ref_src=twsrc%5Etfw"&gt;&amp;#64;v_sadov&lt;/a&gt;, I ported the Objective-C Marshal API to NativeAOT:&lt;a href="https://t.co/Ay1n51hnjN"&gt;https://t.co/Ay1n51hnjN&lt;/a&gt;&lt;br&gt;I&amp;#39;m pleasantly surprised to see it may be part of experimental NativeAOT iOS support in .NET 8:&lt;a href="https://t.co/DlRYJS1erx"&gt;https://t.co/DlRYJS1erx&lt;/a&gt;&lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt;&lt;/p&gt;&amp;mdash; Austin Wise (&amp;#64;AustinWise) &lt;a href="https://twitter.com/AustinWise/status/1619228434680680448?ref_src=twsrc%5Etfw"&gt;January 28, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2023-01-28: Key Trends for C#, Microsoft.Data.SqlClient 5.1.0, Uno Platform 4.7</title>
			<link>/2023/01/28/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2023/01/28/updates</guid>
			<pubDate>Sat, 28 Jan 2023 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="the-developer-ecosystem-in-2022-key-trends-for-c-the.net-tools-blog"&gt;The Developer Ecosystem in 2022: Key Trends for C# | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/01/26/the-developer-ecosystem-in-2022-key-trends-for-c/"&gt;https://blog.jetbrains.com/dotnet/2023/01/26/the-developer-ecosystem-in-2022-key-trends-for-c/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JetBrains による2022年の開発者エコシステムでの C# の主なトレンドの調査。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C# のバージョン&lt;/li&gt;
&lt;li&gt;開発対象の分野&lt;/li&gt;
&lt;li&gt;使用しているランタイムのバージョン&lt;/li&gt;
&lt;li&gt;使用している IDE やエディター&lt;/li&gt;
&lt;li&gt;Visual Studio / Visual Studio Code でのプラグイン&lt;/li&gt;
&lt;li&gt;ユニットテストに使用しているフレームワーク&lt;/li&gt;
&lt;li&gt;プロファイラーや診断ツールを使用する頻度&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="introducing-the-git-status-bar-and-testing-improvements-in-visual-studio-for-mac-17.5-visual-studio-blog"&gt;Introducing the Git Status Bar and Testing Improvements in Visual Studio for Mac 17.5 - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/introducing-the-git-status-bar-and-testing-improvements-in-visual-studio-for-mac-17-5/"&gt;https://devblogs.microsoft.com/visualstudio/introducing-the-git-status-bar-and-testing-improvements-in-visual-studio-for-mac-17-5/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio for Mac 17.5 Preview 3 での Git ステータスバーとテスト関連の機能の改善について。&lt;/p&gt;
&lt;p&gt;ステータスバーから Git のブランチを確認変更するといった機能が追加されている。&lt;/p&gt;
&lt;h3 id="release-stable-release-v5.1.0-dotnetsqlclient"&gt;Release Stable Release v5.1.0 · dotnet/SqlClient&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/SqlClient/releases/tag/v5.1.0"&gt;https://github.com/dotnet/SqlClient/releases/tag/v5.1.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoft.Data.SqlClient 5.1.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは TimeOnly, DateOnly を含む .NET 6 のサポート、SQL Server 2022 の TDS8 と TLS 1.3 のサポート、ARM64 .NET Framework のサポート、.NET Core 3.1 のサポートの削除などが含まれている。&lt;/p&gt;
&lt;!-- https://twitter.com/erikej/status/1616190245715775502?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Version 5.1 of &lt;a href="https://t.co/lkm75UGvzO"&gt;https://t.co/lkm75UGvzO&lt;/a&gt;.SqlClient is finally here with full support for SQL Server 2022 TDS8 protocol and TLS 1.3 - also adds support for DateOnly and TimeOnly with .NET 6&lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/sqlserver?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#sqlserver&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/AzureSQL?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#AzureSQL&lt;/a&gt; &lt;a href="https://t.co/nvb1bhSKMN"&gt;https://t.co/nvb1bhSKMN&lt;/a&gt;&lt;/p&gt;&amp;mdash; ErikEJ (&amp;#64;ErikEJ) &lt;a href="https://twitter.com/ErikEJ/status/1616190245715775502?ref_src=twsrc%5Etfw"&gt;January 19, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="uno-platform-4.7-new-project-template-performance-improvements-and-more"&gt;Uno Platform 4.7 – New Project Template, Performance Improvements and more&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://platform.uno/blog/uno-platform-4-7-new-project-template-performance-improvements-and-more/"&gt;https://platform.uno/blog/uno-platform-4-7-new-project-template-performance-improvements-and-more/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Uno Platform 4.7 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは新しいプロジェクトテンプレート、フォントの共有、WebAssembly や NativeAOT、Android などでのパフォーマンスの改善が行われた。&lt;/p&gt;
&lt;h3 id="release-v7.0.1-npgsqlnpgsql"&gt;Release v7.0.1 · npgsql/npgsql&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/npgsql/npgsql/releases/tag/v7.0.1"&gt;https://github.com/npgsql/npgsql/releases/tag/v7.0.1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Npgsql 7.0.1 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースではデッドロックやなどいくつかの不具合が修正されている。&lt;/p&gt;
&lt;h3 id="release-v1.2.3-microsoftwindowsappsdk"&gt;Release v1.2.3 · microsoft/WindowsAppSDK&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/microsoft/WindowsAppSDK/releases/tag/v1.2.3"&gt;https://github.com/microsoft/WindowsAppSDK/releases/tag/v1.2.3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows App SDK 1.2.3 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは複数のウィンドウを閉じた際にクラッシュする問題などいくつかの問題が修正されている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/ja-jp/windows/apps/windows-app-sdk/stable-channel#version-123-12230118102"&gt;バージョン 1.2.3 (1.2.230118.102) - Windows App SDK の安定チャネルのリリース ノート - Windows apps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="resharper-tools-and-rider-2022.3.2-bug-fix-updates-have-arrived-the.net-tools-blog"&gt;ReSharper Tools and Rider 2022.3.2 Bug-fix Updates Have Arrived! | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/01/27/resharper-rider-2022-3-2/"&gt;https://blog.jetbrains.com/dotnet/2023/01/27/resharper-rider-2022-3-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper と Rider 2022.3.2 がリリースされた。&lt;/p&gt;
&lt;p&gt;それぞれ ASP.NET Core プロジェクトでクラッシュする問題や誤ってエラーとなってしまう問題などが修正されている。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="memorypack-yucchiys-note"&gt;MemoryPackで独自のバージョニングを行う | Yucchiy's Note&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.yucchiy.com/2023/01/memorypack-custom-versioning/"&gt;https://blog.yucchiy.com/2023/01/memorypack-custom-versioning/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MemoryPack のシリアライズ時に追加の情報を埋め込むことで独自のバージョニングを実現する方法について。&lt;/p&gt;
&lt;h3 id="using-command-binding-in-windows-forms-apps-to-go-cross-platform.net-blog"&gt;Using Command Binding in Windows Forms apps to go Cross-Platform - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/winforms-cross-platform-dotnet-maui-command-binding/"&gt;https://devblogs.microsoft.com/dotnet/winforms-cross-platform-dotnet-maui-command-binding/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 の Windows Forms で可能となったコマンドバインディングを使用して MVVM パターンを実現し、.NET MAUI とのコードの共有を試みることについて。&lt;/p&gt;
&lt;h3 id="generating-argument-expressions-for-minimal-apis-behind-the-scenes-of-minimal-apis-part-4"&gt;Generating argument expressions for minimal APIs: Behind the scenes of minimal APIs - Part 4&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/behind-the-scenes-of-minimal-apis-4-generating-argument-expressions-for-minimal-apis/"&gt;https://andrewlock.net/behind-the-scenes-of-minimal-apis-4-generating-argument-expressions-for-minimal-apis/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Minimal APIs の裏側でハンドラーの引数の式ツリーの構築やオプショナルな引数の取り扱いなどについての解説。&lt;/p&gt;
&lt;h3 id="wpfwinforms"&gt;WPFとWinFormsを汎用ホストに簡易に組み込む&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/nin_neko/articles/292f8a6f0d7ee4"&gt;https://zenn.dev/nin_neko/articles/292f8a6f0d7ee4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WPF と Windows Forms アプリケーションで Generic Host を使用する方法について。&lt;/p&gt;
&lt;h3 id="c-visual-studio"&gt;[C#] Visual Studioで独自の警告を作ってチームで共有する&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/tackme31/articles/2e57a1b1f592ff"&gt;https://zenn.dev/tackme31/articles/2e57a1b1f592ff&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;独自の Roslyn アナライザーと CodeFix の開発方法とローカルパッケージでの配布方法について。&lt;/p&gt;
&lt;h3 id="net-maui-features-for-building-great-desktop-apps.net-blog"&gt;5 .NET MAUI Features for Building Great Desktop Apps - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/5-dotnet-maui-desktop-features/"&gt;https://devblogs.microsoft.com/dotnet/5-dotnet-maui-desktop-features/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI のデスクトップアプリ向けの5つの機能を紹介。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;マルチウィンドウ&lt;/li&gt;
&lt;li&gt;メニューバー&lt;/li&gt;
&lt;li&gt;コンテキストメニュー&lt;/li&gt;
&lt;li&gt;ツールチップ&lt;/li&gt;
&lt;li&gt;ポインタージェスチャー&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="keyboard-shortcuts-to-master-your-git-flow-in-visual-studio-visual-studio-blog"&gt;Keyboard Shortcuts to Master Your Git Flow in Visual Studio - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/keyboard-shortcuts-to-master-your-git-flow-in-visual-studio/"&gt;https://devblogs.microsoft.com/visualstudio/keyboard-shortcuts-to-master-your-git-flow-in-visual-studio/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio で Git フローに役立つキーボードショートカットを紹介している。&lt;/p&gt;
&lt;h3 id="a-simple-union-between.net-core-and-python"&gt;A Simple Union Between .NET Core and Python&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/devleader/a-simple-union-between-net-core-and-python-5949"&gt;https://dev.to/devleader/a-simple-union-between-net-core-and-python-5949&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pythonnet を使用して .NET から Python 呼び出す例の簡単な紹介。&lt;/p&gt;
&lt;h3 id="basic-authentication-in-asp.net-core-software-engineering"&gt;Basic Authentication in ASP.NET Core | Software Engineering&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://damienbod.com/2023/01/23/basic-authentication-in-asp-net-core/"&gt;https://damienbod.com/2023/01/23/basic-authentication-in-asp-net-core/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;idunno.Authentication.Basic パッケージを使用して ASP.NET Core アプリケーションに Basic 認証を実装する方法について。&lt;/p&gt;
&lt;h3 id="tracing.net-applications-easily-with-opentelemetry-code-maze"&gt;Tracing .NET Applications Easily With OpenTelemetry - Code Maze&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://code-maze.com/tracing-dotnet-applications-opentelemetry/"&gt;https://code-maze.com/tracing-dotnet-applications-opentelemetry/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OpenTelemetry を使用して .NET アプリケーションのトレースを取得する方法について。&lt;/p&gt;
&lt;p&gt;記事では SQL Server へのクエリーの取得や、Jaeger を使用して表示する手順についても触れている。&lt;/p&gt;
&lt;h3 id="c-12-primary-constructors"&gt;C# 12: Primary Constructors&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://steven-giesel.com/blogPost/a210c97e-fe68-45de-afa1-d053d75f6f7d"&gt;https://steven-giesel.com/blogPost/a210c97e-fe68-45de-afa1-d053d75f6f7d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 12 で導入候補となっているプライマリーコンストラクターについての解説。&lt;/p&gt;
&lt;h3 id="ef-core-debugging-part-1"&gt;EF Core debugging part 1&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/karenpayneoregon/ef-core-debugging-part-1-512f"&gt;https://dev.to/karenpayneoregon/ef-core-debugging-part-1-512f&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core で開発中のデバッグに役立つ機能とログの記録方法についての紹介&lt;/p&gt;
&lt;h3 id="static-libraries"&gt;Static libraries&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ericsink.com/native_aot/mul_cpp_win_static.html"&gt;https://ericsink.com/native_aot/mul_cpp_win_static.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NativeAOT で静的ライブラリーとして発行することと、その場合に発生するほかにリンクすべきライブラリーがあることについて。&lt;/p&gt;
&lt;h3 id="getting-started-with-integration-testing-for-your-minimal-api"&gt;Getting started with integration testing for your Minimal API&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/this-is-learning/getting-started-with-integration-testing-for-your-minimal-api-3j0l"&gt;https://dev.to/this-is-learning/getting-started-with-integration-testing-for-your-minimal-api-3j0l&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Minimal APIs で実装した ASP.NET Core アプリケーションの統合テストをする方法について。&lt;/p&gt;
&lt;h3 id="steve-sanderson-wows-web-devs-with-peek-at-blazor-united-for.net-8-visual-studio-magazine"&gt;Steve Sanderson Wows Web-Devs with Peek at 'Blazor United' for .NET 8 -- Visual Studio Magazine&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://visualstudiomagazine.com/articles/2023/01/26/blazor-united.aspx"&gt;https://visualstudiomagazine.com/articles/2023/01/26/blazor-united.aspx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 8 の Blazor 向けに開発しているプロトタイプ Blazor United について。&lt;/p&gt;
&lt;p&gt;Blazor United は Razor Pages、Blazor Server、Blazor WebAssembly がクライアント上でシームレスに移行していく仕組みを提供するプロトタイプとなっている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=48G_CEGXZZM"&gt;Blazor United prototype - YouTube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="cysharpstructureofarraysgenerator-structure-of-arrays-source-generator-to-make-cpu-cache-and-simd-friendly-data-structure-for-high-performance-code-in.net-and-unity"&gt;Cysharp/StructureOfArraysGenerator: Structure of arrays source generator to make CPU Cache and SIMD friendly data structure for high-performance code in .NET and Unity.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/Cysharp/StructureOfArraysGenerator"&gt;https://github.com/Cysharp/StructureOfArraysGenerator&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Structure of Arrays と呼ばれるデータ構造を簡単に扱えるようにする Source Generator&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://neue.cc/2023/01/27_StructureOfArraysGenerator.html"&gt;neue cc - StructureOfArraysGenerator - C#でSoAを簡単に利用するためのSource Generator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;p&gt;Visual Studio 2022 Preview では .http ファイルによる VSCode の REST Client のようなことができるという話。&lt;/p&gt;
&lt;!-- https://twitter.com/hassanrezkhabib/status/1617734005306294272?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Have you heard of .http files?&lt;br&gt;In &lt;a href="https://twitter.com/VisualStudio?ref_src=twsrc%5Etfw"&gt;&amp;#64;VisualStudio&lt;/a&gt; you can write an http file with API calls in it in less than a minute and test all your live endpoints.&lt;br&gt;&lt;br&gt;Huge thanks to &lt;a href="https://twitter.com/sayedihashimi?ref_src=twsrc%5Etfw"&gt;&amp;#64;sayedihashimi&lt;/a&gt; for this amazing tip - I appreciate you, brother.&lt;a href="https://twitter.com/hashtag/visualstudio?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#visualstudio&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/csharp?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#csharp&lt;/a&gt; &lt;a href="https://t.co/JXN0fyerm5"&gt;pic.twitter.com/JXN0fyerm5&lt;/a&gt;&lt;/p&gt;&amp;mdash; Hassan Habib (&amp;#64;HassanRezkHabib) &lt;a href="https://twitter.com/HassanRezkHabib/status/1617734005306294272?ref_src=twsrc%5Etfw"&gt;January 24, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Visual Studio 2022 Preview では ASP.NET Core プロジェクトのエンドポイントを確認できる Endpoints Explorer を利用できるという話(Rider には似た機能がある)&lt;/p&gt;
&lt;!-- https://twitter.com/hassanrezkhabib/status/1617064597105823748?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Check it out.&lt;a href="https://twitter.com/VisualStudio?ref_src=twsrc%5Etfw"&gt;&amp;#64;visualstudio&lt;/a&gt; now has Endpoints Explorer feature to show you all the endpoints available in your &lt;a href="https://t.co/JTjq1dTEAo"&gt;https://t.co/JTjq1dTEAo&lt;/a&gt; Core project.&lt;br&gt;&lt;br&gt;This feature is available in Visual Studio 2022 Preview 3.0&lt;a href="https://twitter.com/hashtag/visualstudio?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#visualstudio&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/csharp?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#csharp&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/endpoints?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#endpoints&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/apis?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#apis&lt;/a&gt; &lt;a href="https://t.co/h4str5c0Kq"&gt;pic.twitter.com/h4str5c0Kq&lt;/a&gt;&lt;/p&gt;&amp;mdash; Hassan Habib (&amp;#64;HassanRezkHabib) &lt;a href="https://twitter.com/HassanRezkHabib/status/1617064597105823748?ref_src=twsrc%5Etfw"&gt;January 22, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="api-proposal-non-cooperative-abortion-of-code-execution-issue-69622-dotnetruntime"&gt;[API Proposal]: Non-cooperative abortion of code execution · Issue #69622 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/issues/69622"&gt;https://github.com/dotnet/runtime/issues/69622&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 から実行しているコードを強制的に中断できる &lt;code&gt;ControlledExecution.Run&lt;/code&gt; というメソッドが追加されている。&lt;/p&gt;
&lt;p&gt;アプリケーションの内部状態が保証されない可能性があるため、運用環境ではなく REPL のようなものでの利用を想定しているものとなっている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/dotnet/api/system.runtime.controlledexecution.run?view=net-7.0"&gt;ControlledExecution.Run(Action, CancellationToken) Method (System.Runtime) | Microsoft Learn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- https://twitter.com/kookiz/status/1616428424104402945?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;I just discovered that an alternative to Thread.Abort was introduced in .NET 7: &lt;a href="https://t.co/a1jS9jrRpF"&gt;https://t.co/a1jS9jrRpF&lt;/a&gt;&lt;br&gt;I hope I&amp;#39;ll never need it but it&amp;#39;s good to know it&amp;#39;s there.&lt;br&gt;And the documentation does a good job at underlining how dangerous this API is.&lt;/p&gt;&amp;mdash; Kevin Gosse (&amp;#64;KooKiz) &lt;a href="https://twitter.com/KooKiz/status/1616428424104402945?ref_src=twsrc%5Etfw"&gt;January 20, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="wasi-support-tracking-issue-65895-dotnetruntime"&gt;WASI support tracking · Issue #65895 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/issues/65895"&gt;https://github.com/dotnet/runtime/issues/65895&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET での WASI (WebAssembly System Interface) のサポートの進行状況の Issue。&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2023-01-20: .NET 7.0.2 &amp; 6.0.13, ReSharper &amp; Rider 2023.1 EAP 1, Visual Studio 2022 17.5 Preview 3, .NET Community Toolkit 8.1, DigiD code made public</title>
			<link>/2023/01/20/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2023/01/20/updates</guid>
			<pubDate>Fri, 20 Jan 2023 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="net-january-2023-updates.net-7.0.2.net-6.0.13.net-blog"&gt;.NET January 2023 Updates – .NET 7.0.2, .NET 6.0.13 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/january-2023-updates/"&gt;https://devblogs.microsoft.com/dotnet/january-2023-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7.0.2 と .NET 6.0.13 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは .NET 6 の DoS 脆弱性が修正されている。この脆弱性は公開されたエンドポイントに悪意あるリクエストを送信することでスタックオーバーフローを発生させ、サービス拒否攻撃が可能となるもの。&lt;/p&gt;
&lt;h3 id="resharper-2023.1-starts-its-early-access-program-the.net-tools-blog"&gt;ReSharper 2023.1 Starts Its Early Access Program | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/01/19/resharper-2023-1-eap-starts/"&gt;https://blog.jetbrains.com/dotnet/2023/01/19/resharper-2023-1-eap-starts/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper 2023.1 の EAP  (早期アクセスプロブラム) が開始となった。&lt;/p&gt;
&lt;p&gt;ReSharper 2023.1 EAP 1 では &lt;code&gt;#region&lt;/code&gt; のクイックフィックスや &lt;code&gt;Span.SequenceEquel&lt;/code&gt; の &lt;code&gt;is&lt;/code&gt; への書き換えといったコードインスペクションの改善、C++ サポートの改善が含まれている。&lt;/p&gt;
&lt;h3 id="rider-2023.1-early-access-program-has-started-the.net-tools-blog"&gt;Rider 2023.1 Early Access Program Has Started | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/01/19/rider-2023-1-eap-start/"&gt;https://blog.jetbrains.com/dotnet/2023/01/19/rider-2023-1-eap-start/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider 2023.1 の EAP  (早期アクセスプロブラム) が開始となった。&lt;/p&gt;
&lt;p&gt;Rider 2023.1 EAP 1 では Unity の API のポップアップからドキュメントへのリンクや Unreal Engine での新しいクラス作成時の UI の再実装、Docker の高速モードサポート、 &lt;code&gt;#region&lt;/code&gt; のクイックフィックスや &lt;code&gt;Span.SequenceEquel&lt;/code&gt; の &lt;code&gt;is&lt;/code&gt; への書き換えといったコードインスペクションの改善、メインツールバーの UI 修正が含まれている。&lt;/p&gt;
&lt;h3 id="visual-studio-2022-17.5-preview-3-is-here-visual-studio-blog"&gt;Visual Studio 2022 17.5 Preview 3 is here! - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2022-17-5-preview-3-is-here/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-2022-17-5-preview-3-is-here/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.5 Preview 3 がリリースされた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全般的な IDE シェル、Git、エディター、デバッガー、診断
&lt;ul&gt;
&lt;li&gt;アクセシビリティチェッカー&lt;/li&gt;
&lt;li&gt;スペルチェッカー&lt;/li&gt;
&lt;li&gt;外部ソースデバッグの改善
&lt;ul&gt;
&lt;li&gt;逆コンパイルパフォーマンスの向上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Markdown のデフォルトエディター化&lt;/li&gt;
&lt;li&gt;VS インテントベースの提案&lt;/li&gt;
&lt;li&gt;Microsoft.Data.SQL.Client を使用した SQLServer への接続&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;.NET
&lt;ul&gt;
&lt;li&gt;Razor ファイルでの HTML コードアクションのサポート
&lt;ul&gt;
&lt;li&gt;タグの削除、画像の Base64 エンコード、画像の幅と高さの挿入&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Razor および Roslyn のパフォーマンス改善
&lt;ul&gt;
&lt;li&gt;プロジェクト構成切り替え、コード分析の高速化、UI 遅延を減らすための入力改善&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;より速いインクリメンタルビルドのためのビルド高速化
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/project-system/blob/main/docs/build-acceleration.md"&gt;project-system/build-acceleration.md at main · dotnet/project-system · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;C++
&lt;ul&gt;
&lt;li&gt;ブレースのペアの色付け&lt;/li&gt;
&lt;li&gt;ターミナルで開発コンテナー(devcontainer)を開く&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;セットアップ
&lt;ul&gt;
&lt;li&gt;winget での Visual Studio パッケージの改善&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="announcing.net-community-toolkit-8.1-better-faster-mvvm-source-generators.net-7-support-and-more.net-blog"&gt;Announcing .NET Community Toolkit 8.1! Better, faster MVVM source generators, .NET 7 support, and more! - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-the-dotnet-community-toolkit-810/"&gt;https://devblogs.microsoft.com/dotnet/announcing-the-dotnet-community-toolkit-810/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Community Toolkit 8.1 がリリースされた。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ObservableProperty&lt;/code&gt; へのカスタム属性、MVVM Toolkit アナライザー、MVVM Toolkit Source Generator の最適化、&lt;code&gt;IObservable&amp;lt;T&amp;gt;&lt;/code&gt; メッセンジャー拡張、.NET 7 と C# 11 のサポート。&lt;/p&gt;
&lt;h3 id="minbzkwoo-besluit-broncode-digid-app"&gt;MinBZK/woo-besluit-broncode-digid-app&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/MinBZK/woo-besluit-broncode-digid-app"&gt;https://github.com/MinBZK/woo-besluit-broncode-digid-app&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;オランダの DigiD というアプリケーションがオープンソースとして公開された。(国のアプリで、政府の透明性維持活動の一環と思われる)&lt;/p&gt;
&lt;p&gt;1500万ユーザーのアクティブユーザーがいるアプリケーションで、Xamarin.Forms 製とのこと。&lt;/p&gt;
&lt;!-- https://twitter.com/jfversluis/status/1615362028457332738?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;This is huge! One of THE biggest apps in The Netherlands with 15 million active users, has been open-sourced. And guess what, it&amp;#39;s using Microsoft technology. And not just that, they&amp;#39;re using Xamarin.Forms 🤩&lt;br&gt;&lt;br&gt;Read the (translated) press release here: &lt;a href="https://t.co/5DtK06MNHQ"&gt;https://t.co/5DtK06MNHQ&lt;/a&gt;&lt;/p&gt;&amp;mdash; Gerald Versluis (&amp;#64;jfversluis) &lt;a href="https://twitter.com/jfversluis/status/1615362028457332738?ref_src=twsrc%5Etfw"&gt;January 17, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.digid.nl/en"&gt;DigiD | Home English&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.logius.nl/actueel/broncode-digid-app-openbaar-gemaakt"&gt;Broncode DigiD app openbaar gemaakt | Logius&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="release-7.0.58-service-release-2-dotnetmaui"&gt;Release 7.0.58 Service Release 2 · dotnet/maui&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/maui/releases/tag/7.0.58"&gt;https://github.com/dotnet/maui/releases/tag/7.0.58&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI 7.0.58 Service Release 2 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは様々な不具合の修正や Windows App SDK の更新などが行われている。&lt;/p&gt;
&lt;h3 id="net-framework-january-2023-cumulative-update-preview.net-blog"&gt;.NET Framework January 2023 Cumulative Update Preview - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-framework-january-2023-update/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-framework-january-2023-update/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework の2023年1月の累積アップデートプレビューがリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは WPF のいくつかの不具合と、Socket で稀に発生する問題が修正されている。&lt;/p&gt;
&lt;h3 id="visual-studio-spell-checker-preview-now-available-visual-studio-blog"&gt;Visual Studio Spell Checker Preview Now Available - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-spell-checker-preview-now-available/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-spell-checker-preview-now-available/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio のプレビューで使用できるようになったスペルチェッカーについての紹介。&lt;/p&gt;
&lt;p&gt;記事ではスペルチェッカーの使用方法やどのようなパターンでどのようにチェックされるか、カスタマイズの方法といったことについて紹介している。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="c-12-ienumerable-c-c"&gt;【C# 12 候補】IEnumerable 向けリスト パターン | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2023/1/list-pattern-enumerable/"&gt;https://ufcpp.net/blog/2023/1/list-pattern-enumerable/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 12 候補となっている &lt;code&gt;IEnumerable&lt;/code&gt; 向けのリストパターンマッチを紹介している。&lt;/p&gt;
&lt;h3 id="c-12-c-c"&gt;【C# 12 候補】半自動プロパティ | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2023/1/semi-auto-property"&gt;https://ufcpp.net/blog/2023/1/semi-auto-property&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 12 候補となっている半自動プロパティ (バッキングフィールドのみ自動生成) を紹介している。&lt;/p&gt;
&lt;p&gt;初期化子やオーバーライド時の挙動などについても解説している。&lt;/p&gt;
&lt;h3 id="beginners-guide-to-get-started-with-smart-contract-in-c"&gt;Beginners Guide to Get Started with Smart Contract in C#&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/satyakarki/beginners-guide-to-get-started-with-smart-contract-in-c-3c7e"&gt;https://dev.to/satyakarki/beginners-guide-to-get-started-with-smart-contract-in-c-3c7e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Stratis という C# でスマートコントラクトを実装可能なプラットフォームを使用してスマートコントラクトを実装することを紹介。&lt;/p&gt;
&lt;h3 id="net-native-aot"&gt;.NET Native AOT&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ericsink.com/native_aot/index.html"&gt;https://ericsink.com/native_aot/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Native AOT についての解説やサンプルコードを取り扱うシリーズ。&lt;/p&gt;
&lt;h3 id="top-10-bugs-found-in-c-projects-in-2022"&gt;Top 10 bugs found in C# projects in 2022&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://pvs-studio.com/en/blog/posts/csharp/1020/"&gt;https://pvs-studio.com/en/blog/posts/csharp/1020/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2022年に PVS-Studio の開発者が見つけて記事にしていたオープンソースプロジェクトのバグの Top 10 をまとめたもの。&lt;/p&gt;
&lt;h3 id="securing-sensitive-information-with.net-user-secrets-the.net-tools-blog"&gt;Securing Sensitive Information with .NET User Secrets | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/01/17/securing-sensitive-information-with-net-user-secrets/"&gt;https://blog.jetbrains.com/dotnet/2023/01/17/securing-sensitive-information-with-net-user-secrets/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET User Secrets を使用してローカルでの機密情報の保存とアプリケーションからの使用についての紹介。&lt;/p&gt;
&lt;p&gt;JetBrains Rider でのシークレットの管理とアプリケーションからの使用方法を紹介している。&lt;/p&gt;
&lt;h3 id="new-better-search-in-visual-studio-visual-studio-blog"&gt;New: Better search in Visual Studio - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/new-better-search-in-visual-studio/"&gt;https://devblogs.microsoft.com/visualstudio/new-better-search-in-visual-studio/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio でプレビューとなっている新しいオールインワン検索についての紹介。&lt;/p&gt;
&lt;h3 id="rate-limiting-with-asp.net-core-7.0"&gt;Rate Limiting with ASP.NET Core 7.0&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/abp-community/rate-limiting-with-asp-net-core-7-0-e7834a94b8c5"&gt;https://medium.com/abp-community/rate-limiting-with-asp-net-core-7-0-e7834a94b8c5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 でのレートリミット API の紹介と ASP.NET Core で使用する方法について。&lt;/p&gt;
&lt;h3 id="exploring-the-model-binding-logic-of-minimal-apis-behind-the-scenes-of-minimal-apis-part-3"&gt;Exploring the model-binding logic of minimal APIs: Behind the scenes of minimal APIs - Part 3&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/behind-the-scenes-of-minimal-apis-3-exploring-the-model-binding-logic-of-minimal-apis/"&gt;https://andrewlock.net/behind-the-scenes-of-minimal-apis-3-exploring-the-model-binding-logic-of-minimal-apis/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Minimal API でのモデルバインディングの仕組みを解説。&lt;/p&gt;
&lt;p&gt;記事ではどのような流れで受け取ったリクエストをハンドラーの引数にバインドするかといった仕組みと流れを解説している。&lt;/p&gt;
&lt;h3 id="multiple-file-drag-and-drop-upload-with-asp.net-core-khalid-abuhakmeh"&gt;Multiple File Drag and Drop Upload with ASP.NET Core | Khalid Abuhakmeh&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://khalidabuhakmeh.com/multiple-file-drag-and-drop-upload-with-aspnet-core"&gt;https://khalidabuhakmeh.com/multiple-file-drag-and-drop-upload-with-aspnet-core&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;複数のファイルをドラッグアンドドロップでアップロードする Razor ページを実装する方法について。&lt;/p&gt;
&lt;h3 id="reading-object-in-memory-starting-with-stacks"&gt;Reading “object” in memory - starting with stacks&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://chnasarre.medium.com/reading-object-in-memory-starting-with-stacks-aaef54bd521d"&gt;https://chnasarre.medium.com/reading-object-in-memory-starting-with-stacks-aaef54bd521d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;診断プロトコルの nettrace で受信できるオブジェクトのペイロードを読み取る方法についての解説。&lt;/p&gt;
&lt;h3 id="learn-dateonly-timeonly"&gt;Learn DateOnly &amp;amp; TimeOnly&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/karenpayneoregon/learn-dateonly-timeonly-23j0"&gt;https://dev.to/karenpayneoregon/learn-dateonly-timeonly-23j0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;DateOnly と TimeOnly の基本の紹介と、Json.NET, System.Text.Json などのライブラリーでの対応について。&lt;/p&gt;
&lt;h3 id="propertychangedeventmanager-qiita"&gt;PropertyChangedEventManagerはスレッドプールでは失敗する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/emoacht/items/3f7e216b43431e960751"&gt;https://qiita.com/emoacht/items/3f7e216b43431e960751&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PropertyChangedEventManager&lt;/code&gt; の &lt;code&gt;AddListener&lt;/code&gt;/&lt;code&gt;RemoveListener&lt;/code&gt; は同じスレッドから呼び出す必要があることについて。&lt;/p&gt;
&lt;h3 id="c-dictionaryhashtable"&gt;[C#] Dictionary(HashTable)を自作して理解する&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/fugi/articles/d2a5ef35e4190f"&gt;https://zenn.dev/fugi/articles/d2a5ef35e4190f&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Dictionary のような構造を実装して、ハッシュの扱いを理解してみるという試み。&lt;/p&gt;
&lt;h3 id="sta"&gt;非同期メイン関数でスレッドアパートメントがSTAにならない&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/nin_neko/articles/6f08f2fdace43f"&gt;https://zenn.dev/nin_neko/articles/6f08f2fdace43f&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;エントリーポイントに &lt;code&gt;STAThread&lt;/code&gt; 属性をつけていても、&lt;code&gt;async Task&lt;/code&gt; と非同期メソッドになっている場合、スレッドアパートメントが STA に設定されないことについてとその対処方法。&lt;/p&gt;
&lt;h3 id="net-appsettings.json-qiita"&gt;【.NET】設定ファイル(例 appsettings.json)にコメント書けるってよ - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/yaju/items/35d94a20e8e3e8ca268c"&gt;https://qiita.com/yaju/items/35d94a20e8e3e8ca268c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoft.Extensions.Configuration.Json (appsettings.json など) は JavaScript または C# スタイルのコメントを JSON に書くことが許可されていることについて。&lt;/p&gt;
&lt;h3 id="asp.net-core-qiita"&gt;ASP.NET Core でカスタム検証属性を作成する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/gushwell/items/d659027304645b30b805"&gt;https://qiita.com/gushwell/items/d659027304645b30b805&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core で &lt;code&gt;ValidationAttribute&lt;/code&gt; を使ったカスタム検証属性を実装する方法について。&lt;/p&gt;
&lt;h3 id="the-evolution-of-delegate-performance-in.net"&gt;The evolution of delegate performance in .NET&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;skyake/the-evolution-of-delegate-performance-in-net-c8f23572b8b1"&gt;https://medium.com/&amp;#64;skyake/the-evolution-of-delegate-performance-in-net-c8f23572b8b1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 で行われた PGO によるデリゲートの最適化についての解説。&lt;/p&gt;
&lt;h3 id="track-your-coding-progress-on-github-with-a.net-worker-service"&gt;Track your coding progress on GitHub with a .NET Worker Service&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/sannae/track-my-coding-progress-on-github-with-a-net-worker-service-49g4"&gt;https://dev.to/sannae/track-my-coding-progress-on-github-with-a-net-worker-service-49g4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GitHub で自分のリポジトリーの言語統計を取る仕組みをワーカーサービスとして実装してみる例。&lt;/p&gt;
&lt;h3 id="using-alias-c-c"&gt;using alias を任意の型に対応 | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2023/1/using-alias-any-types/"&gt;https://ufcpp.net/blog/2023/1/using-alias-any-types/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;using&lt;/code&gt; によるエイリアスで定義できるものを拡張するという提案についての解説。&lt;/p&gt;
&lt;h3 id="profiling.net-on-linux-with-benchmarkdotnet"&gt;Profiling .NET on Linux with BenchmarkDotNet&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://adamsitnik.com/PerfCollectProfiler/"&gt;https://adamsitnik.com/PerfCollectProfiler/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;BenchmarkDotNet を使用して Linux 上で .NET のプロファイリングをする方法について。&lt;/p&gt;
&lt;p&gt;0.13.3 で導入された PerfCollectProfiler プラグインによって PerfView や SpeedScope、perf ファイルをサポートするツールで開ける形でプロファイリング結果をエクスポートできる。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="dots-the-friendly.net-sdk-manager-johnnys.news"&gt;Dots - the friendly .NET SDK manager - Johnnys.News&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://johnnys.news/2023/01/Dots-a-dotnet-SDK-manager"&gt;https://johnnys.news/2023/01/Dots-a-dotnet-SDK-manager&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;様々な .NET SDK のインストール、アンインストールを行える GUI ツール。&lt;/p&gt;
&lt;h3 id="veloxdbveloxdb-an-object-oriented-database-for-building-next-generation-solutions-with.net-and-c"&gt;VeloxDB/VeloxDB: An object oriented database for building next generation solutions with .NET and C#.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/VeloxDB/VeloxDB"&gt;https://github.com/VeloxDB/VeloxDB&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# で記述された .NET 向けオブジェクト指向データベース。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/defufna/introducing-veloxdb-26j1"&gt;Introducing VeloxDB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="otterkitotterkit-otterkit-cobol-compiler"&gt;otterkit/otterkit: Otterkit COBOL Compiler&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/otterkit/otterkit"&gt;https://github.com/otterkit/otterkit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET プラットフォーム向け ISO COBOL 2022 のコンパイラーとランタイム実装。&lt;/p&gt;
&lt;h3 id="stablediffusiondiscordbot"&gt;StableDiffusionDiscordBot&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://stablediffusiondiscordbot.azurewebsites.net/"&gt;https://stablediffusiondiscordbot.azurewebsites.net/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Stable Diffusion などで AI 画像生成を行う Discord Bot とそのサイト。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/kawa0x0a/articles/d2a1ca23be053a"&gt;AI画像生成(Stable Diffusionなど)を行うDiscordのBotを追加するサイトをBlazorで作成したお話&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="marplexwpfsnowfall-fully-customizable-wpf-snowfall-control"&gt;Marplex/WpfSnowfall: Fully customizable WPF snowfall control&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/Marplex/WpfSnowfall"&gt;https://github.com/Marplex/WpfSnowfall&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WPF アプリケーションで雪を降らせることのできるコントロール。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/marplex/add-some-snow-in-your-wpf-apps-3dck"&gt;Add some snow in your WPF apps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="net-microsoft-learn"&gt;ベースライン パッケージ検証コントロール - .NET | Microsoft Learn&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://learn.microsoft.com/ja-jp/dotnet/fundamentals/package-validation/baseline-version-validator"&gt;https://learn.microsoft.com/ja-jp/dotnet/fundamentals/package-validation/baseline-version-validator&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 以降で導入された NuGet のパッケージ検証機能について説明。&lt;/p&gt;
&lt;p&gt;NuGet パッケージを作成時に指定したベースラインバージョンからの API の破壊的変更を検出することができる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meziantou.net/detecting-breaking-changes-between-two-versions-of-a-nuget-package-at-packaging.htm"&gt;Detecting breaking changes between two versions of a NuGet package at packaging time - Gérald Barré&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="ml.net-10.net"&gt;ML.NET チュートリアル | 10 分で始める | .NET&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dotnet.microsoft.com/ja-jp/learn/ml-dotnet/get-started-tutorial/intro"&gt;https://dotnet.microsoft.com/ja-jp/learn/ml-dotnet/get-started-tutorial/intro&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/engineercafe/articles/985c6594d1a326"&gt;ML .NETでテキストに含まれる感情を分析してみた&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ML.NET を使用してテキストのポジティブ/ネガティブを判定するチュートリアル。&lt;/p&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;p&gt;.NET 8 の Kestrel で名前付きパイプをサポートするという話。&lt;/p&gt;
&lt;!-- https://twitter.com/jamesnk/status/1615902642492039180?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Coming in .NET 8: Support for named pipes in Kestrel.&lt;br&gt;&lt;br&gt;⚒️ Build a server for inter-process communication with Kestrel + .NET&lt;br&gt;🖥️ Call it from other Windows apps using named pipes. &lt;a href="https://t.co/9QsksD1N3N"&gt;pic.twitter.com/9QsksD1N3N&lt;/a&gt;&lt;/p&gt;&amp;mdash; James Newton-King ♔ (&amp;#64;JamesNK) &lt;a href="https://twitter.com/JamesNK/status/1615902642492039180?ref_src=twsrc%5Etfw"&gt;January 19, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2023-01-13: paint.net 5.0, ReSharper &amp; Rider 2023.1 Roadmap, Swashbuckle.AspNetCore 6.5.0</title>
			<link>/2023/01/13/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2023/01/13/updates</guid>
			<pubDate>Fri, 13 Jan 2023 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="paint.net-5.0-is-now-available"&gt;paint.net 5.0 is now available!&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://forums.getpaint.net/topic/121643-paintnet-50-is-now-available/"&gt;https://forums.getpaint.net/topic/121643-paintnet-50-is-now-available/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Paint.NET 5.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは筆圧検知の対応、GPU を使用したレンダリングや画像処理、新しいエフェクトプラグインシステム、様々なパフォーマンスの向上や改善などが行われている。&lt;/p&gt;
&lt;p&gt;また、.NET 7 を使用してビルドされるようになり、レガシーな C++/CLI コードは &lt;a href="https://github.com/terrafx/terrafx.interop.windows"&gt;TerraFX.Interop.Windows&lt;/a&gt; に置き換えられたとのこと。&lt;/p&gt;
&lt;h3 id="resharper-2023.1-roadmap-the.net-tools-blog"&gt;ReSharper 2023.1 Roadmap | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/01/10/resharper-2023-1-roadmap/"&gt;https://blog.jetbrains.com/dotnet/2023/01/10/resharper-2023-1-roadmap/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper 2023.1 のロードマップ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ショートカットのオーバーホール&lt;/li&gt;
&lt;li&gt;アウトオブプロセスへの移行&lt;/li&gt;
&lt;li&gt;文法チェック
&lt;ul&gt;
&lt;li&gt;組み込みのスペルチェッカーから JetBrains Grazie への移行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ユニットテスト自動化&lt;/li&gt;
&lt;li&gt;ローカリゼーション
&lt;ul&gt;
&lt;li&gt;簡体字中国語、日本語、韓国語&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;UX/UI の再デザイン&lt;/li&gt;
&lt;li&gt;その他
&lt;ul&gt;
&lt;li&gt;Web 開発&lt;/li&gt;
&lt;li&gt;更新ダイアログ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rider-2023.1-roadmap-the.net-tools-blog"&gt;Rider 2023.1 Roadmap | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/01/10/rider-2023-1-roadmap/"&gt;https://blog.jetbrains.com/dotnet/2023/01/10/rider-2023-1-roadmap/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider 2023.1 のロードマップ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;設定の同期プラグイン&lt;/li&gt;
&lt;li&gt;Docker サポートの改善&lt;/li&gt;
&lt;li&gt;データベーススキーマ比較&lt;/li&gt;
&lt;li&gt;ゲーム開発
&lt;ul&gt;
&lt;li&gt;Unity
&lt;ul&gt;
&lt;li&gt;DOTS のサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unreal Engine&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文法チェック
&lt;ul&gt;
&lt;li&gt;組み込みのスペルチェッカーから JetBrains Grazie への移行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;その他
&lt;ul&gt;
&lt;li&gt;パフォーマンス&lt;/li&gt;
&lt;li&gt;新しい UI の調整&lt;/li&gt;
&lt;li&gt;ローカリゼーション
&lt;ul&gt;
&lt;li&gt;簡体字中国語、日本語、韓国語&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="release-v6.5.0-domaindrivendevswashbuckle.aspnetcore"&gt;Release v6.5.0 · domaindrivendev/Swashbuckle.AspNetCore&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/domaindrivendev/Swashbuckle.AspNetCore/releases/tag/v6.5.0"&gt;https://github.com/domaindrivendev/Swashbuckle.AspNetCore/releases/tag/v6.5.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Swashbuckle.AspNetCore 6.5.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースではターゲットフレームワークに .NET 7 が追加されたほか、Swagger UI のアップデートが行われている。&lt;/p&gt;
&lt;h3 id="release-release-v1.46.6-grpcgrpc"&gt;Release Release v1.46.6 · grpc/grpc&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/grpc/grpc/releases/tag/v1.46.6"&gt;https://github.com/grpc/grpc/releases/tag/v1.46.6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gRPC 1.46.6 (C-Core) がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは zlib に関する脆弱性の対応といくつかの不具合の修正が行われている。&lt;/p&gt;
&lt;h3 id="release-6.9.0-fluentassertionsfluentassertions"&gt;Release 6.9.0 · fluentassertions/fluentassertions&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/fluentassertions/fluentassertions/releases/tag/6.9.0"&gt;https://github.com/fluentassertions/fluentassertions/releases/tag/6.9.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;FluentAssertions 6.9.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;TimeOnly や型やメソッドなどのリフレクションなどに関するアサーションメソッドの追加。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="cdatetime-qiita"&gt;【C#】DateTimeの和暦表示 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/ikuzak/items/b0fa005d267041890ed6"&gt;https://qiita.com/ikuzak/items/b0fa005d267041890ed6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;DateTime を和暦でフォーマットする際に R (令和) のようなアルファベットにする方法について。&lt;/p&gt;
&lt;h3 id="c-io"&gt;C# で本当の非同期 IO&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/k_taro56/articles/csharp-true-async-io"&gt;https://zenn.dev/k_taro56/articles/csharp-true-async-io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;FileStream の非同期 I/O を使用するかどうかの &lt;code&gt;useAsync&lt;/code&gt; はデフォルトで &lt;code&gt;false&lt;/code&gt; となっているので非同期 I/O とならないことについて。&lt;/p&gt;
&lt;h3 id="inheritance-strategies-in-entity-framework-core-7"&gt;Inheritance Strategies in Entity Framework Core 7&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/abp-community/inheritance-strategies-in-entity-framework-core-7-e0cfd42877a5"&gt;https://medium.com/abp-community/inheritance-strategies-in-entity-framework-core-7-e0cfd42877a5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core の継承したモデルの格納方法として EF 7 でサポートされた TPC (コンクリート型ごとのテーブル)とそれ以前からサポートされていた TPH, TPT についての簡単な紹介。&lt;/p&gt;
&lt;h3 id="sqlitepclraw-and-open-source-sustainability"&gt;SQLitePCLRaw and open source sustainability&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ericsink.com/entries/sqlitepclraw_sustainability.html"&gt;https://ericsink.com/entries/sqlitepclraw_sustainability.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SQLitePCLRaw (SQLite のネイティブバインディング) を維持する上での現状や懸念点、利益など。&lt;/p&gt;
&lt;h3 id="parsing-a-template-language-with-c-and-pidgin-zach-on-code"&gt;Parsing a template language with C# and Pidgin | Zach on Code&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zachoncode.dev/blog/parsing-template-language-with-csharp-and-pidgin/"&gt;https://zachoncode.dev/blog/parsing-template-language-with-csharp-and-pidgin/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;パーサーライブラリーの Pidgin を使用してテンプレート言語を実装する方法を解説。&lt;/p&gt;
&lt;h3 id="reactiveproperty-v9.0.0"&gt;ReactiveProperty v9.0.0 のプレリリース版を出してみました&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/okazuki/articles/reactiveproperty-v9-0-0-pre1"&gt;https://zenn.dev/okazuki/articles/reactiveproperty-v9-0-0-pre1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReactiveProperty v9.0.0 のプレリリースで行った改善や再構成、新しいクラスの追加などを解説。&lt;/p&gt;
&lt;h3 id="the-road-to-out-of-process-resharper-asynchronous-typing-the.net-tools-blog"&gt;The Road to Out-of-Process ReSharper: Asynchronous Typing | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/01/05/resharper-out-of-process/"&gt;https://blog.jetbrains.com/dotnet/2023/01/05/resharper-out-of-process/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper を Visual Studio とは別のプロセス(アウトオブプロセス)で動作させる形に移行するためのハードルや行なっていることを解説。&lt;/p&gt;
&lt;h3 id="net-conf-2022-recap-event-microsoft-japan-community-event-tour-series"&gt;[オンデマンド版] .NET Conf 2022 Recap Event 東京 ~ Microsoft Japan Community Event Tour Series&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://info.microsoft.com/JA-ModApps-VDEO-FY23-12Dec-23-MKTO-FY23-dotnetconf-2022-Recap-Tokyo-Gated-video-SRGCM8691_LP01-Registration---Form-in-Body.html"&gt;https://info.microsoft.com/JA-ModApps-VDEO-FY23-12Dec-23-MKTO-FY23-dotnetconf-2022-Recap-Tokyo-Gated-video-SRGCM8691_LP01-Registration---Form-in-Body.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Conf 2022 Recap Event 東京 のセッションのオンデマンド動画。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.microsoft.com/cms/api/am/binary/RE5c8Zg"&gt;アジェンダ (PDF)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="c-qiita"&gt;フォルダの書き込みに管理者権限が不要かどうかをC#で判定する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/Alone-and-Slow/items/a2332bcb500051e19fbc"&gt;https://qiita.com/Alone-and-Slow/items/a2332bcb500051e19fbc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows 環境でフォルダーに対する書き込み権限があるかどうかを確認する方法。&lt;/p&gt;
&lt;h3 id="testing-asp.net-core-fastendpoints-khalid-abuhakmeh"&gt;Testing ASP.NET Core FastEndpoints | Khalid Abuhakmeh&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://khalidabuhakmeh.com/testing-aspnet-core-fastendpoints"&gt;https://khalidabuhakmeh.com/testing-aspnet-core-fastendpoints&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core 上に構築されたフレームワーク FastEndpoints を使用した際のユニットテストについての解説。&lt;/p&gt;
&lt;h3 id="implement-a-custom-configuration-provider-in.net-7"&gt;Implement a Custom Configuration Provider in .NET 7&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;gokerakce/implement-a-custom-configuration-provider-in-net-7-c0a195dcd05f"&gt;https://medium.com/&amp;#64;gokerakce/implement-a-custom-configuration-provider-in-net-7-c0a195dcd05f&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 での Microsoft.Extensions.Configuration のカスタムの構成プロバイダーを実装する方法の解説。&lt;/p&gt;
&lt;p&gt;記事では SQL Server から値を読み出し、再読み込みが可能なプロバイダーを実装している。&lt;/p&gt;
&lt;h3 id="how-to-run-disposable-databases-for-your-tests.improve-your-integration-tests-accuracy-with-testcontainers"&gt;How to run disposable databases for your tests. Improve your integration tests accuracy with Testcontainers&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.genezini.com/p/how-to-run-disposable-databases-for-your-tests.-improve-your-integration-tests-accuracy-with-testcontainers/"&gt;https://blog.genezini.com/p/how-to-run-disposable-databases-for-your-tests.-improve-your-integration-tests-accuracy-with-testcontainers/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Testcontainers を使用して使い捨てのデータベースを起動して、ユニットテストや統合テストを行う方法を解説。&lt;/p&gt;
&lt;h3 id="five-shortcuts-to-boost-your-productivity-visual-studio-blog"&gt;Five shortcuts to boost your productivity - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/the-visual-studio-editor-can-do-that/"&gt;https://devblogs.microsoft.com/visualstudio/the-visual-studio-editor-can-do-that/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio で生産性を高める5つのショートカットを紹介。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;D&lt;/kbd&gt;: 行の複製&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;L&lt;/kbd&gt;: 行全体の削除&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;.&lt;/kbd&gt;: 次の同じ単語を選択&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;Alt&lt;/kbd&gt;+選択: ボックス(矩形)選択&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Ctrl&lt;/kbd&gt;+マウスクリック: 複数カーソルの挿入&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="confusing.net-debuggers-proxy-objects"&gt;Confusing .NET Debuggers: Proxy Objects&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://washi.dev/blog/posts/debugger-proxy-objects/"&gt;https://washi.dev/blog/posts/debugger-proxy-objects/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;プロキシーオブジェクトを差し込むことで、逆コンパイラーやそれに付随したデバッガーなどを欺く手法について解説。&lt;/p&gt;
&lt;h3 id="c-12-params-c-c"&gt;【C# 12 候補】ラムダ式のデフォルト引数と params 引数 | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2023/1/lambda-default/"&gt;https://ufcpp.net/blog/2023/1/lambda-default/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 12の機能の候補であるラムダ式でのデフォルト引数と params 引数を許可する改善について。&lt;/p&gt;
&lt;h3 id="language-injection-improvements-in-rider-2022.3-the.net-tools-blog"&gt;Language Injection Improvements in Rider 2022.3 | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/01/12/language-injection-improvements-in-rider-2022-3/"&gt;https://blog.jetbrains.com/dotnet/2023/01/12/language-injection-improvements-in-rider-2022-3/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider 2022.3 での言語インジェクションの改善の紹介。&lt;/p&gt;
&lt;p&gt;生文字列リテラルでの対応や、文字列結合での補完文字列の対応、LanguageInjection 属性の対応、.NET 7 の StringSyntax 属性の対応など。&lt;/p&gt;
&lt;h3 id="debugging-encoded-text-visual-studio-blog"&gt;Debugging Encoded Text - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/debugging-encoded-text/"&gt;https://devblogs.microsoft.com/visualstudio/debugging-encoded-text/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最新の Visual Studio プレビューで利用できるデバッガーのテキストビジュアライザーの紹介。&lt;/p&gt;
&lt;p&gt;プレビューでのテキストビジュアライザーは Base64 や URL のエンコードとデコード、JWT のデコードを行った結果を表示できる。&lt;/p&gt;
&lt;h3 id="extracting-metadata-from-a-minimal-api-handler-behind-the-scenes-of-minimal-apis-part-2"&gt;Extracting metadata from a minimal API handler: Behind the scenes of minimal APIs - Part 2&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/behind-the-scenes-of-minimal-apis-2-extracting-metadata-from-a-minimal-api-handler/"&gt;https://andrewlock.net/behind-the-scenes-of-minimal-apis-2-extracting-metadata-from-a-minimal-api-handler/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Minimal API のエンドポイントのハンドラーとして渡される Delegate からどのようにしてメタデータを抽出し、RequestDelegate を作っているかを解説。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="jellyfinjellyfin-the-free-software-media-system"&gt;jellyfin/jellyfin: The Free Software Media System&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/jellyfin/jellyfin"&gt;https://github.com/jellyfin/jellyfin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Emby や Plex のような .NET で構築されたメディアサーバー。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jellyfin.org/"&gt;The Free Software Media System | Jellyfin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/awsmfoss/foss-spotlight-jellyfin-452g"&gt;FOSS Spotlight: 📺 Jellyfin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="jonpsmithnet.localizemessagesanderrors-this-library-provides-extra-code-to-make-it-easier-to-support-in-different-languages-in-your.net-application"&gt;JonPSmith/Net.LocalizeMessagesAndErrors: This library provides extra code to make it easier to support in different languages in your .NET application&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/JonPSmith/Net.LocalizeMessagesAndErrors"&gt;https://github.com/JonPSmith/Net.LocalizeMessagesAndErrors&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET アプリケーションのローカリゼーションの実装を支援するライブラリー。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.thereformedprogrammer.net/improving-the-support-of-multiple-languages-in-net-applications/"&gt;Improving the support of multiple languages in .NET applications – The Reformed Programmer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="linq-me-up"&gt;LINQ Me Up&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://linqmeup.com/"&gt;https://linqmeup.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AI を使用して SQL の SELECT 文を LINQ に変換するツール。&lt;/p&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;p&gt;C# はコンテキストキーワードが多いので一見予約語のような識別子を持つものを定義して変なコードを書けてしまうという話。&lt;/p&gt;
&lt;!-- https://twitter.com/jaredpar/status/1613615815231934468?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;The .NET Community Stand up was fun today. Got to show viewers the evolution of code that leads us to the following being legal &lt;a href="https://t.co/PZNe9XT4Ij"&gt;pic.twitter.com/PZNe9XT4Ij&lt;/a&gt;&lt;/p&gt;&amp;mdash; Jared Parsons (&amp;#64;jaredpar) &lt;a href="https://twitter.com/jaredpar/status/1613615815231934468?ref_src=twsrc%5Etfw"&gt;January 12, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;.NET では同じ完全修飾名で同じアセンブリなのに同一プロセス内で異なる型として認識されるケースがあるという話。(AssemblyLoadContext が異なる場合など)。これは殆どのユーザーには問題がないが、Analyzer や Source Generator といった文脈で問題となることがある。&lt;/p&gt;
&lt;!-- https://twitter.com/jaredpar/status/1613211080918192133?s=12&amp;t=zFu2JC3YBugL-SiMBxWFeg --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;If you think that having two types with the same fully qualified name but diff assemblies in .NET is weird, wait until you have to deal with the same type in the same assembly having two different identities in the same process.&lt;/p&gt;&amp;mdash; Jared Parsons (&amp;#64;jaredpar) &lt;a href="https://twitter.com/jaredpar/status/1613211080918192133?ref_src=twsrc%5Etfw"&gt;January 11, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="rewrite-how-matrix3x2-and-matrix4x4-are-implemented-by-tannergooding-pull-request-80091-dotnetruntime"&gt;Rewrite how Matrix3x2 and Matrix4x4 are implemented by tannergooding · Pull Request #80091 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/80091"&gt;https://github.com/dotnet/runtime/pull/80091&lt;/a&gt;&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2023-01-06: grpc-dotnet v2.51.0, WinUI 2.8.2, Snoop 5.0.0</title>
			<link>/2023/01/06/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2023/01/06/updates</guid>
			<pubDate>Fri, 06 Jan 2023 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="release-release-v2.51.0-grpcgrpc-dotnet"&gt;Release Release v2.51.0 · grpc/grpc-dotnet&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/grpc/grpc-dotnet/releases/tag/v2.51.0"&gt;https://github.com/grpc/grpc-dotnet/releases/tag/v2.51.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gRPC (grpc-dotnet) v2.51.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースではロギングメッセージの改善などいくつかの修正と改善が含まれている。&lt;/p&gt;
&lt;h3 id="release-microsoft.ui.xaml-v2.8.2-microsoftmicrosoft-ui-xaml"&gt;Release Microsoft.UI.Xaml v2.8.2 · microsoft/microsoft-ui-xaml&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/microsoft/microsoft-ui-xaml/releases/tag/v2.8.2"&gt;https://github.com/microsoft/microsoft-ui-xaml/releases/tag/v2.8.2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WinUI v2.8.2 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは主に不具合の修正が数多く含まれている。&lt;/p&gt;
&lt;h3 id="release-v5.0.0-snoopwpfsnoopwpf"&gt;Release v5.0.0 · snoopwpf/snoopwpf&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/snoopwpf/snoopwpf/releases/tag/v5.0.0"&gt;https://github.com/snoopwpf/snoopwpf/releases/tag/v5.0.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Snoop v5.0.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは .NET Framework 4.5.2 以前のバージョンと .NET Core 3.0 のサポートが削除され .NET 6 以上のバージョンのサポートが追加された。その他いくつかの修正と改善が含まれている。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="memorypack-yucchiys-note"&gt;MemoryPackでシリアライズ・デシリアライズをカスタマイズするいくつかの方法 | Yucchiy's Note&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.yucchiy.com/2023/01/memorypack-custom-serialize-deserialize/"&gt;https://blog.yucchiy.com/2023/01/memorypack-custom-serialize-deserialize/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MemoryPack のシリアライズとデシリアライズの処理の前後で独自の処理を挟み込む方法などシリアライズ処理のカスタマイズを紹介している。&lt;/p&gt;
&lt;h3 id="lnkcswin32"&gt;ショートカットファイル(.lnk)からリンク先を取得する(CsWin32編)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/udaken/articles/cswin32_get_target_from_shortcut_file"&gt;https://zenn.dev/udaken/articles/cswin32_get_target_from_shortcut_file&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CsWin32 を使用して COM 呼び出しを行い、ショートカットファイルのリンク先を取得する方法について。&lt;/p&gt;
&lt;h3 id="difference-between-add-and-addasync-in-ef-core"&gt;Difference between Add and AddAsync in EF Core&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/medialesson/difference-between-add-and-addasync-in-ef-core-6b8cfd8f7cdb"&gt;https://medium.com/medialesson/difference-between-add-and-addasync-in-ef-core-6b8cfd8f7cdb&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entify Framework Core の Add と AddAsync メソッドの違いについての解説。&lt;/p&gt;
&lt;p&gt;AddAsync は SQLServer の特別な値ジェネレーターが使用される時のみ非同期となり、それ以外のパターンでは Add を使用すべきという話。&lt;/p&gt;
&lt;h3 id="years-of-naudio"&gt;20 Years of NAudio&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://markheath.net/post/naudio-20-year-anniversary"&gt;https://markheath.net/post/naudio-20-year-anniversary&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NAudio の20年の振り返りと現在のプロジェクトのステータスについて。&lt;/p&gt;
&lt;h3 id="iservicecollection-qiita"&gt;IServiceCollection に対する拡張メソッド一覧 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/mxProject/items/7d7a835adfb300d07fec"&gt;https://qiita.com/mxProject/items/7d7a835adfb300d07fec&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoft.Extensions.DependencyInjection をはじめとした Microsoft.Extensions が IServiceCollection に対して提供している拡張メソッドを紹介。&lt;/p&gt;
&lt;h3 id="net-annotated-monthly-january-2023-the.net-tools-blog"&gt;.NET Annotated Monthly | January 2023 | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2023/01/04/net-annotated-monthly-january-2023/"&gt;https://blog.jetbrains.com/dotnet/2023/01/04/net-annotated-monthly-january-2023/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JetBrains による2023年1月の .NET 関連情報まとめ記事。&lt;/p&gt;
&lt;h3 id="a-first-look-behind-the-scenes-of-minimal-api-endpoints-behind-the-scenes-of-minimal-apis-part-1"&gt;A first look behind the scenes of minimal API endpoints: Behind the scenes of minimal APIs - Part 1&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/behind-the-scenes-of-minimal-apis-1-a-first-look-behind-the-scenes-of-minimal-api-endpoints/"&gt;https://andrewlock.net/behind-the-scenes-of-minimal-apis-1-a-first-look-behind-the-scenes-of-minimal-api-endpoints/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core の Minimal API によるエンドポイント構築処理の裏側を解説。&lt;/p&gt;
&lt;h2 id="section-2"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-3"&gt;ツイート&lt;/h3&gt;
&lt;p&gt;FNA では NativeAOT をコンソール向けに移植したという話。&lt;/p&gt;
&lt;!-- https://twitter.com/thespydog/status/1609602883418296320?s=12&amp;t=d6NIoMx9sGgDHxHGPEHOIA --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;NativeAOT allows C# game developers to build their games directly for console platforms, without any C++ transpilation! This means you get to use modern .NET on consoles, with build times around 10 seconds instead of 10 minutes.&lt;br&gt;&lt;br&gt;If you’re interested, please get in touch with us! &lt;a href="https://t.co/NOkhPdIYNb"&gt;https://t.co/NOkhPdIYNb&lt;/a&gt;&lt;/p&gt;&amp;mdash; Caleb Cornett (&amp;#64;TheSpydog) &lt;a href="https://twitter.com/TheSpydog/status/1609602883418296320?ref_src=twsrc%5Etfw"&gt;January 1, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;bflat (C# をネイティブバイナリーにコンパイルするツール) で UEFI をターゲットにしてビルドできるようになった(ベアメタルで動くように)という話。&lt;/p&gt;
&lt;!-- https://twitter.com/mstrehovsky/status/1610043782061514752?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;New version of bflat, my take on C# with Go-like tooling is out. New in the 7.0.1 release: build C# apps that run on bare metal hardware without an OS. &lt;a href="https://t.co/kkCEg0K5nO"&gt;https://t.co/kkCEg0K5nO&lt;/a&gt; &lt;a href="https://t.co/At2nYFGWdd"&gt;pic.twitter.com/At2nYFGWdd&lt;/a&gt;&lt;/p&gt;&amp;mdash; Michal Strehovský (&amp;#64;MStrehovsky) &lt;a href="https://twitter.com/MStrehovsky/status/1610043782061514752?ref_src=twsrc%5Etfw"&gt;January 2, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2022-12-31: BenchmarkDotNet 0.13.3</title>
			<link>/2022/12/31/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2022/12/31/updates</guid>
			<pubDate>Sat, 31 Dec 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="benchmarkdotnet-v0.13.3-benchmarkdotnet"&gt;BenchmarkDotNet v0.13.3 | BenchmarkDotNet&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://benchmarkdotnet.org/changelog/v0.13.3.html"&gt;https://benchmarkdotnet.org/changelog/v0.13.3.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;BenchmarkDotNet 0.13.3 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは ARM64 逆アセンブラー、.NET 8 の初期サポート、.NET 6/7 の Mono VM サポート、armv6 と ppc64le のサポートといったプラットフォーム技術への対応が追加された。
その他 WASM や NativeAOT、 Android でのさまざまな改善や ExceptionDiagnoser や PerfCollectProfiler といった機能の追加が行われている。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="practicing-algorithms-using-polyglot-notebooks-part-1-setup"&gt;Practicing algorithms using Polyglot Notebooks - part 1 (setup)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/kkoziarski/practicing-algorithms-using-polyglot-notebooks-part-1-setup-1fp3"&gt;https://dev.to/kkoziarski/practicing-algorithms-using-polyglot-notebooks-part-1-setup-1fp3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Polyglot Notebooks (.NET Interactive) を使用したアルゴリズムの勉強記事シリーズ。セットアップやヘルパーなどを紹介している。&lt;/p&gt;
&lt;h3 id="json-c-c"&gt;JSON とかの中身確認ツール | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2022/12/binarytool/"&gt;https://ufcpp.net/blog/2022/12/binarytool/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MessagePack や JSON などのデータをパースして表示、再シリアライズするといったツールを Blazor WebAssembly で作成したという記事。&lt;/p&gt;
&lt;h3 id="how-to-use-change-tokens-in.net-7"&gt;How to Use Change Tokens in .NET 7?&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;gokerakce/how-to-use-change-tokens-in-net-7-3db9cc43910f"&gt;https://medium.com/&amp;#64;gokerakce/how-to-use-change-tokens-in-net-7-3db9cc43910f&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;IOptionsMonitor などで使用される ChangeToken の使い方を紹介している記事。&lt;/p&gt;
&lt;h3 id="semgrep-sql-injection-1"&gt;Semgrep で SQL Injection と戦う #1&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/masakura/articles/3e65ba04401256"&gt;https://zenn.dev/masakura/articles/3e65ba04401256&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;静的コード解析ツールの Semgrep で C# のコードを解析し、SQL インジェクションを検出する方法についての記事。
記事では Dapper での対応と、いくつかの C# のコードパターンに対応させる方法を紹介している。&lt;/p&gt;
&lt;h3 id="udp-qiita"&gt;UDPでパケットが失われたり入れ替わることを検証 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/diontools/items/822772f8f2d54be8260a"&gt;https://qiita.com/diontools/items/822772f8f2d54be8260a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;UDP で送受信した際にどこ程度ドロップや並び替えが発生するのかを検証してみたという記事。&lt;/p&gt;
&lt;h3 id="a-heavy-lift-bringing-kestrel-yarp-to-azure-app-services-qiita"&gt;A Heavy Lift: Bringing Kestrel + YARP to Azure App Services をピックアップして訳しつつ補足する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/nt-7/items/786ec694b17d8816c2c9"&gt;https://qiita.com/nt-7/items/786ec694b17d8816c2c9&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure App Service のフロントエンドを Kestrel + YARP へ移行したことについての公式ブログ記事を訳して紹介している記事。&lt;/p&gt;
&lt;h3 id="fun-with-nanoframework-running.net-c-on-esp32"&gt;Fun with NanoFramework, running .Net C# on ESP32&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://sandervandevelde.wordpress.com/2022/12/15/fun-with-nanoframework-running-net-charp-on-esp32/"&gt;https://sandervandevelde.wordpress.com/2022/12/15/fun-with-nanoframework-running-net-charp-on-esp32/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ESP32 で .NET nanoFramework 使用して C# のコードを動かす方法を解説している記事。&lt;/p&gt;
&lt;p&gt;記事では MP3 の再生や Wi-Fi への接続方法なども紹介している。&lt;/p&gt;
&lt;h3 id="visual-studio-qiita"&gt;Visual Studioから利用できるプロジェクトテンプレートを作成する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/kamikawa_m/items/75c337f101d9d2f6080e"&gt;https://qiita.com/kamikawa_m/items/75c337f101d9d2f6080e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio で使用できるプロジェクトテンプレートを作成する手順を紹介している記事。&lt;/p&gt;
&lt;h3 id="asp.net-core-identity-qiita"&gt;ASP.NET Core Identity の拡張性を探る - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/MugeSo/items/7ada1f2713b8917970c3"&gt;https://qiita.com/MugeSo/items/7ada1f2713b8917970c3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core Identity のユーザーデータやパスワード関連など細かく拡張するためのインターフェースを紹介している記事。&lt;/p&gt;
&lt;h3 id="top.net-blog-posts-of-2022.net-blog"&gt;Top .NET Blog Posts of 2022 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/top-dotnet-blog-posts-of-2022/"&gt;https://devblogs.microsoft.com/dotnet/top-dotnet-blog-posts-of-2022/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Blog の2022年のトップ投稿を改めて紹介している記事。&lt;/p&gt;
&lt;h3 id="top.net-videos-live-streams-of-2022.net-blog"&gt;Top .NET Videos &amp;amp; Live Streams of 2022 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/top-dotnet-videos-live-streams-of-2022/"&gt;https://devblogs.microsoft.com/dotnet/top-dotnet-videos-live-streams-of-2022/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET チームによる2022年のトップ動画とライブストリーミングを紹介している記事。&lt;/p&gt;
&lt;h3 id="c-qiita"&gt;C#のソースコードから差分のあるメソッドだけを抜き出す - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/myosotis/items/fa48b8aa940f53405218"&gt;https://qiita.com/myosotis/items/fa48b8aa940f53405218&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Roslyn を使用してソースコードを解析して、二つのソースコード間のメソッドを比較して追加、削除、変更を抽出を試みるという記事。&lt;/p&gt;
&lt;h3 id="asp.net-core-7.0-blazor"&gt;ASP.NET Core 7.0 Blazor の新機能のカスタム エレメントを使ってみよう&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/okazuki/articles/blazor-customtag"&gt;https://zenn.dev/okazuki/articles/blazor-customtag&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 の Blazor で対応した、コンポーネントを一般的な HTML の要素のように使用できる仕組みであるカスタムエレメントを使用する方法についての記事。&lt;/p&gt;
&lt;h3 id="better-assertions-for-your-unit-tests"&gt;Better assertions for your unit tests&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.johansmarius.dev/2022/12/better-assertions-for-your-unit-tests.html?m=1"&gt;https://www.johansmarius.dev/2022/12/better-assertions-for-your-unit-tests.html?m=1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ユニットテストでアサーションを Fluent な形で記述する FluentAssertions の紹介をしている記事。&lt;/p&gt;
&lt;h3 id="keycloak-as-authorization-server-in.net"&gt;Keycloak as Authorization Server in .NET&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/nikiforovall/keycloak-as-authorization-server-in-net-91m"&gt;https://dev.to/nikiforovall/keycloak-as-authorization-server-in-net-91m&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Keycloak をASP.NET Core の認証サーバーとして使用する方法について紹介している記事。&lt;/p&gt;
&lt;h3 id="accelerate-ml.net-training-with-intel-onedal"&gt;Accelerate ML.NET training with Intel oneDAL&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/accelerate-ml-net-training-with-intel-onedal/"&gt;https://devblogs.microsoft.com/dotnet/accelerate-ml-net-training-with-intel-onedal/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ML.NET 3.0 のプレビューリリースで Intel oneDAL バックエンドを利用できるようになったというアナウンス。&lt;/p&gt;
&lt;h3 id="vb.netmodvb-qiita"&gt;【VB.NET】拡張コンパイラModVBの紹介(インストール編) - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/yaju/items/2c154a939b9896c855e2"&gt;https://qiita.com/yaju/items/2c154a939b9896c855e2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;VB.NET を拡張したコンパイラー ModVB の導入方法を紹介している記事。&lt;/p&gt;
&lt;h3 id="blazor-javascript"&gt;Blazor から JavaScript のクラスのコンストラクタを呼びたい&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/okazuki/articles/call-js-constructor-from-blazor"&gt;https://zenn.dev/okazuki/articles/call-js-constructor-from-blazor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor の C# 側から JavaScript のクラスのインスタンスを作る方法についての記事。
.NET 8 では直接インスタンスを作ることができるが、.NET 7 では生成用の関数を呼び出すといった形をとる必要がある。&lt;/p&gt;
&lt;h3 id="net-maui-entityframeworkcore"&gt;【.NET MAUI 】EntityFrameworkCore のマイグレーションができない時の対処法&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/tomori_k/articles/9cb07c31a1fdca"&gt;https://zenn.dev/tomori_k/articles/9cb07c31a1fdca&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI プロジェクトでは Entity Framework Core のマイグレーションを実行できない問題とその対処についての記事。&lt;/p&gt;
&lt;h3 id="c-tipudp-qiita"&gt;[C#] メモtip:UDPマルチキャストを受信する(送受信同一ホスト対応) - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/Yothuba3/items/ae6d7822b6b3cfe63be7"&gt;https://qiita.com/Yothuba3/items/ae6d7822b6b3cfe63be7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;UDP マルチキャストを同一ホストでの送信も含めて受信する方法についての記事。&lt;/p&gt;
&lt;h3 id="cdapper-qiita"&gt;【C#】Dapper忘備録【基本編】 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/YuMo_tea/items/ee4182260a0e3216237e"&gt;https://qiita.com/YuMo_tea/items/ee4182260a0e3216237e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Dapper の基本的なメソッドと使い方を紹介している記事。&lt;/p&gt;
&lt;h3 id="ctencent-trtc-sdk-qiita"&gt;C#でTencent TRTC SDK使ってみた！ - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/SoeAtsu/items/6085c647b2c61feed5cb"&gt;https://qiita.com/SoeAtsu/items/6085c647b2c61feed5cb&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Tencent Real-Time Communication の SDK を使用して WPF アプリケーションにビデオ通話を組み込んでみるという記事。&lt;/p&gt;
&lt;h3 id="system.threading.ratelimiting-qiita"&gt;種類を分けて流量制限をする(System.Threading.RateLimiting) - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/skitoy4321/items/265111dd440041e66e5a"&gt;https://qiita.com/skitoy4321/items/265111dd440041e66e5a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 で導入されたレートリミットの API でURLやリソースといった種類ごとに流量制限を行うための PartitionedRateLimiter クラスの解説記事。&lt;/p&gt;
&lt;h3 id="ix.netmaxby.net-6maxbywithties-qiita"&gt;Ix.NETのMaxBy、.NET 6から加わった標準メソッドと名称が衝突したので、MaxByWithTiesになってた - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/RyotaMurohoshi/items/9072987415bcab80b703"&gt;https://qiita.com/RyotaMurohoshi/items/9072987415bcab80b703&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 で LINQ に MaxBy などが追加された影響で Ix.NET の同名のメソッドが変わったことについての記事。&lt;/p&gt;
&lt;h3 id="azure-app-service-asp.net-core-app-service-getconnectionstring-jsakamoto"&gt;Azure App Service に配置した ASP.NET Core アプリで、App Service 上に設定した接続文字列を GetConnectionString で取得できない? | &amp;#64;jsakamoto&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devadjust.exblog.jp/29454749/"&gt;https://devadjust.exblog.jp/29454749/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure App Service の接続文字列設定 (Configuration の  Connection strings) で PostgreSQL のみ正しく取得できない問題について。&lt;/p&gt;
&lt;p&gt;App Service で設定した接続文字列には各データベース種類ごとのプレフィックスがついており、M.E.Configuration は環境変数から読み取る際にそれらを考慮しているが PostgreSQL のみ考慮されていない問題がある。&lt;/p&gt;
&lt;h3 id="generatedregex-qiita"&gt;GeneratedRegexで遊ぶ - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/kurema/items/068385ba2f8bbe3858e1"&gt;https://qiita.com/kurema/items/068385ba2f8bbe3858e1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 で導入された正規表現の処理をあらかじめソースジェネレーターで生成する GeneratedRegex について解説している記事。&lt;/p&gt;
&lt;p&gt;記事では使用方法のほか、実装についての解説、パフォーマンスの比較といったことに触れている。&lt;/p&gt;
&lt;h3 id="hybrid-blazor-nativeaot"&gt;Hybrid Blazor + NativeAOT = ❤️&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://codevision.medium.com/hybrid-blazor-nativeaot-%EF%B8%8F-a6c93de6ede3"&gt;https://codevision.medium.com/hybrid-blazor-nativeaot-%EF%B8%8F-a6c93de6ede3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor Hybrid を Windows Forms 上の WebView2 で表示し、NativeAOT で動作させる方法についての記事。&lt;/p&gt;
&lt;h3 id="net-conf-2022-recap-event.net-7-windows"&gt;.NET Conf 2022 Recap Event 福岡で .NET 7 時代の Windows アプリケーション開発について話しました - しばやん雑記&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.shibayan.jp/entry/20221226/1671991195"&gt;https://blog.shibayan.jp/entry/20221226/1671991195&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Conf 2022 Recap Event 福岡での .NET 7 時代の Windows アプリケーション開発についてのセッションの振り返りとスライドの記事。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="kareaditakavita-kavita-is-a-fast-feature-rich-cross-platform-reading-server.built-with-a-focus-for-manga-and-the-goal-of-being-a-full-solution-for-all-your-reading-needs.setup-your-own-server-and-share-your-reading-collection-with-your-friends-and-family"&gt;Kareadita/Kavita: Kavita is a fast, feature rich, cross platform reading server. Built with a focus for manga and the goal of being a full solution for all your reading needs. Setup your own server and share your reading collection with your friends and family.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/Kareadita/Kavita"&gt;https://github.com/Kareadita/Kavita&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Web ベースの書籍リーダーアプリケーション。&lt;/p&gt;
&lt;p&gt;ZIP ファイルなどを取り扱えるいわゆる自炊などのマンガビューアー。&lt;/p&gt;
&lt;h3 id="mkaringconfuserex-an-open-source-free-protector-for.net-applications"&gt;mkaring/ConfuserEx: An open-source, free protector for .NET applications&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/mkaring/ConfuserEx"&gt;https://github.com/mkaring/ConfuserEx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET アプリケーションの難読化を行うツール。&lt;/p&gt;
&lt;p&gt;コマンドラインツールや MSBuild タスクといった形での利用が可能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/myosotis/items/e14e6e448eeaef574172"&gt;.Netの単一実行ファイルを難読化する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="mrdave1999dotenv.core-dotenv.core-is-a-class-library-for-read-and-parsing.env-files-in.net-core"&gt;MrDave1999/dotenv.core: dotenv.core is a class library for read and parsing .env files in .NET Core&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/MrDave1999/dotenv.core?hss_channel=tw-2384354214"&gt;https://github.com/MrDave1999/dotenv.core?hss_channel=tw-2384354214&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.env (環境変数を記述したファイル) を .NET から取り扱うライブラリー。&lt;/p&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="soysign"&gt;SoySign | シンプルな電子契約サービス&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://soysign.com/"&gt;https://soysign.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor で実装された電子サインサービス。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/nekojoker/articles/11942566354b49"&gt;【Blazor】電子サインができるWebサービスを4ヶ月かけて作った話&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2022-12-23: Oracle Entity Framework Core 7, ReSharper and Rider 2022.3.1</title>
			<link>/2022/12/23/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2022/12/23/updates</guid>
			<pubDate>Fri, 23 Dec 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;p&gt;今週は都合によりリンクだけの紹介となっていますことご了承ください。&lt;/p&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="announcing-oracle-entity-framework-core-7"&gt;Announcing Oracle Entity Framework Core 7&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/oracledevs/announcing-oracle-entity-framework-core-7-d89a2495b7db"&gt;https://medium.com/oracledevs/announcing-oracle-entity-framework-core-7-d89a2495b7db&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="resharper-and-rider-2022.3.1-bug-fixes-are-here"&gt;ReSharper and Rider 2022.3.1 Bug Fixes Are Here&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/12/21/resharper-and-rider-2022-3-1-bug-fixes/"&gt;https://blog.jetbrains.com/dotnet/2022/12/21/resharper-and-rider-2022-3-1-bug-fixes/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="write-markdown-without-leaving-visual-studio-visual-studio-blog"&gt;Write markdown without leaving Visual Studio - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/write-markdown-without-leaving-visual-studio/"&gt;https://devblogs.microsoft.com/visualstudio/write-markdown-without-leaving-visual-studio/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://forest.watch.impress.co.jp/docs/news/1466186.html"&gt;「Visual Studio 2022」にMarkdownエディターが導入へ ～拡張機能なしで編集・プレビュー／「Visual Studio 2022 17.5 Preview 2」でテスト中 - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="sticky-scroll-now-in-preview-visual-studio-blog"&gt;Sticky Scroll now in preview - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/sticky-scroll-now-in-preview/"&gt;https://devblogs.microsoft.com/visualstudio/sticky-scroll-now-in-preview/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://forest.watch.impress.co.jp/docs/news/1464242.html"&gt;「VS Code」でも人気の「固定スクロール」が「Visual Studio 2022」に／「Visual Studio 2022 17.5 Preview 2」でテスト中 - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="kb5022083-wpf-xps-microsoft"&gt;KB5022083 WPF ベースのアプリケーションが XPS ドキュメントをレンダリングする方法の変更 - Microsoft サポート&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://support.microsoft.com/ja-jp/topic/kb5022083-wpf-%E3%83%99%E3%83%BC%E3%82%B9%E3%81%AE%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%8C-xps-%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E3%82%92%E3%83%AC%E3%83%B3%E3%83%80%E3%83%AA%E3%83%B3%E3%82%B0%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95%E3%81%AE%E5%A4%89%E6%9B%B4-a4ae4fa4-bc58-4c37-acdd-5eebc4e34556"&gt;https://support.microsoft.com/ja-jp/topic/kb5022083-wpf-%E3%83%99%E3%83%BC%E3%82%B9%E3%81%AE%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%8C-xps-%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E3%82%92%E3%83%AC%E3%83%B3%E3%83%80%E3%83%AA%E3%83%B3%E3%82%B0%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95%E3%81%AE%E5%A4%89%E6%9B%B4-a4ae4fa4-bc58-4c37-acdd-5eebc4e34556&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://forest.watch.impress.co.jp/docs/news/1465037.html"&gt;2022年12月「.NET」セキュリティ更新に問題、WPFアプリでXPS文書が正しく表示されない／セキュリティ強化策の影響、Microsoftが回避策を案内 - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="unsafe-c-c"&gt;Unsafe クラスの敗北 (関数ポインター) | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2022/12/unsafer-unsafe/"&gt;https://ufcpp.net/blog/2022/12/unsafer-unsafe/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-7-bindafter-input-qiita"&gt;.NET 7 の新機能 &amp;#64;bind:after で input 入力を即時処理する (そしてもう一度死ぬ) - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/jsakamoto/items/0a265288cacea70634b4"&gt;https://qiita.com/jsakamoto/items/0a265288cacea70634b4&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="app-service-authentication-easy-auth-asp.net"&gt;App Service Authentication (Easy Auth) と ASP.NET のフォーム認証を共存させつつ利用する - しばやん雑記&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.shibayan.jp/entry/20221218/1671348695"&gt;https://blog.shibayan.jp/entry/20221218/1671348695&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="c-interface"&gt;(C#) interface の静的仮想メンバーでジェネリックコンストラクタ - ネコのために鐘は鳴る&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ikorin2.hatenablog.jp/entry/2022/12/17/212228"&gt;https://ikorin2.hatenablog.jp/entry/2022/12/17/212228&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="neue-cc-2022c-incremental-source-generator"&gt;neue cc - 2022年のC# (Incremental) Source Generator開発手法&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://neue.cc/2022/12/16_IncrementalSourceGenerator.html"&gt;https://neue.cc/2022/12/16_IncrementalSourceGenerator.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="libraryimportattribute.net-7"&gt;LibraryImportAttributeが.NET 7で追加されたので触ってみました - プログラム系統備忘録ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://tan.hatenadiary.jp/entry/2022/12/16/002739"&gt;https://tan.hatenadiary.jp/entry/2022/12/16/002739&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="t4-c-c"&gt;必ず、かの邪知暴虐の T4 を除かねばならぬと決意した | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2022/12/no-more-t4/"&gt;https://ufcpp.net/blog/2022/12/no-more-t4/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="experimenting-with.net-webassembly-running.net-based-spin-application-on-wasi-node-pool-in-aks"&gt;Experimenting With .NET &amp;amp; WebAssembly - Running .NET Based Spin Application On WASI Node Pool in AKS&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.tpeczek.com/2022/12/experimenting-with-net-webassembly.html"&gt;https://www.tpeczek.com/2022/12/experimenting-with-net-webassembly.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="gitlab-code-quality-sast"&gt;GitLab でも好きな静的解析ツール (Code Quality &amp;amp; SAST) を使う&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/masakura/articles/ff74864c9af28d"&gt;https://zenn.dev/masakura/articles/ff74864c9af28d&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="blazordatafactoryel-qiita"&gt;BlazorとDataFactoryで作るお手軽ELアプリ - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/bitflyer/items/3b4ef34a9bdf5991b8f6"&gt;https://qiita.com/bitflyer/items/3b4ef34a9bdf5991b8f6&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="adding-new-files-just-got-a-lot-faster-visual-studio-blog"&gt;Adding new files just got a lot faster - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/adding-new-files-just-got-a-lot-faster/"&gt;https://devblogs.microsoft.com/visualstudio/adding-new-files-just-got-a-lot-faster/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-ibm-power-1-qiita"&gt;.NET をIBM Powerで動かしてみた話 #1 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/Nakaji1106/items/f0761c4d1dce58c0b8d5"&gt;https://qiita.com/Nakaji1106/items/f0761c4d1dce58c0b8d5&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/Nakaji1106/items/7ac09e9579a8b3f271f3"&gt;.NET をIBM Powerで動かしてみた話 #2 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/Nakaji1106/items/d6360a44b52ab360f76d"&gt;.NET をIBM Powerで動かしてみた話 #3 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="c11"&gt;C#11ではリストパターンが使えるようになった。&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/yuchiki/articles/csharp-list-pattern"&gt;https://zenn.dev/yuchiki/articles/csharp-list-pattern&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="c-inumbert-qiita"&gt;[C#] INumberTの実装総覧 (分数型の実装例付き) - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/YuHima03/items/20b59013d42d294b9839"&gt;https://qiita.com/YuHima03/items/20b59013d42d294b9839&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="build-your-own-podcast-app-with.net-7-blazor-and.net-maui.net-blog"&gt;Build Your Own Podcast App with .NET 7, Blazor, and .NET MAUI - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/build-your-own-podcast-app-with-dotnet-blazor-and-dotnet-maui/"&gt;https://devblogs.microsoft.com/dotnet/build-your-own-podcast-app-with-dotnet-blazor-and-dotnet-maui/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="nanoframeworknode-redmqtt"&gt;nanoFrameworkでNode-REDにMQTT通信してみた&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/matsuataru/articles/0237a66beb73db"&gt;https://zenn.dev/matsuataru/articles/0237a66beb73db&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="xamarin.android.net6-qiita"&gt;Xamarin.Androidを.NET6に移行する方法について。 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/secile/items/10266c6b6bd5b179dc23"&gt;https://qiita.com/secile/items/10266c6b6bd5b179dc23&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="when-pulumi-met-nuke-a.net-love-story"&gt;When Pulumi met Nuke: a .NET love story&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/techwatching/when-pulumi-met-nuke-a-net-love-story-4omd"&gt;https://dev.to/techwatching/when-pulumi-met-nuke-a-net-love-story-4omd&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="windowsc-qiita"&gt;Windowsの画面ロックをC#で検知する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/unasenohkoku/items/380e4fb4613b5abe96ea"&gt;https://qiita.com/unasenohkoku/items/380e4fb4613b5abe96ea&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-framework-nuget-nu5218-qiita"&gt;.NET Framework の NuGet パッケージに依存関係が設定されない件に対処する（NU5218警告） - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/mxProject/items/f031321ef0d229659f25"&gt;https://qiita.com/mxProject/items/f031321ef0d229659f25&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-mauiazure-ad-b2cmicrosoftaccount-qiita"&gt;.NET MAUIでAzure AD B2Cで認証する(まずはMicrosoftAccountでやってみる) - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/MAUIHighSchool/items/b8faf3aba00082b023ac"&gt;https://qiita.com/MAUIHighSchool/items/b8faf3aba00082b023ac&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/MAUIHighSchool/items/dbc288e0997003cb242e"&gt;.NET MAUIでAzure AD B2Cで認証する(Googleアカウント認証追加してみる) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asyncsync-qiita"&gt;Asyncとsync混ぜるな危険 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/superriver/items/1f1b83d2d2c6b70ba408"&gt;https://qiita.com/superriver/items/1f1b83d2d2c6b70ba408&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="string.format-qiita"&gt;String.Formatメソッドを再実装してみる - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/t0r/items/f83f6ee4ddca1bcf27eb"&gt;https://qiita.com/t0r/items/f83f6ee4ddca1bcf27eb&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="unity-2021.2-c-qiita"&gt;Unity 2021.2 から新しく使えるようになったC#のクラスを眺める - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/Gaku_Ishii/items/23d85defb8339fe3e9c0"&gt;https://qiita.com/Gaku_Ishii/items/23d85defb8339fe3e9c0&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="blazorexcel-jshandsontable-qiita"&gt;BlazorでExcel ライクなグリッドJSライブラリ「Handsontable」を使ってみる - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/yaju/items/bcca337af393f15a6795"&gt;https://qiita.com/yaju/items/bcca337af393f15a6795&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="rider-2022.3jsonc-qiita"&gt;Rider 2022.3から、JSONからC#のクラスやレコードを作る機能が追加された - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/RyotaMurohoshi/items/0c6730d0988b022378e6"&gt;https://qiita.com/RyotaMurohoshi/items/0c6730d0988b022378e6&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="rider-2022.3resharper-2022.3il-viewerilc-qiita"&gt;Rider 2022.3とReSharper 2022.3のIL Viewerで、ILをC#にデコンパイルできるようになった - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/RyotaMurohoshi/items/1f8244f0af50ad30583e"&gt;https://qiita.com/RyotaMurohoshi/items/1f8244f0af50ad30583e&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="c-how-to-write-a-source-generator-part-15-planning"&gt;C# How to Write a Source Generator Part 1/5: Planning&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://kafkawannafly.medium.com/c-how-to-write-a-source-generator-part-1-5-planning-6b4ab6ea5f63"&gt;https://kafkawannafly.medium.com/c-how-to-write-a-source-generator-part-1-5-planning-6b4ab6ea5f63&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="blazor-wasm-azure-ad"&gt;Blazor WASM でログイン後に Azure AD のセキュリティグループで認可をする&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/okazuki/articles/auth-securitygroup-blazorwasm"&gt;https://zenn.dev/okazuki/articles/auth-securitygroup-blazorwasm&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="blazor-webassembly-mark2-qiita"&gt;Blazor WebAssemblyでつくったマークシートシステム Mark2をオープンソースとして公開 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/kaorumori/items/5b7255e3244159b082d3"&gt;https://qiita.com/kaorumori/items/5b7255e3244159b082d3&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="netcode-firstgrpcgrpc-web-qiita"&gt;.NETでCode-firstなgRPC（gRPC-Web）を使う - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/michi_wkwk/items/194276f0014df74cac41"&gt;https://qiita.com/michi_wkwk/items/194276f0014df74cac41&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-7-suspicious-places-and-errors-in-the-source-code"&gt;.NET 7: suspicious places and errors in the source code&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/_sergvasiliev_/net-7-suspicious-places-and-errors-in-the-source-code-cgd"&gt;https://dev.to/_sergvasiliev_/net-7-suspicious-places-and-errors-in-the-source-code-cgd&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="cardboard-qiita"&gt;今年もクリスマスプレゼントにCardboardでゲームを作ろう。 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/secile/items/69928aa1e52152034489"&gt;https://qiita.com/secile/items/69928aa1e52152034489&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="blazor-webassembly"&gt;Blazor WebAssemblyで新規の業務システムを開発している話&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/rkatsura/articles/4b0e0b3dbb9a59"&gt;https://zenn.dev/rkatsura/articles/4b0e0b3dbb9a59&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="unityindexrange-qiita"&gt;UnityでもIndex/Rangeを使おう！ - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/Euglenach/items/c433afe78d72fc1a18fc"&gt;https://qiita.com/Euglenach/items/c433afe78d72fc1a18fc&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="csoundmaker-qiita"&gt;C#で昔のゲームのような音を生成する「SoundMaker」を公開しました - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/DTB_AutumnSky/items/8d78520567211d9a8dd2"&gt;https://qiita.com/DTB_AutumnSky/items/8d78520567211d9a8dd2&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="frognote-qiita"&gt;ノートの作成・管理・ふりかえりソフトウェア 「FrogNote」を開発しました - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/DTB_AutumnSky/items/1d691e2428ac7fa9330c"&gt;https://qiita.com/DTB_AutumnSky/items/1d691e2428ac7fa9330c&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="system.text.jsonunity-yucchiys-note"&gt;System.Text.Jsonのソース生成をUnityで試す | Yucchiy's Note&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.yucchiy.com/2022/12/csharp-advent-calendar-system-text-json-unity/"&gt;https://blog.yucchiy.com/2022/12/csharp-advent-calendar-system-text-json-unity/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="nenonaninutypedsignalr.client.typescript-typescript-source-generator-to-provide-strongly-typed-signalr-clients-by-analyzing-c-type-definitions"&gt;nenoNaninu/TypedSignalR.Client.TypeScript: TypeScript source generator to provide strongly typed SignalR clients by analyzing C# type definitions.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/nenoNaninu/TypedSignalR.Client.TypeScript"&gt;https://github.com/nenoNaninu/TypedSignalR.Client.TypeScript&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.neno.dev/entry/2022/12/21/100259"&gt;【C#】SignalR にも SwaggerUI 的なのがほしい！ - ねののお庭。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="mxprojectwindowsformgenerichost-this-is-an-extension-library-for-generic-host.runs-a-windows-forms-application-on-generic-host"&gt;mxProject/WindowsFormGenericHost: This is an extension library for Generic Host. Runs a Windows Forms application on Generic Host.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/mxProject/WindowsFormGenericHost"&gt;https://github.com/mxProject/WindowsFormGenericHost&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/mxProject/items/432f7b63b15bf270f842"&gt;汎用ホストでWindowsフォームアプリケーションを実行する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="introduction-cadl"&gt;Introduction | Cadl&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://microsoft.github.io/cadl/"&gt;https://microsoft.github.io/cadl/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/niku/scraps/130738ff4eef50"&gt;おためしcadl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/timheuer/status/1603880562204495877?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;🔐 &lt;br&gt;Now in &lt;a href="https://twitter.com/VisualStudio?ref_src=twsrc%5Etfw"&gt;&amp;#64;VisualStudio&lt;/a&gt; more text visualizers -- need to double-check that JWT token claim data, no problem... &lt;a href="https://t.co/sx1KnDtXlL"&gt;pic.twitter.com/sx1KnDtXlL&lt;/a&gt;&lt;/p&gt;&amp;mdash; Tim (&amp;#64;timheuer) &lt;a href="https://twitter.com/timheuer/status/1603880562204495877?ref_src=twsrc%5Etfw"&gt;December 16, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;!-- https://twitter.com/ufcpp/status/1605378308882935809?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="ja" dir="ltr"&gt;&lt;a href="https://t.co/varu5oDw8H"&gt;https://t.co/varu5oDw8H&lt;/a&gt;&lt;br&gt;VBでもちゃんとrequiredメンバーに対応するよ！&lt;br&gt;(毎年恒例、数か月遅れ。)&lt;/p&gt;&amp;mdash; ++C++; // 管理人: 岩永 (&amp;#64;ufcpp) &lt;a href="https://twitter.com/ufcpp/status/1605378308882935809?ref_src=twsrc%5Etfw"&gt;December 21, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2022-12-15: .NET 7 Networking Improvements, Visual Studio 2022 version 17.5 Preview 2, .NET 7.0.1, .NET 6.0.12, .NET Core 3.1.32, IronPython 3.4.0</title>
			<link>/2022/12/15/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2022/12/15/updates</guid>
			<pubDate>Thu, 15 Dec 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="net-7-networking-improvements.net-blog"&gt;.NET 7 Networking Improvements - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-7-networking-improvements/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-7-networking-improvements/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 のネットワーク関連の改善について紹介している記事。&lt;/p&gt;
&lt;p&gt;記事では次の項目について詳しく説明している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接続の施行に失敗した際のハンドリングの改善&lt;/li&gt;
&lt;li&gt;HttpHeaders の読み取りスレッドセーフティ&lt;/li&gt;
&lt;li&gt;HTTP/2 と HTTP/3 のプロトコルエラーの検出&lt;/li&gt;
&lt;li&gt;HTTP/3&lt;/li&gt;
&lt;li&gt;QUIC
&lt;ul&gt;
&lt;li&gt;.NET での QUIC&lt;/li&gt;
&lt;li&gt;API (QuicListener, QuicConnection, QuicStream)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;セキュリティ
&lt;ul&gt;
&lt;li&gt;Negotiate API (Windows 認証)&lt;/li&gt;
&lt;li&gt;証明書検証のオプション&lt;/li&gt;
&lt;li&gt;パフォーマンス&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;WebSockets
&lt;ul&gt;
&lt;li&gt;WebSockets のハンドシェイクレスポンスの詳細&lt;/li&gt;
&lt;li&gt;外部 HTTP クライアントの提供&lt;/li&gt;
&lt;li&gt;WebSockets over HTTP/2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="try-out-visual-studio-2022-version-17.5-preview-2-visual-studio-blog"&gt;Try out Visual Studio 2022 version 17.5 Preview 2 - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/try-out-visual-studio-2022-17-5-preview-2/"&gt;https://devblogs.microsoft.com/visualstudio/try-out-visual-studio-2022-17-5-preview-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 version 17.5 Preview 2 がリリースされた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;オールインワン検索の改善&lt;/li&gt;
&lt;li&gt;編集時のスティッキースクロール&lt;/li&gt;
&lt;li&gt;デバッガーテキストビジュアライザーでの  URL エンコード文字列や Base64、JWT といった文字列のデコード&lt;/li&gt;
&lt;li&gt;クイック追加&lt;/li&gt;
&lt;li&gt;再認証ワークフローの改善&lt;/li&gt;
&lt;li&gt;ASP.NET Core アプリケーションの Azure Container Apps への発行&lt;/li&gt;
&lt;li&gt;ASP.NET Core プロジェクトのアプリケーション出力の統合ターミナルへの出力&lt;/li&gt;
&lt;li&gt;さまざまな C++ の改善&lt;/li&gt;
&lt;li&gt;.config ファイルを使用したインストールレイアウトのカスタマイズ&lt;/li&gt;
&lt;li&gt;終了時に更新する機能&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="net-december-2022-updates.net-7.0.1.net-6.0.12.net-core-3.1.32.net-blog"&gt;.NET December 2022 Updates – .NET 7.0.1, .NET 6.0.12, .NET Core 3.1.32 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/december-2022-updates/"&gt;https://devblogs.microsoft.com/dotnet/december-2022-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7.0.1, .NET 6.0.12, .NET Core 3.1.32 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは一件のセキュリティー修正が含まれ、細工された XPS ファイルを開くことでコードを実行できる、リモートコード実行の脆弱性が修正されている。&lt;/p&gt;
&lt;p&gt;また、.NET Core 3.1 は2022年12月13日でサポート終了となるため、このリリースが最後のリリースとなる。&lt;/p&gt;
&lt;h3 id="net-framework-december-2022-security-and-quality-rollup-updates.net-blog"&gt;.NET Framework December 2022 Security and Quality Rollup Updates - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-framework-december-2022-security-and-quality-rollup-updates/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-framework-december-2022-security-and-quality-rollup-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework のセキュリティーと累積ロールアップ更新の2022年12月リリース。&lt;/p&gt;
&lt;p&gt;このリリースでは一件のセキュリティー修正が含まれ、細工された XPS ファイルを開くことでコードを実行できる、リモートコード実行の脆弱性が修正されている。&lt;/p&gt;
&lt;h3 id="release-ironpython-3.4.0-ironlanguagesironpython3"&gt;Release IronPython 3.4.0 · IronLanguages/ironpython3&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/IronLanguages/ironpython3/releases/tag/v3.4.0"&gt;https://github.com/IronLanguages/ironpython3/releases/tag/v3.4.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;IronPython 3.4.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは Python 3.4 の構文と標準ライブラリーをサポートする。また一部の新しいバージョンの構文などもサポートしている。&lt;/p&gt;
&lt;p&gt;ランタイムターゲットは .NET Framework 4.6.2, .NET Core 3.1, .NET 6 となっている。&lt;/p&gt;
&lt;p&gt;.NET Tools としても配布され、&lt;code&gt;dotnet tool install -g IronPython.Console&lt;/code&gt; といった形でのインストールと実行も可能となった。&lt;/p&gt;
&lt;p&gt;-&lt;a href="https://forest.watch.impress.co.jp/docs/news/1463122.html"&gt;「IronPython 3.4.0」がようやく正式版に ～.NETと統合されたPython言語のオープンソース実装／「Python 2」から「Python 3」へ移行- 窓の杜&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="polyglot-notebooks-december-2022-release.net-blog"&gt;Polyglot Notebooks - December 2022 Release - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/polyglot-notebooks-december-2022-release/"&gt;https://devblogs.microsoft.com/dotnet/polyglot-notebooks-december-2022-release/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Polyglot Notebooks (旧 .NET Interactive) の2022年12月のリリース。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.NET 7 へのアップグレード&lt;/li&gt;
&lt;li&gt;C# 11 と F# 7 のサポート&lt;/li&gt;
&lt;li&gt;新しい動的カーネルピッカーによる SQL と KQL の改善&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="release-2.2.2-mysql-netmysqlconnector"&gt;Release 2.2.2 · mysql-net/MySqlConnector&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/mysql-net/MySqlConnector/releases/tag/2.2.2"&gt;https://github.com/mysql-net/MySqlConnector/releases/tag/2.2.2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Async MySqlConnector 2.2.2 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは TLS 接続初期化時のメモリーリークや接続時の例外発生時のオブジェクト破棄の問題が修正されている。&lt;/p&gt;
&lt;h3 id="visual-studio-code-november-2022"&gt;Visual Studio Code November 2022&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://code.visualstudio.com/updates/v1_74"&gt;https://code.visualstudio.com/updates/v1_74&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio Code 1.74 (1.74.1) がリリースされた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;アクセシビリティの改善&lt;/li&gt;
&lt;li&gt;エクスプローラーの自動表示のカスタマイズ&lt;/li&gt;
&lt;li&gt;ノートブックと差分表示のオーディオキュー&lt;/li&gt;
&lt;li&gt;マージエディターでのアンドゥ/リドゥ&lt;/li&gt;
&lt;li&gt;安全ではないリポジトリの管理&lt;/li&gt;
&lt;li&gt;JavaScript &lt;code&gt;console.profile&lt;/code&gt; による収集&lt;/li&gt;
&lt;li&gt;return からの定義へ移動 (JavaScript/TypeScript)&lt;/li&gt;
&lt;li&gt;リモートトンネル&lt;/li&gt;
&lt;li&gt;Jupyter Notebook の &amp;quot;Just My Code&amp;quot; デバッグ&lt;/li&gt;
&lt;li&gt;Dev Container の GPU サポート&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;また、1.74 リリース後に様々な不具合を修正した 1.74.1 がリリースされている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://forest.watch.impress.co.jp/docs/news/1462989.html"&gt;「Visual Studio Code」でのリモート開発が手軽に ～リモートトンネル機能が提供開始／「SSH」は不要。「VS Code Server」で簡単セットアップ - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="migrating-from-asp.net-to-asp.net-core-with-project-migrations-part-5.net-blog"&gt;Migrating from ASP.NET to ASP.NET Core with Project Migrations Part 5 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/migrating-from-asp-net-to-asp-net-core-part-5/"&gt;https://devblogs.microsoft.com/dotnet/migrating-from-asp-net-to-asp-net-core-part-5/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET から ASP.NET Core への移行記事シリーズ。System.Web.Adapter 1.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;記事では移行の Visual Studio 拡張機能と System.Web.Adapter の更新について紹介している。&lt;/p&gt;
&lt;h3 id="dev-tunnels-in-visual-studio-for-asp.net-core-projects-visual-studio-blog"&gt;Dev tunnels in Visual Studio for ASP.NET Core projects - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/dev-tunnels-in-visual-studio-for-asp-net-core-projects/"&gt;https://devblogs.microsoft.com/visualstudio/dev-tunnels-in-visual-studio-for-asp-net-core-projects/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio の ASP.NET Core プロジェクトで使用できるプレビュー機能である Dev tunnels (開発トンネル) についての紹介記事。&lt;/p&gt;
&lt;p&gt;Dev tunnels は ngrok のような外部からローカル環境へアクセスできるようにポートフォワーディングを行う機能。&lt;/p&gt;
&lt;p&gt;記事では最新の更新内容と、機能の使用方法、永続トンネルと一時トンネルの違い、ツールウィンドウ、環境変数のサポートといったものを紹介している。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="typeloadexception-c-c"&gt;未使用ジェネリック型引数で TypeLoadException が起こる問題 | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2022/12/unused-generic-type-parameter/"&gt;https://ufcpp.net/blog/2022/12/unused-generic-type-parameter/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;構造体のジェネリクスとそれを含む構造体に関する、ランタイムの挙動の問題についての記事。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;struct A&amp;lt;T&amp;gt; {}&lt;/code&gt; を &lt;code&gt;struct B { A&amp;lt;B&amp;gt; Value; }&lt;/code&gt; のように定義した場合、再帰しているわけではないが防衛的に例外をスローするという話。&lt;/p&gt;
&lt;h3 id="net-lambda-native-aot-developersio"&gt;.NET Lambda の Native AOT を実際に試してみた | DevelopersIO&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.classmethod.jp/articles/net-lambda-native-aot/"&gt;https://dev.classmethod.jp/articles/net-lambda-native-aot/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AWS Lambda でサポートされた .NET アプリケーションの Native AOT を実際に試した記事。&lt;/p&gt;
&lt;p&gt;記事では動作させる手順に加え、実際の起動時間などについても計測して触れている。(Native AOT の方が遅くなっている、など)&lt;/p&gt;
&lt;h3 id="net-maui"&gt;.NET MAUI でクロスプラットフォーム対応(予定)のメモアプリ作った&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/tomori_k/articles/966f34daea405a"&gt;https://zenn.dev/tomori_k/articles/966f34daea405a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI でメモアプリケーションを実装してみたという記事。&lt;/p&gt;
&lt;h3 id="nuget-6.4-central-package-management"&gt;NuGet 6.4 の Central Package Management を使って複数プロジェクト間のバージョン管理を改善する - しばやん雑記&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.shibayan.jp/entry/20221211/1670748155"&gt;https://blog.shibayan.jp/entry/20221211/1670748155&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NuGet 6.4 の Central Package Management を使用してプロジェクトのパッケージバージョン管理を一元化することについての記事。&lt;/p&gt;
&lt;p&gt;記事ではコンバーターの存在や Dependabot での注意にも触れている。&lt;/p&gt;
&lt;h3 id="blazor-webassembly.dll-qiita"&gt;Blazor WebAssembly - どこからも参照されていないコードが削除されるようにして .dll のサイズを小さくする - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/jsakamoto/items/91c86a0f34de6e6d77b9"&gt;https://qiita.com/jsakamoto/items/91c86a0f34de6e6d77b9&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor WebAssembly でアセンブリトリミングを行なってファイルサイズを削減する方法についての記事。&lt;/p&gt;
&lt;h3 id="blazor-server-playwright-e2e-playwright-qiita"&gt;[助けを求む] Blazor Server を Playwright で E2E テストするとき、Playwright の初動が早すぎてテストが失敗する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/jsakamoto/items/3d749a9ba4f8523b5291"&gt;https://qiita.com/jsakamoto/items/3d749a9ba4f8523b5291&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor Server を Playwright でテストする際に、プリレンダーされたコンテンツにイベントハンドラーが接続されるよりも前に Playwright が読み込み完了として動いてしまう問題についての記事。&lt;/p&gt;
&lt;h3 id="whats-new-in-visual-studio-productivity-visual-studio-blog"&gt;What’s new in Visual Studio productivity - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/whats-new-in-visual-studio-productivity/"&gt;https://devblogs.microsoft.com/visualstudio/whats-new-in-visual-studio-productivity/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio の生産性向上のための新しい機能を紹介している記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;出力ウィンドウのタイムスタンプ&lt;/li&gt;
&lt;li&gt;選択範囲の一致&lt;/li&gt;
&lt;li&gt;マウスホイールで水平方向にスクロールする&lt;/li&gt;
&lt;li&gt;音を手がかりにコードを追う&lt;/li&gt;
&lt;li&gt;行番号の強調表示&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="c-c"&gt;拡張メソッドは暗黙型変換を見ない | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2022/12/extension-resolution/"&gt;https://ufcpp.net/blog/2022/12/extension-resolution/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;暗黙型変換するものに対する拡張メソッドは利用できないということについて解説している記事。&lt;/p&gt;
&lt;h3 id="new-mvc-features-in.net-7"&gt;5 new MVC features in .NET 7&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/5-new-mvc-features-in-dotnet-7/"&gt;https://andrewlock.net/5-new-mvc-features-in-dotnet-7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 の ASP.NET Core MVC の新機能7つを紹介している記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;プリミティブバインディングの &lt;code&gt;IParseable&lt;/code&gt;, &lt;code&gt;TryParse&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;MVC コントローラは自動的に &lt;code&gt;[FromServices]&lt;/code&gt; であると推測する&lt;/li&gt;
&lt;li&gt;必須かどうかの推測に nullable アノテーションを使用する&lt;/li&gt;
&lt;li&gt;MVC での &lt;code&gt;IResult&lt;/code&gt; サポート&lt;/li&gt;
&lt;li&gt;カスタマイズされたメタデータプロバイダーはレスポンスでより良いエラー名提供する&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="use-keycloak-as-identity-provider-from-blazor-webassembly-wasm-applications"&gt;Use Keycloak as Identity Provider from Blazor WebAssembly (WASM) applications&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/nikiforovall/use-keycloak-as-identity-provider-from-blazor-webassembly-wasm-applications-3an6"&gt;https://dev.to/nikiforovall/use-keycloak-as-identity-provider-from-blazor-webassembly-wasm-applications-3an6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor WebAssembly から Keycloak を IdP として使用する方法についての記事。&lt;/p&gt;
&lt;h3 id="vs2022-devtunnel-azure-qiita"&gt;VS2022 の新機能 DevTunnel (開発トンネル)でローカルデバッグ環境に Azure から簡単アクセス - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/seuharuka/items/6f77983a179042b48e59"&gt;https://qiita.com/seuharuka/items/6f77983a179042b48e59&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 のプレビュー機能である Dev tunnels の機能の紹介と使用方法の記事。&lt;/p&gt;
&lt;h3 id="c11.net-6.0.net-framework-4.8-qiita"&gt;C#11の.NET 6.0と.NET Framework 4.8に対する互換性 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/skitoy4321/items/77aff330a4ce63dd977c"&gt;https://qiita.com/skitoy4321/items/77aff330a4ce63dd977c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 でサポートされる C# 11 の機能が .NET 6 や .NET Framework 4.8 でどこまで使用できるか(サポートされるわけではない)ということをまとめている記事。&lt;/p&gt;
&lt;h3 id="maui-github-actions"&gt;MAUI アプリを GitHub Actions 上でビルドする&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/proudust/articles/2022-12-06-build-maui-on-gh-actions"&gt;https://zenn.dev/proudust/articles/2022-12-06-build-maui-on-gh-actions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI アプリケーションを GitHub Actions でビルドする対応状況と手順についての記事。&lt;/p&gt;
&lt;h3 id="blazor"&gt;動的に入力項目を増やしたり出来るフォームを Blazor で作ってみよう&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/okazuki/articles/dynamic-items-form-in-blazor"&gt;https://zenn.dev/okazuki/articles/dynamic-items-form-in-blazor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor でフォーム中の項目を動的に増減し、バリデーションも行うといったことを実現する方法についての記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/okazuki/articles/dynamic-master-details-form-on-blazor2"&gt;動的に詳細項目が増えるマスター詳細フォームを Blazor で作ってみよう&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="background-audio-streaming-with-communitytoolkit.maui.mediaelement-preview-for-android-and-ios"&gt;Background audio streaming with CommunityToolkit.Maui.MediaElement (Preview) for Android and iOS&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/mephisztoe/background-audio-streaming-with-communitytoolkitmauimediaelement-preview-for-android-and-ios-340p"&gt;https://dev.to/mephisztoe/background-audio-streaming-with-communitytoolkitmauimediaelement-preview-for-android-and-ios-340p&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CommunityToolkit.Maui.MediaElement (Preview) を使用して Android と iOS でバックグラウンドで音声をストリーミング再生する方法についての記事。&lt;/p&gt;
&lt;h3 id="msbuild-dotnet-test-qiita"&gt;【調査】MSBuild でビルドした直後に dotnet test を実行するとリビルドされる - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/lx-sasabo/items/557ff31eee36429d229e"&gt;https://qiita.com/lx-sasabo/items/557ff31eee36429d229e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MSBuild でビルドした後に dotnet test を実行すると再度ビルドが実行されることがあるケースについて調査したという記事。&lt;/p&gt;
&lt;p&gt;記事では Microsoft.NET.Build.Extensions の使用の有無によって結果が変わっていたとのこと。&lt;/p&gt;
&lt;h3 id="schedule-jobs-with-quartz.net-code-maze"&gt;Schedule Jobs with Quartz.NET - Code Maze&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://code-maze.com/schedule-jobs-with-quartz-net/"&gt;https://code-maze.com/schedule-jobs-with-quartz-net/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Quartz.NET でジョブをスケジュールして、バックグラウンドで処理をする方法について紹介している記事。&lt;/p&gt;
&lt;h3 id="introducing-wolverine-for-effective-server-side.net-development"&gt;Introducing Wolverine for Effective Server Side .NET Development&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://jeremydmiller.com/2022/12/12/introducing-wolverine-for-effective-server-side-net-development/"&gt;https://jeremydmiller.com/2022/12/12/introducing-wolverine-for-effective-server-side-net-development/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Wolverine という Mediator/Message Bus を使用してサーバー開発を行うという紹介。&lt;/p&gt;
&lt;h3 id="blazor-webassemblyasp.net-corefly.ioef-corepostgresql-qiita"&gt;Blazor WebAssembly(ASP.NET Coreホスト)を無料利用可能なFly.ioにデプロイする(EF Core+PostgreSQL使用) - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/nobu17/items/824c39493f7b12e94f7b"&gt;https://qiita.com/nobu17/items/824c39493f7b12e94f7b&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor WebAssembly を fly.io にデプロイしてサーバーサイドは EF Core で PostgreSQL に接続するといったことを行う記事。&lt;/p&gt;
&lt;h3 id="figma.net-maui-ui-qiita"&gt;Figmaで作る.NET MAUI UIコンポーネント - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/MAUIHighSchool/items/232e1bb3d65080f2c548"&gt;https://qiita.com/MAUIHighSchool/items/232e1bb3d65080f2c548&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Figma のデザインから .NET MAUI のコードを生成して UI コンポーネントを作成するサンプル記事。&lt;/p&gt;
&lt;h3 id="reduce-the-2fas-token-provider-length-in-asp.net-core-identity-to-4-digits-instead-of-6-digits-in.net-7"&gt;Reduce The 2FA'S Token Provider Length in ASP.NET Core Identity To 4 Digits Instead Of 6 Digits in .NET 7&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/mohammedahmed/reduce-the-2fas-token-provider-length-in-aspnet-core-identity-to-4-digits-instead-of-6-digits-in-net-7-6fh"&gt;https://dev.to/mohammedahmed/reduce-the-2fas-token-provider-length-in-aspnet-core-identity-to-4-digits-instead-of-6-digits-in-net-7-6fh&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core Identity の 2FA のトークンプロバイダーをカスタマイズすることで6桁から４桁に変更を試みる方法についての記事。&lt;/p&gt;
&lt;h3 id="communitytoolkit.mvvm-v8-qiita"&gt;CommunityToolkit.Mvvm V8 入門 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/kk-river/items/d974b02f6c4010433a9e"&gt;https://qiita.com/kk-river/items/d974b02f6c4010433a9e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CommunityToolkit.Mvvm 8.0.0　の紹介記事。&lt;/p&gt;
&lt;p&gt;プロパティやコマンドのコード生成、メッセンジャーなどを紹介している。&lt;/p&gt;
&lt;h3 id="new-argumentexception-and-argumentoutofrangeexception-helpers-in.net-8"&gt;New ArgumentException and ArgumentOutOfRangeException helpers in .NET 8&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://steven-giesel.com/blogPost/f4bc6fcc-5691-4f72-b9bb-75aeeb59230a"&gt;https://steven-giesel.com/blogPost/f4bc6fcc-5691-4f72-b9bb-75aeeb59230a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 8 で &lt;code&gt;ArgumentException&lt;/code&gt; と &lt;code&gt;ArgumentOutOfRangeException&lt;/code&gt; に追加を検討しているヘルパーメソッドについて紹介している記事。&lt;/p&gt;
&lt;h3 id="is-the-regression-in-gc-or-something-else"&gt;Is the regression in GC or something else?&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://maoni0.medium.com/is-the-regression-in-gc-or-something-else-38f10018dd21"&gt;https://maoni0.medium.com/is-the-regression-in-gc-or-something-else-38f10018dd21&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GC のリグレッションについての記事。&lt;/p&gt;
&lt;p&gt;ランタイムを変更した時など GC のリグレッションのように見えるがそうではないものもあること、GC を変更することでリグレッションかどうかを確認できることなどを説明している。&lt;/p&gt;
&lt;h3 id="text-classification-in-c-with-ml.net-2.0"&gt;Text Classification in C# with ML.NET 2.0&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/accessibleai/text-classification-in-c-with-ml-net-2-0-bc979dfd8ca9"&gt;https://medium.com/accessibleai/text-classification-in-c-with-ml-net-2-0-bc979dfd8ca9&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ML.NET 2.0 を使用してテキスト分類を行う方法についての記事。&lt;/p&gt;
&lt;h3 id="net-maui-stripe-c-qiita"&gt;.NET MAUI × Stripe C#クロスプラットフォームで楽々クレジット決済 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/MAUIHighSchool/items/393ba93e2eade7f8c9b9"&gt;https://qiita.com/MAUIHighSchool/items/393ba93e2eade7f8c9b9&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI で Stripe SDK を組み込んでクレジット決済をアプリケーション内に実装する方法についての記事。&lt;/p&gt;
&lt;h3 id="c-11-qiita"&gt;C# 11（コーディングで使える）新しい機能 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/sh1ch/items/0b6add41584b5ba7f698"&gt;https://qiita.com/sh1ch/items/0b6add41584b5ba7f698&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 での新しい機能をコードとともに紹介している記事。&lt;/p&gt;
&lt;h3 id="managing-multiple-versions-of-your-api-with.net-and-swagger"&gt;Managing Multiple Versions of Your API with .NET and Swagger&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;saeedeldah/managing-multiple-versions-of-your-api-with-net-and-swagger-47b4143e8bf5"&gt;https://medium.com/&amp;#64;saeedeldah/managing-multiple-versions-of-your-api-with-net-and-swagger-47b4143e8bf5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core Web API のバージョニングと API Explorer を使用した Swagger を組み合わせて使用する方法についての記事。&lt;/p&gt;
&lt;h3 id="cphpgo-qiita"&gt;C#で書いたライブラリをPHPやGoから呼び出す - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/Gaku_Ishii/items/ad4abb1e0073519877d7"&gt;https://qiita.com/Gaku_Ishii/items/ad4abb1e0073519877d7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET のコードを Native AOT でネイティブライブラリーとしてビルドし、PHP や Go から呼び出す方法を紹介している記事。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="ugainarabemi-quick-side-by-side-video-comparison-tool"&gt;ugai/narabemi: Quick side-by-side video comparison tool&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/ugai/narabemi"&gt;https://github.com/ugai/narabemi&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;映像を並べてサイドバイサイドで比較できるツール。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/ugai/items/26c7ee7b58fb26d70124"&gt;WPFで映像比較ツールを作った - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="hadashiavyaml-the-extra-fast-low-memory-footprint-yaml-library-for-c-focued-on.net-and-unity"&gt;hadashiA/VYaml: The extra fast, low memory footprint YAML library for C#, focued on .NET and Unity.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/hadashiA/VYaml"&gt;https://github.com/hadashiA/VYaml&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Standard 2.1 移行をターゲットとしたハイパフォーマンスで省メモリーな YAML ライブラリー。&lt;/p&gt;
&lt;h3 id="davidfowlsmartloadbalancer-sticky-sessions-without-sticky-sessions"&gt;davidfowl/SmartLoadBalancer: Sticky sessions without sticky sessions&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/davidfowl/SmartLoadBalancer/"&gt;https://github.com/davidfowl/SmartLoadBalancer/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SignalR のようなもののためにスティッキーセッションを持たず、スティッキーセッションを実現する実験的実装。&lt;/p&gt;
&lt;p&gt;YARP で当たりの SignalR サーバーを引くまでリクエストの転送を試行繰り返すという仕組み。&lt;/p&gt;
&lt;!-- https://twitter.com/davidfowl/status/1601616025405239296?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;OK here&amp;#39;s my latest experiment, smart load balancer (or maybe it&amp;#39;s dumb...) &lt;a href="https://t.co/LTJl4wc9mY"&gt;https://t.co/LTJl4wc9mY&lt;/a&gt;. Sticky sessions without sticky sessions for SignalR. &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/aspnetcore?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#aspnetcore&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/signalr?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#signalr&lt;/a&gt;&lt;/p&gt;&amp;mdash; hachyderm.io/&amp;#64;davidfowl (&amp;#64;davidfowl) &lt;a href="https://twitter.com/davidfowl/status/1601616025405239296?ref_src=twsrc%5Etfw"&gt;December 10, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;p&gt;Newtonsoft.Json 13.0.1 には大多数は影響を受けない小さなリグレッションがあり、それが使い物にならないものとして勘違いされ(パッチはされているけど使い物にならないから 13.0.2 にみたいな)、脆弱なバージョンとしてマークされてしまったという話。&lt;/p&gt;
&lt;!-- https://twitter.com/jamesnk/status/1600844999783903233?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Someone has retro-actively flagged Newtonsoft.Json 13.0.1 as vulnerable 😡 Their reason is that because 13.0.1 has a small regression in it, it&amp;#39;s literally unsable.&lt;br&gt;&lt;br&gt;Now, thousands of projects are to get notifications that they are vulnerable, dispite successfully using 13.0.1.&lt;/p&gt;&amp;mdash; James Newton-King ♔ (&amp;#64;JamesNK) &lt;a href="https://twitter.com/JamesNK/status/1600844999783903233?ref_src=twsrc%5Etfw"&gt;December 8, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="rms-v3.0-planning-issue-258-microsoftmicrosoft.io.recyclablememorystream"&gt;RMS v3.0 Planning · Issue #258 · microsoft/Microsoft.IO.RecyclableMemoryStream&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/microsoft/Microsoft.IO.RecyclableMemoryStream/issues/258"&gt;https://github.com/microsoft/Microsoft.IO.RecyclableMemoryStream/issues/258&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;RecyclableMemoryStream の v3.0 のプランニング Issue。&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2022-12-08: C# Advent Calendar, Rider and ReShrper 2022.3 Released</title>
			<link>/2022/12/08/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2022/12/08/updates</guid>
			<pubDate>Thu, 08 Dec 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="c-advent-calendar-2022-qiita"&gt;C#のカレンダー | Advent Calendar 2022 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/advent-calendar/2022/csharplang"&gt;https://qiita.com/advent-calendar/2022/csharplang&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2022年の C# Advent Calendar。&lt;/p&gt;
&lt;h3 id="c-advent-2022"&gt;C# Advent 2022&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://csadvent.christmas/"&gt;https://csadvent.christmas/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2022年の英語圏での C# Advent Calendar。&lt;/p&gt;
&lt;h3 id="rider-2022.3-support-for.net-7-sdk-the-latest-from-c11-major-performance-improvements-and-more-the.net-tools-blog"&gt;Rider 2022.3: Support for .NET 7 SDK, the Latest From C#11, Major Performance Improvements, and More! | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/12/07/rider-2022-3/"&gt;https://blog.jetbrains.com/dotnet/2022/12/07/rider-2022-3/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider 2022.3 がリリースされた。&lt;/p&gt;
&lt;p&gt;記事ではこのリリースに含まれる次のトピックについて紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;パフォーマンスの改善&lt;/li&gt;
&lt;li&gt;.NET 7 SDK サポート&lt;/li&gt;
&lt;li&gt;WSL2 サポート&lt;/li&gt;
&lt;li&gt;UX/UI 改善
&lt;ul&gt;
&lt;li&gt;ドッキングツールウィンドウ&lt;/li&gt;
&lt;li&gt;新しいメインツールバー&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最新の C# 機能&lt;/li&gt;
&lt;li&gt;Web 開発のアップデート&lt;/li&gt;
&lt;li&gt;ゲーム開発のアップデート&lt;/li&gt;
&lt;li&gt;NuGet サポート
&lt;ul&gt;
&lt;li&gt;Central Package Management や脆弱なバージョンの検出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ARM64 サポートの早期プレビュー
&lt;ul&gt;
&lt;li&gt;ARM プラットフォーム上の Windows と Linux での動作のサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;その他ハイライト
&lt;ul&gt;
&lt;li&gt;組み込み dotMemory の macOS と Linux サポートなど&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="resharper-2022.3-released-with-more-c-11-features-nuget-vulnerabilities-detection-and-support-for-visual-studio-arm64.the.net-tools-blog"&gt;ReSharper 2022.3 Released With More C# 11 Features, NuGet Vulnerabilities Detection, and Support for Visual Studio ARM64. | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/12/07/resharper-2022-3/"&gt;https://blog.jetbrains.com/dotnet/2022/12/07/resharper-2022-3/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper 2022.3 がリリースされた。&lt;/p&gt;
&lt;p&gt;記事ではこのリリースに含まれる次のトピックについて紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C# サポート
&lt;ul&gt;
&lt;li&gt;C# 11 の機能&lt;/li&gt;
&lt;li&gt;言語インジェクション&lt;/li&gt;
&lt;li&gt;グローバルインポート ガターマーク&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;脆弱な依存関係検出&lt;/li&gt;
&lt;li&gt;ARM64 上の Visual Studio のサポート&lt;/li&gt;
&lt;li&gt;Dynamic Program Analysis からのデータベースインスペクション&lt;/li&gt;
&lt;li&gt;C++ サポート&lt;/li&gt;
&lt;li&gt;その他
&lt;ul&gt;
&lt;li&gt;デコンパイラーの更新や型とプロジェクトの依存ダイアグラムの GraphML フォーマットでのインポート/エクスポート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="dotcover-dotmemory-dotpeek-and-dottrace-2022.3-released-the.net-tools-blog"&gt;dotCover, dotMemory, dotPeek, and dotTrace 2022.3 Released! | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/12/07/dotcover-dotmemory-dotpeek-dottrace-2022-3/"&gt;https://blog.jetbrains.com/dotnet/2022/12/07/dotcover-dotmemory-dotpeek-dottrace-2022-3/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;dotCover, dotMemory, dotPeek, dotTrace の 2022.3 がリリースされた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dotCover: ARM64 の Windows のサポートや ARM32 上の Linux でのランナーのサポートなどが追加された&lt;/li&gt;
&lt;li&gt;dotMemory: Linux と macOS の Rider 上で利用可能となり、ARM64 の Windows もサポートされた&lt;/li&gt;
&lt;li&gt;dotPeek: static abstract やジェネリック属性のような新しい機能をサポートした&lt;/li&gt;
&lt;li&gt;dotTrace: ARM64 の Windows のサポートや ARM32 上の Linux でのランナーのサポートが追加され、スナップ解析のいくつかの改善と Performance View の非推奨化&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="upgrade-of.net-agent-for-azure-pipelines-azure-devops-blog"&gt;Upgrade of .NET agent for Azure Pipelines - Azure DevOps Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/devops/upgrade-of-net-agent-for-azure-pipelines/"&gt;https://devblogs.microsoft.com/devops/upgrade-of-net-agent-for-azure-pipelines/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure Pipelines のエージェントが .NET Core 3.1 から .NET 6 へと更新するアナウンス。&lt;/p&gt;
&lt;p&gt;これは新しい OS とアーキテクチャーのサポートを行うためと、.NET Core 3.1 のサポートが12月13日に終了するためとしている。&lt;/p&gt;
&lt;p&gt;新しいエージェントは3つのフェーズで展開される。フェーズ1はプレビューとしてプレスリリース版のダウンロードしてテストが可能、フェーズ2では Microsoft がホストするエージェントプールの更新、フェーズ3でセルフホストしているエージェントの提供。&lt;/p&gt;
&lt;p&gt;記事ではセルフホストプールでの更新に関する注意や FAQ についても書かれている。&lt;/p&gt;
&lt;h3 id="release-ilspy-8.0-preview-3-icsharpcodeilspy"&gt;Release ILSpy 8.0 Preview 3 · icsharpcode/ILSpy&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/icsharpcode/ILSpy/releases/tag/v8.0-preview3"&gt;https://github.com/icsharpcode/ILSpy/releases/tag/v8.0-preview3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ILSpy 8.0 Preview 3 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは C# 11 の必須メンバーの対応や Roslyn のパターン検出の更新、その他不具合や改善が含まれている。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="c"&gt;(C#) 文字列補間されていない文字列補間を取得する - ネコのために鐘は鳴る&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ikorin2.hatenablog.jp/entry/2022/11/29/201801"&gt;https://ikorin2.hatenablog.jp/entry/2022/11/29/201801&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;InterpolatedStringHandler&lt;/code&gt; を使用したハンドラーのコンストラクターの第一引数に対する &lt;code&gt;CallerArgumentExpression&lt;/code&gt; で文字列を受けると、フォーマット前の文字列がとれるというハックを紹介している記事。&lt;/p&gt;
&lt;p&gt;ただしこの挙動は本来期待されている挙動と異なり、修正される可能性がある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/roslyn/issues/59661"&gt;Behavior changed for [CallerArgumentExpression] in constructor for [InterpolatedStringHandler] for the receiver parameter · Issue #59661 · dotnet/roslyn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="improved-startup-performance-in-rider-2022.3-the.net-tools-blog"&gt;Improved Startup Performance in Rider 2022.3 | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/12/01/improved-startup-performance-in-rider-2022-3/"&gt;https://blog.jetbrains.com/dotnet/2022/12/01/improved-startup-performance-in-rider-2022-3/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider 2022.3 (現在 EAP) の起動パフォーマンスの向上についての記事。&lt;/p&gt;
&lt;p&gt;Rider 2022.3 では IDE のコールドスタートやプロジェクト読み込み時間、ファイルとアセンブリのスキャン、ガベージコレクションとメモリー使用量といった部分での改善について紹介している。&lt;/p&gt;
&lt;h3 id="day-1-how-to-write-tests-for-httpclient-using-moq"&gt;Day 1: How to write tests for HttpClient using Moq&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/canro91/how-to-write-tests-for-httpclient-using-moq-2i9e"&gt;https://dev.to/canro91/how-to-write-tests-for-httpclient-using-moq-2i9e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;HttpClient の呼び出しに関するテストを Moq で書くという記事。&lt;/p&gt;
&lt;h3 id="conveying-context-with-asynclocal"&gt;Conveying Context with AsyncLocal&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;norm.bryar/conveying-context-with-asynclocal-91fa474a5b42"&gt;https://medium.com/&amp;#64;norm.bryar/conveying-context-with-asynclocal-91fa474a5b42&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;アンビエントコンテキスト (複数の関数やコンポーネント、タスクをまたいでデータを共有する) を&lt;code&gt;AsyncLocal&amp;lt;T&amp;gt;&lt;/code&gt; で実装するという記事。&lt;/p&gt;
&lt;h3 id="visual-basic-2022-qiita"&gt;Visual Basic 2022年の振り返り - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/yaju/items/882e1de76a763e098fce"&gt;https://qiita.com/yaju/items/882e1de76a763e098fce&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2022年の Visual Basic に関する出来事と記事を紹介している振り返り記事。&lt;/p&gt;
&lt;h3 id="c-positional-records"&gt;C# positional recordsのパラメータ個数上限を探る&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/shimat/articles/5b81d6627491ab"&gt;https://zenn.dev/shimat/articles/5b81d6627491ab&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 9 で導入されたレコード型の positional records の positional parameters の上限を調査した記事。&lt;/p&gt;
&lt;p&gt;記事では JSON シリアライザーでの上限についても触れている。&lt;/p&gt;
&lt;h3 id="net-7linq-qiita"&gt;.NET 7でLINQに追加されたメソッド - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/RyotaMurohoshi/items/71a84fe7a5cf8df57054"&gt;https://qiita.com/RyotaMurohoshi/items/71a84fe7a5cf8df57054&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 の LINQ に追加された &lt;code&gt;Order&lt;/code&gt; と &lt;code&gt;OrderDescending&lt;/code&gt; について紹介している記事。&lt;/p&gt;
&lt;h3 id="catastrophic-backtracking-how-can-a-regular-expression-cause-a-redos-vulnerability"&gt;Catastrophic backtracking: how can a regular expression cause a ReDoS vulnerability?&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/unicorn_developer/catastrophic-backtracking-how-can-a-regular-expression-cause-a-redos-vulnerability-aia"&gt;https://dev.to/unicorn_developer/catastrophic-backtracking-how-can-a-regular-expression-cause-a-redos-vulnerability-aia&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;正規表現のバックトラックによる ReDoS 脆弱性についての記事。&lt;/p&gt;
&lt;p&gt;各種正規表現パターンとその実行時間、壊滅的なバックトラッキングを回避する方法の紹介などが書かれている。&lt;/p&gt;
&lt;h3 id="c-11-qiita"&gt;C# 11 の新機能をいくつか試してみました - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/haruka_kotani/items/6f470579b86b005c6cb9"&gt;https://qiita.com/haruka_kotani/items/6f470579b86b005c6cb9&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 の新機能である生文字列リテラル、文字列補完の改行、UTF-8 文字列リテラル、必須メンバー、ファイルローカル型を簡単に紹介している記事。&lt;/p&gt;
&lt;h3 id="rider-on-windows-wsl"&gt;Rider on Windows 開発環境構築 (コンテナだけWSL)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/dynamitecoolguy/articles/17612f6624da4d"&gt;https://zenn.dev/dynamitecoolguy/articles/17612f6624da4d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows 上の Rider で WSL のコンテナーを使用した ASP.NET Core 開発環境の構築手順についての記事。&lt;/p&gt;
&lt;h3 id="net-open-source-is-heavily-under-funded-says-aws"&gt;.NET open source is 'heavily under-funded' says AWS&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.theregister.com/AMP/2022/12/01/net_open_source_heavily_underfunded/"&gt;https://www.theregister.com/AMP/2022/12/01/net_open_source_heavily_underfunded/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AWS がオープンソースな .NET への投資を行っていることについての記事。&lt;/p&gt;
&lt;h3 id="visual-studio-2022-intellicode"&gt;Visual Studio 2022 の IntelliCode の入力候補の適用キーを変えたい | ブチザッキ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.azure.moe/2022/12/03/visual-studio-2022-%E3%81%AE-intellicode-%E3%81%AE%E5%85%A5%E5%8A%9B%E5%80%99%E8%A3%9C%E3%81%AE%E9%81%A9%E7%94%A8%E3%82%AD%E3%83%BC%E3%82%92%E5%A4%89%E3%81%88%E3%81%9F%E3%81%84/"&gt;https://blog.azure.moe/2022/12/03/visual-studio-2022-%e3%81%ae-intellicode-%e3%81%ae%e5%85%a5%e5%8a%9b%e5%80%99%e8%a3%9c%e3%81%ae%e9%81%a9%e7%94%a8%e3%82%ad%e3%83%bc%e3%82%92%e5%a4%89%e3%81%88%e3%81%9f%e3%81%84/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;IntelliCode (いわゆる AI コード補完) の確定を Tab キーから変更する方法について紹介している記事。&lt;/p&gt;
&lt;p&gt;Visual Studio の設定で → (右矢印キー) での確定に変更できるとのこと (任意のキーには変更できない)。&lt;/p&gt;
&lt;h3 id="raw-string-c-c"&gt;raw string の空白文字 | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2022/12/rawstringwhitespace/"&gt;https://ufcpp.net/blog/2022/12/rawstringwhitespace/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 の raw string literal の空白文字の取り扱いについての記事。&lt;/p&gt;
&lt;p&gt;様々な空白文字やインデントでの取り扱いなどについて解説している。&lt;/p&gt;
&lt;h3 id="net-annotated-monthly-december-2022-the.net-tools-blog"&gt;.NET Annotated Monthly | December 2022 | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/12/05/net-annotated-monthly-december-2022/"&gt;https://blog.jetbrains.com/dotnet/2022/12/05/net-annotated-monthly-december-2022/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JetBrains による .NET 関連情報のまとめ2022年12月号。&lt;/p&gt;
&lt;h3 id="stackalloc-c-c"&gt;stackalloc の自然な型 | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2022/12/stackalloc-natural-type/"&gt;https://ufcpp.net/blog/2022/12/stackalloc-natural-type/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;変数の型を決定する際の推論として、stackalloc で決定される自然な型 (natural type) が記述方法によって変わることについての記事。&lt;/p&gt;
&lt;p&gt;例えば &lt;code&gt;var a = stackalloc byte[10];&lt;/code&gt; の型はポインター (&lt;code&gt;byte*&lt;/code&gt;) になるが &lt;code&gt;var a = (stackalloc byte[10]);&lt;/code&gt; は &lt;code&gt;Span&amp;lt;byte&amp;gt;&lt;/code&gt; となる、など。&lt;/p&gt;
&lt;h3 id="whats-new-in-the.net-maui-community-toolkit.net-blog"&gt;What's new in the .NET MAUI Community Toolkit - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/whats-new-in-the-dotnet-maui-community-toolkit/"&gt;https://devblogs.microsoft.com/dotnet/whats-new-in-the-dotnet-maui-community-toolkit/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI Community Toolkit の新しい機能について紹介している記事。&lt;/p&gt;
&lt;p&gt;記事では新しく追加されたコンポーネントやプラットフォームサポートについて、リリースされているバージョン(1.4.0, 2.0.0, 3.0.0)の違いなどを説明している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Expander View&lt;/li&gt;
&lt;li&gt;DockLayout&lt;/li&gt;
&lt;li&gt;StateContainer&lt;/li&gt;
&lt;li&gt;Tizen サポート&lt;/li&gt;
&lt;li&gt;.NET 7 サポート&lt;/li&gt;
&lt;li&gt;MAUI.Markup Toolkit&lt;/li&gt;
&lt;li&gt;リリースバージョン&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="building-a-new-javascript-linting-experience-in-visual-studio-visual-studio-blog"&gt;Building a new JavaScript linting experience in Visual Studio - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/building-a-new-javascript-linting-experience-in-visual-studio/"&gt;https://devblogs.microsoft.com/visualstudio/building-a-new-javascript-linting-experience-in-visual-studio/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.4 で新しくなった ESLint による lint サポートの背景を紹介している記事。&lt;/p&gt;
&lt;p&gt;記事では vscode-eslint に触発された LSP 拡張機能について、サービスの有効化の手順といったことが書かれている。&lt;/p&gt;
&lt;h3 id="custom-controls-for-winforms-out-of-process-designer.net-blog"&gt;Custom Controls for WinForm's Out-Of-Process Designer - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/custom-controls-for-winforms-out-of-process-designer/"&gt;https://devblogs.microsoft.com/dotnet/custom-controls-for-winforms-out-of-process-designer/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio で利用する .NET Core 以降の WinForms 向けの外部プロセスで動作するデザイナーでカスタムコントロールをサポートする方法について解説している記事。サンプルプロジェクトを通して移行方法を紹介している。&lt;/p&gt;
&lt;h3 id="logging-to-amazon-cloudwatch-with-serilog-in.net-getting-started-with-cloudwatch"&gt;Logging to Amazon Cloudwatch with Serilog in .NET - Getting Started with Cloudwatch&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://codewithmukesh.com/blog/amazon-cloudwatch-logging-serilog-dotnet/"&gt;https://codewithmukesh.com/blog/amazon-cloudwatch-logging-serilog-dotnet/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Serilog を使用して ASP.NET Core (&lt;code&gt;M.E.L.ILogger&lt;/code&gt;) から Amazon Cloudwatch へログを記録する方法について解説している記事。&lt;/p&gt;
&lt;h3 id="introducing-c11-newlines-in-string-interpolation-expressions"&gt;Introducing C#11: Newlines in string interpolation expressions&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://anthonygiretti.com/2022/12/04/introducing-c11-newlines-in-string-interpolation-expressions/"&gt;https://anthonygiretti.com/2022/12/04/introducing-c11-newlines-in-string-interpolation-expressions/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 では文字列補間のブレース中で改行が可能となったということについての記事。&lt;/p&gt;
&lt;h3 id="github-actions.net"&gt;GitHub Actions で .NETプロジェクトのコードカバレッジを計測する&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/shimat/articles/03ad92427cbed6"&gt;https://zenn.dev/shimat/articles/03ad92427cbed6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GitHub Actions で Pull request からビルドする際にコードカバレッジを計測し、レポートをコメントなどに残すといった方法を紹介している記事。&lt;/p&gt;
&lt;h3 id="c.net-core-3.1.net-6timezoneinfo.localutc-qiita"&gt;C#(.NET Core 3.1, .NET 6)のランタイム上のシステムタイムゾーンを置き換えたい（TimeZoneInfo.LocalがUTCを返すようにしたい） - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/fukasawah/items/c42b586745be56fed674"&gt;https://qiita.com/fukasawah/items/c42b586745be56fed674&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;システムのタイムゾーンを無視して &lt;code&gt;TimeZoneInfo.Local&lt;/code&gt; が UTC となる値を返すにはどうすればよいかという記事。&lt;/p&gt;
&lt;p&gt;記事ではリフレクションで強引に置き換えることで対処する方法や、試みた理由などが書かれている。&lt;/p&gt;
&lt;h3 id="blazor-webassembly.net-8-qiita"&gt;Blazor WebAssemblyでマルチスレッドを使っていくための準備 （.NET 8を待っています） - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/kaorumori/items/d6d68987b8468f8f6b32"&gt;https://qiita.com/kaorumori/items/d6d68987b8468f8f6b32&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 8 の Blazor WebAssembly でサポート予定のマルチスレッド機能を .NET 7 で実験的機能として WebAssembly Browser App (Blazor ではない) で動かしてみる手順を紹介している記事。&lt;/p&gt;
&lt;p&gt;記事では実際に負荷をかけた際に複数のコアが使用されていることを確認している。&lt;/p&gt;
&lt;h3 id="macwindowsios.net-maui-qiita"&gt;Macを使わずWindowsだけでiOSアプリをデバッグする方法(.NET MAUI) - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/MAUIHighSchool/items/1ffcfa508342fc250757"&gt;https://qiita.com/MAUIHighSchool/items/1ffcfa508342fc250757&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows の Visual Studio から直接 iOS アプリケーションをデプロイしてデバッグする方法についての記事。&lt;/p&gt;
&lt;h3 id="new-features-in-c-11-net-7-with-interactive-examples"&gt;New features in C# 11 (NET 7) with interactive examples&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/entech-solutions/new-features-in-c-11-net-7-with-interactive-examples-c8e4e5ea1e5a"&gt;https://medium.com/entech-solutions/new-features-in-c-11-net-7-with-interactive-examples-c8e4e5ea1e5a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 の機能を使った例とそのコードの .NET Fiddle で実行できるようにして紹介している記事。&lt;/p&gt;
&lt;h3 id="processing-data-in-parallel-using-channels"&gt;Processing data in parallel using Channels&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://maciejz.dev/processing-data-in-parallel-channels/"&gt;https://maciejz.dev/processing-data-in-parallel-channels/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;System.Threading.Channels を使用して並列でデータを処理するコードを実装する方法について紹介している記事。&lt;/p&gt;
&lt;h3 id="detect-and-remove-dead-code-with-roslyn"&gt;Detect and Remove Dead Code with Roslyn&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://jason-ge.medium.com/detect-and-remove-dead-code-with-roslyn-26e741b20d3c"&gt;https://jason-ge.medium.com/detect-and-remove-dead-code-with-roslyn-26e741b20d3c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Roslyn を使用してデッドコード(使用されていない型)の検出と削除を行う方法についての記事。&lt;/p&gt;
&lt;h3 id="how-to-use-swiftui-components-in-maui"&gt;How to use SwiftUI components in MAUI&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;tema.denisoff/how-to-use-swiftui-components-in-maui-f43c54d2173c"&gt;https://medium.com/&amp;#64;tema.denisoff/how-to-use-swiftui-components-in-maui-f43c54d2173c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI で Swift UI のコンポーネントを使用する方法についての記事。&lt;/p&gt;
&lt;p&gt;Swift UI に対する UIKit ラッパーの作成とその利用方法など。&lt;/p&gt;
&lt;h3 id="functional-maui-control-based-on-swiftui-view"&gt;Functional MAUI control based on SwiftUI view&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;tema.denisoff/functional-maui-control-based-on-swiftui-view-e23135d1f2bc"&gt;https://medium.com/&amp;#64;tema.denisoff/functional-maui-control-based-on-swiftui-view-e23135d1f2bc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI から SwiftUI のコンポーネントをプロパティーのバインディングなどを含めて機能する形で実装する方法についての記事。&lt;/p&gt;
&lt;h3 id="cnull-qiita"&gt;C#におけるnull合体演算子 ?? の優先順位と結合規則 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/denkiuo604/items/87345ce8031640b37e7a"&gt;https://qiita.com/denkiuo604/items/87345ce8031640b37e7a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# の null 合体演算子 (&lt;code&gt;??&lt;/code&gt;) の優先順位と結合規則について解説している記事。&lt;/p&gt;
&lt;h3 id="net-7c-simd"&gt;.NET 7こそがC# SIMDプログラミングを始めるのに最適である理由&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/pcysl5edgo/articles/d3e787599c5c8b"&gt;https://zenn.dev/pcysl5edgo/articles/d3e787599c5c8b&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 で C# で SIMD を活用したコードを書く際に .NET 6 の時よりも fixed が不要であったり x64 と ARM64 での分岐が不要となり、より書きやすくなっていることを紹介している記事。&lt;/p&gt;
&lt;h3 id="net-annotations-lambda-framework.net-6-api-developersio"&gt;.NET Annotations Lambda Framework を使って .NET 6 のサーバーレス API を作成する | DevelopersIO&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.classmethod.jp/articles/net-annotations-lambda-framework/"&gt;https://dev.classmethod.jp/articles/net-annotations-lambda-framework/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AWS のプレビューリリースしている .NET Annotations Lambda Framework を使用して .NET 6 でサーバーレス API (Lambda + API Gateway) を実装する方法を紹介している記事。&lt;/p&gt;
&lt;h3 id="c11-memorypack-speaker-deck"&gt;C#11 による世界最速バイナリシリアライザー「MemoryPack」の作り方 - Speaker Deck&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://speakerdeck.com/neuecc/c-number-11-niyorushi-jie-zui-su-bainarisiriaraiza-memorypack-nozuo-rifang"&gt;https://speakerdeck.com/neuecc/c-number-11-niyorushi-jie-zui-su-bainarisiriaraiza-memorypack-nozuo-rifang&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MemoryPack という高速なシリアライザーを実装する上での工夫を元に C# 11 の言語機能や Source Generator、.NET のライブラリーのモダンな活用の仕方を紹介しているスライド。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="dotnetbrowser.net-web-browser-for-wpf-and-winforms-apps"&gt;DotNetBrowser | .NET web browser for WPF and WinForms apps&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.teamdev.com/dotnetbrowser"&gt;https://www.teamdev.com/dotnetbrowser&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WPF や Windows Forms で埋め込みブラウザー(いわゆる WebView)を実現する Chromium ベースの商用コンポーネントライブラリー。&lt;/p&gt;
&lt;p&gt;CefSharp との違いとしてホストするモデル(CefSharp よりも外部プロセスで動作する)や動画サポートの有効化を簡単に行えるなどがあるとのこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.teamdev.com/embedding-browser-into-net-app-dotnetbrowser-or-cefsharp-cc94ae17f3bb"&gt;Embedding Browser into .NET App: DotNetBrowser or CefSharp?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="featbitfeatbit-a-scalable-high-performance-feature-management-and-progressive-experimentation-platform"&gt;featbit/featbit: A scalable, high-performance feature management and progressive experimentation platform&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/featbit/featbit"&gt;https://github.com/featbit/featbit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;フィーチャーフラグを管理するアプリケーションサーバー。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://featbit.medium.com/introducing-featbit-e0cef61572a"&gt;Introducing FeatBit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/cosmicflood/how-to-build-a-feature-flags-service-in-a-few-minutes-4hj0"&gt;How to build a feature flags service in a few minutes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="developer-news-visual-studio-marketplace"&gt;Developer News - Visual Studio Marketplace&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=MadsKristensen.DeveloperNews"&gt;https://marketplace.visualstudio.com/items?itemName=MadsKristensen.DeveloperNews&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 内に開発者向けのニュースを復活させるための実験的な拡張。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/get-your-developer-news/"&gt;Get your developer news - Visual Studio Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="fastendpoints"&gt;FastEndpoints&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://fast-endpoints.com/"&gt;https://fast-endpoints.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Minimal API や MVC に変わって Request-Endpoint-Response (REPR) パターンと呼ばれる実装を行うための ASP.NET 向けフレームワーク。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ilgaz.medium.com/securing-endpoints-with-jwt-bearer-authentication-in-net-6-minimal-api-using-fastendpoints-51cbb5d633b9"&gt;Securing Endpoints with JWT Bearer Authentication in .NET 6 Minimal API using FastEndpoints&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="marafdotnet-wasm-react.net-on-wasm-inside-a-react-component"&gt;maraf/dotnet-wasm-react: .NET on WASM inside a react component&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/maraf/dotnet-wasm-react"&gt;https://github.com/maraf/dotnet-wasm-react&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;React コンポーネントから .NET WebAssembly を扱うサンプルコード。&lt;/p&gt;
&lt;h3 id="vscode-pets-visual-studio-marketplace"&gt;vscode-pets - Visual Studio Marketplace&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=tonybaloney.vscode-pets"&gt;https://marketplace.visualstudio.com/items?itemName=tonybaloney.vscode-pets&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio Code 内にペットを飼うことのできる拡張。&lt;code&gt;mod&lt;/code&gt; というペットを呼び出すと dotnet-bot (紫のあれ) が出てくる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mod-dotnet-bot.net/"&gt;Mod the dotnet-bot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;p&gt;.NET Conf 2022 の動画とその内容についてのメモのマインドマップ。&lt;/p&gt;
&lt;!-- https://twitter.com/jsakamoto/status/1597555960951631872?s=12&amp;t=yjMpM4TnEEFCnbK7AUbr1A --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="ja" dir="ltr"&gt;本日の資料 (マインドマップ) はこちらの URL からご覧いただけますー。&lt;a href="https://t.co/fkxmbDWGo1"&gt;https://t.co/fkxmbDWGo1&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/tnrspr?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#tnrspr&lt;/a&gt;&lt;/p&gt;&amp;mdash; &amp;#64;jsakamoto (&amp;#64;jsakamoto) &lt;a href="https://twitter.com/jsakamoto/status/1597555960951631872?ref_src=twsrc%5Etfw"&gt;November 29, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;.NET 7 の MAUI で Xamarin.Forms の MessageCenter は非推奨となったので .NET Community Toolkit の WeekReferenceMessenger を使用が推奨という話。&lt;/p&gt;
&lt;!-- https://twitter.com/JamesMontemagno/status/1599101553813880839 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;It&amp;#39;s official, MessagingCenter has been deprecated in .NET 7 for .NET MAUI apps. Time to upgrade to the WeakReferenceMessenger in the .NET Community Toolkit! I got you covered with my recent video: &lt;a href="https://t.co/VNL2mPH8bu"&gt;https://t.co/VNL2mPH8bu&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/dotnetmaui?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnetmaui&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/dotnet7?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet7&lt;/a&gt; &lt;a href="https://t.co/DPEQTk4kXo"&gt;pic.twitter.com/DPEQTk4kXo&lt;/a&gt;&lt;/p&gt;&amp;mdash; James Montemagno (&amp;#64;JamesMontemagno) &lt;a href="https://twitter.com/JamesMontemagno/status/1599101553813880839?ref_src=twsrc%5Etfw"&gt;December 3, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;C# の言語デザインのディスカッションとワーキンググループのミーティングノートのありか。&lt;/p&gt;
&lt;!-- https://twitter.com/davidfowl/status/1600001951970000896 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;You can follow the C# language design discussions and working groups by reading the meeting notes here &lt;a href="https://t.co/ZkiH8jFLHK"&gt;https://t.co/ZkiH8jFLHK&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/csharp?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#csharp&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/oss?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#oss&lt;/a&gt;&lt;/p&gt;&amp;mdash; hachyderm.io/&amp;#64;davidfowl (&amp;#64;davidfowl) &lt;a href="https://twitter.com/davidfowl/status/1600001951970000896?ref_src=twsrc%5Etfw"&gt;December 6, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="breaking-change-webapplicationbuilder-gives-aspnet_-prefixed-environment-variables-lower-precedence-issue-498-aspnetannouncements"&gt;[Breaking change]: &lt;code&gt;WebApplicationBuilder&lt;/code&gt; gives &lt;code&gt;ASPNET_&lt;/code&gt;-prefixed environment variables lower precedence · Issue #498 · aspnet/Announcements&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/aspnet/Announcements/issues/498"&gt;https://github.com/aspnet/Announcements/issues/498&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ASPNET_&lt;/code&gt; プレフィックスの環境変数由来の構成は .NET 7 以前の ASP.NET Core でコマンドライン引数や &lt;code&gt;DOTNET_&lt;/code&gt; プレフィックスの値を上書きしていたが、.NET 7 以降では &lt;code&gt;ASPNET_&lt;/code&gt; プレフィックスでの指定はコマンドライン引数や &lt;code&gt;DOTNET_&lt;/code&gt; プレフィックスによる指定で上書きされるという破壊的変更。&lt;/p&gt;
&lt;h3 id="vs2022-search-results-on-nuget-visual-studio-feedback"&gt;VS2022 Search results on Nuget - Visual Studio Feedback&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://developercommunity.visualstudio.com/t/VS2022-Search-results-on-Nuget/10163787"&gt;https://developercommunity.visualstudio.com/t/VS2022-Search-results-on-Nuget/10163787&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 の NuGet 管理の画面で検索後に少しスクロールしていて1件目が見えないことがあるという不具合。&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2022-11-30: AppHarbor is Shutting Down, C# for Babies, Newtonsoft.Json 13.0.2, ComputeSharp 2.0</title>
			<link>/2022/11/30/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2022/11/30/updates</guid>
			<pubDate>Wed, 30 Nov 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="appharbor-is-shutting-down-appharbor"&gt;AppHarbor is Shutting Down - AppHarbor&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.appharbor.com/2022/11/09/shutting-down-appharbor"&gt;https://blog.appharbor.com/2022/11/09/shutting-down-appharbor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET アプリケーションのホスティングサービス AppHabor が12月5日にサービス終了のアナウンス。(11月9日付)&lt;/p&gt;
&lt;p&gt;期日以降は Web サイトやアプリケーション、データベースなどを含め、すべてのデータにアクセスできなくなる。&lt;/p&gt;
&lt;h3 id="c-for-babies"&gt;C# for Babies&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://lp.jetbrains.com/csharp-for-babies/"&gt;https://lp.jetbrains.com/csharp-for-babies/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JetBrains による赤ちゃんに C# を理解できるようにするための電子書籍。&lt;/p&gt;
&lt;p&gt;A から Z までの単語についてイラストと簡単な説明をつけている絵本。&lt;/p&gt;
&lt;h3 id="release-13.0.2-jamesnknewtonsoft.json"&gt;Release 13.0.2 · JamesNK/Newtonsoft.Json&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/JamesNK/Newtonsoft.Json/releases/tag/13.0.2"&gt;https://github.com/JamesNK/Newtonsoft.Json/releases/tag/13.0.2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Newtonsoft.Json (JSON.NET) 13.0.2 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは DateOnly や TimeOnly のサポートや UnixDateTimeConverter.AllowPreEpoch の追加などいくつかの新機能と不具合の修正が行われている。&lt;/p&gt;
&lt;h3 id="announcing-computesharp-2.0-run-c-on-the-gpu-with-ease-through-directx-12-and-d2d1"&gt;Announcing ComputeSharp 2.0 — run C# on the GPU with ease through DirectX 12 and D2D1!&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://sergiopedri.medium.com/announcing-computesharp-2-0-run-c-on-the-gpu-with-ease-through-directx-12-and-d2d1-be4f3f2312b4"&gt;https://sergiopedri.medium.com/announcing-computesharp-2-0-run-c-on-the-gpu-with-ease-through-directx-12-and-d2d1-be4f3f2312b4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ComputeSharp 2.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;2.0 では大きく書き直され、ランタイムコード生成の代わりとなるソースジェネレーターや多くの新しい API、D2D1 ピクセルシェーダーのサポート、UWP と WinUI 3.1 との統合のための XAML コントロールの導入といった変更が行われた。&lt;/p&gt;
&lt;p&gt;記事では ComputeSharp の紹介、動作の仕組み、XAML サポートと D2D1 ピクセルシェーダーといった部分を紹介している。&lt;/p&gt;
&lt;h3 id="net-maui-is-now-available-in-visual-studio-for-mac-17.4-visual-studio-blog"&gt;.NET MAUI is now available in Visual Studio for Mac 17.4 - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/net-maui-is-now-available-in-visual-studio-for-mac-17-4/"&gt;https://devblogs.microsoft.com/visualstudio/net-maui-is-now-available-in-visual-studio-for-mac-17-4/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio for Mac 17.4 での .NET MAUI の対応がリリースされた。&lt;/p&gt;
&lt;p&gt;Windows の Visual Studio と同様に .NET MAUI の開発に必要な機能の多くが利用可能となった。
また、XCode 14.1 への対応は近日中にリリースされ、今後は C# のホットリロードや XAML のライブプレビューといった機能の実装も予定しているとのこと。&lt;/p&gt;
&lt;h3 id="rider-2022.3-eap-9"&gt;Rider 2022.3 EAP 9&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.jetbrains.com/rider/nextversion/"&gt;https://www.jetbrains.com/rider/nextversion/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider 2022.3 EAP 9 (早期アクセスプレビュー) がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは .NET 7 SDK のサポート(プロジェクトテンプレートの更新や Central Package Management、C# 11 など)、Unreal Engine 5.1 のサポート、バックエンドの .NET 7 への移行によるパフォーマンス改善、新しいツールバー UI のデフォルト化、C# の機械学習によるコード補完といったものが含まれている。&lt;/p&gt;
&lt;!-- https://twitter.com/jetbrainsrider/status/1596198425745391621?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Rider 2022.3 EAP 9 just landed with support for .NET 7 SDK and Unreal Engine 5.1, plus a new Main Toolbar. Learn more and download it here: &lt;a href="https://t.co/QBOAmxsSLu"&gt;https://t.co/QBOAmxsSLu&lt;/a&gt; &lt;a href="https://t.co/4mHW6FUUmd"&gt;pic.twitter.com/4mHW6FUUmd&lt;/a&gt;&lt;/p&gt;&amp;mdash; JetBrains Rider (&amp;#64;JetBrainsRider) &lt;a href="https://twitter.com/JetBrainsRider/status/1596198425745391621?ref_src=twsrc%5Etfw"&gt;November 25, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="resharper-2022.3-eap-9"&gt;ReSharper 2022.3 EAP 9&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.jetbrains.com/resharper/nextversion/"&gt;https://www.jetbrains.com/resharper/nextversion/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper 2022.3 EAP 9 (早期アクセスプレビュー) がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは EAP 8 での ARM64 サポートが拡充され、dotCover, dotTrace, dotMemory そして ReSharper のコマンドラインツールが ARM64 に対応した。その他正式リリースに向けて不具合の修正が行われている。&lt;/p&gt;
&lt;!-- https://twitter.com/resharper/status/1596198977795657729?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;ReSharper 2022.3 EAP 9 has just been published! Follow the link to learn more and download: &lt;a href="https://t.co/pzUrLvdYJy"&gt;https://t.co/pzUrLvdYJy&lt;/a&gt; &lt;a href="https://t.co/M76wRl0W68"&gt;pic.twitter.com/M76wRl0W68&lt;/a&gt;&lt;/p&gt;&amp;mdash; JetBrains ReSharper (&amp;#64;resharper) &lt;a href="https://twitter.com/resharper/status/1596198977795657729?ref_src=twsrc%5Etfw"&gt;November 25, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="net-serialization-roundup-2022"&gt;.NET Serialization Roundup 2022&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://aloiskraus.wordpress.com/2022/11/23/net-serialization-roundup-2022/"&gt;https://aloiskraus.wordpress.com/2022/11/23/net-serialization-roundup-2022/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET の様々なシリアライザー(バイナリーや JSON)のシリアライズ、デシリアライズのパフォーマンス比較を行っている記事。&lt;/p&gt;
&lt;p&gt;記事ではシリアライズ/デシリアライズのパフォーマンスのほか、起動時のパフォーマンスに関しても計測、比較している。&lt;/p&gt;
&lt;h3 id="improve-your-productivity-with-web-live-preview-and-telerik-visual-studio-blog"&gt;Improve your productivity with Web Live Preview and Telerik - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/improve-your-productivity-with-web-live-preview-and-telerik/"&gt;https://devblogs.microsoft.com/visualstudio/improve-your-productivity-with-web-live-preview-and-telerik/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 での ASP.NET Web フォームを実行時プレビューを行う Web Live Preview についての紹介記事。&lt;/p&gt;
&lt;p&gt;記事では Web Live Preview の有効化と利用方法、Telerik のコンポーネントのようなサードパーティーコンポーネントとの統合の様子などを紹介している。&lt;/p&gt;
&lt;h3 id="c-list-pattern-examples-youve-been-haacked"&gt;C# List Pattern Examples | You've Been Haacked&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://haacked.com/archive/2022/11/22/csharp-list-pattern/"&gt;https://haacked.com/archive/2022/11/22/csharp-list-pattern/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 のリストパターンのコード例を紹介している記事。&lt;/p&gt;
&lt;h3 id="net-7-removes-its-insecure-xmlsecureresolver"&gt;.NET 7 Removes Its Insecure XmlSecureResolver&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.infoq.com/news/2022/11/XmlSecureResolver/"&gt;https://www.infoq.com/news/2022/11/XmlSecureResolver/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 では XmlSecureResolver が廃止されたことについての記事。&lt;/p&gt;
&lt;p&gt;XmlSecureResolver は外部リソースを参照することで発生する XXE を回避するため使用が推奨されていたが、コードアクセスセキュリティー (CAS) を元に実装されていたが .NET Core 以降は CAS を持たず制限がかからない状態となっていたため .NET 7 で廃止となった。型は残っているものの参照するとビルド時に警告が出力され、実行時には例外が発生する。&lt;/p&gt;
&lt;p&gt;外部リソースを制限するには XmlSecureResolver の代わりに XmlResolver.ThrowingResolver を使用することが推奨のアクションとなっている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/ja-jp/dotnet/core/compatibility/xml/7.0/xmlsecureresolver-obsolete"&gt;.NET 7 の破壊的変更: XmlSecureResolver は廃止されました - .NET | Microsoft Learn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asp.net-core-razor-pagesiasyncpagefilter-qiita"&gt;ASP.NET Core Razor PagesでIAsyncPageFilterを実装する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/gushwell/items/bcf39aaf708b9a483cf5"&gt;https://qiita.com/gushwell/items/bcf39aaf708b9a483cf5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core Razor Pages におけるページのフィルター処理を実装する方法についての記事。&lt;/p&gt;
&lt;h3 id="azure-adblazor-wasmasp.net-core-webapims-graph-api"&gt;Azure ADでログインしてBlazor WASM→ASP.NET Core WebAPI→MS Graph APIを呼びたい&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/okazuki/articles/auth-blazorwasm-aspnetcore-obo"&gt;https://zenn.dev/okazuki/articles/auth-blazorwasm-aspnetcore-obo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure AD にログインする Blazor WebAssembly のアプリケーションから ASP.NET Core Web API で Microsoft Graph API を呼び出す方法についての記事。&lt;/p&gt;
&lt;p&gt;クライアントから直接 Graph API を呼び出すのではなく、代わりにサーバーアプリケーションが呼び出すフロー(On-Behalf-Of フロー)の使用と構築方法。&lt;/p&gt;
&lt;h3 id="the-dangers-and-gotchas-of-using-scoped-services-in-optionsbuilder"&gt;The dangers and gotchas of using scoped services in OptionsBuilder&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/the-dangers-and-gotchas-of-using-scoped-services-when-configuring-options-with-options-builder/"&gt;https://andrewlock.net/the-dangers-and-gotchas-of-using-scoped-services-when-configuring-options-with-options-builder/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OptionsBuilder を使用した構成の構築にスコープ付きサービスを使用する場合の危険性と落とし穴についての記事。&lt;/p&gt;
&lt;h3 id="net-7-adds-aggressive-garbage-collection-for-kubernetes"&gt;.NET 7 Adds Aggressive Garbage Collection for Kubernetes&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.infoq.com/news/2022/11/GCCollectionMode-Aggressive/"&gt;https://www.infoq.com/news/2022/11/GCCollectionMode-Aggressive/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 で導入された &lt;code&gt;GCCollectionMode.Aggressive&lt;/code&gt; についての記事。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GCCollectionMode.Aggressive&lt;/code&gt; は &lt;code&gt;GC.Collect&lt;/code&gt; で GC を行う際に可能な限りメモリーを開放するというモード。これはコンテナー上のワーカーのようなアイドル時間が長く、待機中はメモリーも殆ど使用しないというケースで、完全にシャットダウンはしたくないが待機中のリソースの使用量は押さえたいというようなケースで役立つ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/runtime/issues/66037"&gt;[API Proposal]: Let the application author tell us to be idle. · Issue #66037 · dotnet/runtime&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="build-and-publish-visual-studio-extensions-with-github-actions"&gt;Build and publish Visual Studio extensions with GitHub Actions&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.elmah.io/build-and-publish-visual-studio-extensions-with-github-actions/"&gt;https://blog.elmah.io/build-and-publish-visual-studio-extensions-with-github-actions/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GitHub Actions で Visual Studio 拡張をビルドしてパブリッシュ(VSIX パッケージの生成)を行う方法についての記事。&lt;/p&gt;
&lt;h3 id="androidasp.net-core-qiita"&gt;AndroidでASP.NET Coreを動かす - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/karuakun/items/c8439d0aadb2e798cf08"&gt;https://qiita.com/karuakun/items/c8439d0aadb2e798cf08&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Android で Termux を使い、Ubuntu を動作させ .NET SDK をインストールして ASP.NET Core アプリケーションを実行するという記事。&lt;/p&gt;
&lt;h3 id="net.net-semgrep"&gt;.NET でも .NET でなくても静的セキュリティコード検査 (Semgrep 編)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/masakura/articles/b84642b5bd680f"&gt;https://zenn.dev/masakura/articles/b84642b5bd680f&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;静的セキュリティコード検査を行うオープンソースの Semgrep を使用して C# のコードを検査する使い方についての記事。&lt;/p&gt;
&lt;h3 id="magiconion-qiita"&gt;MagicOnionで大きな複合データオブジェクトを送受信する方法 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/mxProject/items/838ef3e5e2856c66a29c"&gt;https://qiita.com/mxProject/items/838ef3e5e2856c66a29c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MagicOnion でストリーミングを使用することで大きなデータを送受信する方法についての記事。&lt;/p&gt;
&lt;h3 id="confusing.net-decompilers-the-callvirt-opcode"&gt;Confusing .NET Decompilers: The CallVirt OpCode&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://washi.dev/blog/posts/confusing-decompilers-with-callvirt/"&gt;https://washi.dev/blog/posts/confusing-decompilers-with-callvirt/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;仮想関数テーブルのインデックスが同じであれば異なる型でも IL 上は CallVirt で呼び出すことができてしまい、デコンパイラーはそれをうまく取り扱えないといったことについての記事。&lt;/p&gt;
&lt;h3 id="lambda-cold-starts.net-7-native-aot-vs.net-6-managed-runtime-no-dogma-blog"&gt;Lambda Cold Starts - .NET 7 Native AOT vs .NET 6 Managed Runtime | no dogma blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://nodogmablog.bryanhogan.net/2022/11/lambda-cold-starts-net-7-native-aot-vs-net-6-managed-runtime/"&gt;https://nodogmablog.bryanhogan.net/2022/11/lambda-cold-starts-net-7-native-aot-vs-net-6-managed-runtime/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AWS Lambda でのコールドスタートの時間を .NET 7 の Native AOT と .NET 6 のランタイムで比較した記事。&lt;/p&gt;
&lt;h3 id="parsing-the-nettrace-stream-of-not-only-events"&gt;Parsing the “nettrace” stream of (not only) events&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://chnasarre.medium.com/parsing-the-nettrace-stream-of-not-only-events-8b95c7f82ec4"&gt;https://chnasarre.medium.com/parsing-the-nettrace-stream-of-not-only-events-8b95c7f82ec4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET の診断プロトコルの &amp;quot;nettrace&amp;quot; ストリームの形式とパースする方法についての記事&lt;/p&gt;
&lt;h3 id="dotnetconf2022maineventtechnical-at-main-dotnet-presentationsdotnetconf-github"&gt;dotNETConf/2022/MainEvent/Technical at main · dotnet-presentations/dotNETConf · GitHub&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet-presentations/dotNETConf/tree/main/2022/MainEvent/Technical"&gt;https://github.com/dotnet-presentations/dotNETConf/tree/main/2022/MainEvent/Technical&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Conf 2022 で使用されたスライド集。&lt;/p&gt;
&lt;h3 id="qiita"&gt;デスクトップのブラウザやプレーヤーのサウンドデータを横取りしてスペアナ風の表示をしてみた - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/osamus/items/5093cefe20e8f817bbef"&gt;https://qiita.com/osamus/items/5093cefe20e8f817bbef&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;BASS というオーディオを扱うライブラリーを使用してスペアナ風のビジュアライザーを実装した際のポイントなどをまとめている記事。&lt;/p&gt;
&lt;h3 id="cmemorypack7-1"&gt;[C#]MemoryPackを使ってみたい7 - ある程度動くサンプル1&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://spacekey.dev/memorypack-7"&gt;https://spacekey.dev/memorypack-7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MemoryPack を使用して ASP.NET Core の API サーバーと Nuxt による Web フロントエンドで通信処理を行うアプリケーションを実装してみたという記事。&lt;/p&gt;
&lt;h3 id="frozen-collections-in.net-8"&gt;Frozen collections in .NET 8&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://steven-giesel.com/blogPost/34e0fd95-0b3f-40f2-ba2a-36d1d4eb5601"&gt;https://steven-giesel.com/blogPost/34e0fd95-0b3f-40f2-ba2a-36d1d4eb5601&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 8 で導入予定の Frozen Collections についての記事。&lt;/p&gt;
&lt;p&gt;Frozen Collections と既存の &lt;code&gt;IReadOnlyList&amp;lt;T&amp;gt;&lt;/code&gt; や Immutable Collections との違い、パフォーマンスなどについて紹介している。&lt;/p&gt;
&lt;h3 id="removing-out-of-support-components-from-your-visual-studio-installations-visual-studio-blog"&gt;Removing out-of-support components from your Visual Studio installations - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/removing-out-of-support-components-from-your-visual-studio-installations/"&gt;https://devblogs.microsoft.com/visualstudio/removing-out-of-support-components-from-your-visual-studio-installations/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.4 のインストーラーからサポート対象外となったコンポーネントを削除する機能についての解説記事。&lt;/p&gt;
&lt;p&gt;新しいインストーラーではサポート対象外となったコンポーネントを一括で削除できるようになり、記事ではその操作方法などを紹介している。&lt;/p&gt;
&lt;p&gt;この削除機能はインストーラーが新しくなっていれば Visual Studio 2022 のすべてのバージョンに対して実行可能となり、Visual Studio 2019 や 2017 の環境であっても 2022 インストーラーをインストールすることで対応が可能とのこと。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="michalstrehovskypublishaotcompressed"&gt;MichalStrehovsky/PublishAotCompressed&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/MichalStrehovsky/PublishAotCompressed"&gt;https://github.com/MichalStrehovsky/PublishAotCompressed&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Native AOT でパブリッシュする際に UPX で実行ファイルを圧縮するという MSBuild の拡張パッケージ。&lt;/p&gt;
&lt;!-- https://twitter.com/MStrehovsky/status/1595941448326602752 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Build fully self-contained .NET 7 command line apps starting at ~800 kB with PublishAot and PublishAotCompressed! The new version of PublishAotCompressed bumps the UPX compressor to version 4.0.1 that shipped a couple days ago. Grab it from NuGet: &lt;a href="https://t.co/q4UBeXqq45"&gt;https://t.co/q4UBeXqq45&lt;/a&gt;&lt;/p&gt;&amp;mdash; Michal Strehovský (&amp;#64;MStrehovsky) &lt;a href="https://twitter.com/MStrehovsky/status/1595941448326602752?ref_src=twsrc%5Etfw"&gt;November 25, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="dhq-boilerboilerse2e-support-your-e2e-testing"&gt;dhq-boiler/boilersE2E: Support your E2E testing&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dhq-boiler/boilersE2E"&gt;https://github.com/dhq-boiler/boilersE2E&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows デスクトップアプリケーションの E2E テストを行う際のヘルパーとなるライブラリー。Windows Application Driver の起動と終了、タイムアウト付き要素検索など。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/dhq_boiler/items/0a8e1352abd161be9a3c"&gt;【C#】.NET デスクトップアプリ向けE2Eテスト用ライブラリを実装しました - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="kalk"&gt;kalk&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://kalk.dev/"&gt;https://kalk.dev/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;様々な計算や変換、Hardware Intrinsics の実行などが行える開発者向けコマンドライン計算機。&lt;/p&gt;
&lt;h3 id="forneveravaloniarider-jetbrains-rider-plugin-for-avalonia-development"&gt;ForNeVeR/AvaloniaRider: JetBrains Rider plugin for Avalonia development&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/ForNeVeR/AvaloniaRider/"&gt;https://github.com/ForNeVeR/AvaloniaRider/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider で Avalonia を開発サポートするためのプラグイン。プレビューやテンプレートなどが提供される。&lt;/p&gt;
&lt;!-- https://twitter.com/fvnever/status/1596592659581345793?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Took me a while (as everything do), but finally I&amp;#39;ve released the first stable release of AvaloniaRider, &lt;a href="https://twitter.com/hashtag/Avalonia?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#Avalonia&lt;/a&gt; previewer plugin for &lt;a href="https://twitter.com/JetBrainsRider?ref_src=twsrc%5Etfw"&gt;&amp;#64;JetBrainsRider&lt;/a&gt; (only EAP builds for now).&lt;br&gt;&lt;br&gt;Fully cross-platform, since it is based on &lt;a href="https://twitter.com/hashtag/Avalonia?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#Avalonia&lt;/a&gt; awesomeness.&lt;a href="https://t.co/zQzNuchGoF"&gt;https://t.co/zQzNuchGoF&lt;/a&gt;&lt;/p&gt;&amp;mdash; Dr. Friedrich von Never (&amp;#64;fvnever) &lt;a href="https://twitter.com/fvnever/status/1596592659581345793?ref_src=twsrc%5Etfw"&gt;November 26, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="lowleveldesignwindbg-ext-template-a-template-for-creating-managed-windbg-extensions"&gt;lowleveldesign/windbg-ext-template: A template for creating managed WinDbg extensions&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/lowleveldesign/windbg-ext-template"&gt;https://github.com/lowleveldesign/windbg-ext-template&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WinDbg で .NET をホストしてマネージドコードで拡張関数を実装するためのテンプレート。&lt;/p&gt;
&lt;!-- https://twitter.com/lowleveldesign/status/1596164757353922560?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;I&amp;#39;m happy to share a sample managed WinDbg extension based on the .NET hosting API and DbgX NuGet package. Thanks to the signatures in DbgX, we may now access all the DbgEng interfaces in dotnet!  🤯 &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/windbg?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#windbg&lt;/a&gt; &lt;a href="https://t.co/ndxyEgPzDv"&gt;https://t.co/ndxyEgPzDv&lt;/a&gt;&lt;/p&gt;&amp;mdash; Sebastian Solnica (&amp;#64;lowleveldesign) &lt;a href="https://twitter.com/lowleveldesign/status/1596164757353922560?ref_src=twsrc%5Etfw"&gt;November 25, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="home-endoflife.date"&gt;Home | endoflife.date&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://endoflife.date/"&gt;https://endoflife.date/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;様々なフレームワークやプロダクトの End-of-Life の日付をまとめているサイト。&lt;/p&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/dotnetfdn/status/1595427955076784133?s=12&amp;t=EDTXeykhwoV--mTr9sPPxw --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;ICYMI - Firmware images of .NET &lt;a href="https://twitter.com/nanoFramework?ref_src=twsrc%5Etfw"&gt;&amp;#64;nanoframework&lt;/a&gt; &lt;a href="https://twitter.com/EspressifSystem?ref_src=twsrc%5Etfw"&gt;&amp;#64;EspressifSystem&lt;/a&gt; ESP32-C3 series have just been released! 🥳🚀&lt;br&gt;.NET now runs on &lt;a href="https://twitter.com/risc_v?ref_src=twsrc%5Etfw"&gt;&amp;#64;risc_v&lt;/a&gt; processors too!&lt;br&gt;How cool is this?!?! 💜🤩 &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://t.co/9UmMpKPkMJ"&gt;pic.twitter.com/9UmMpKPkMJ&lt;/a&gt;&lt;/p&gt;&amp;mdash; .NET Foundation (&amp;#64;dotnetfdn) &lt;a href="https://twitter.com/dotnetfdn/status/1595427955076784133?ref_src=twsrc%5Etfw"&gt;November 23, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;ESP32-C3 向けの .NET nanoFramework ファームウェアイメージがリリースされ、RISC-V で .NET が動くという話。&lt;/p&gt;
&lt;h3 id="alexandre-mutel-one-of-the-super-cool-feature-of-nativeaot-with-mastodon"&gt;Alexandre Mutel: &amp;quot;One of the super cool feature of NativeAOT with .…&amp;quot; - Mastodon&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://mastodon.social/&amp;#64;xoofx/109423020409800983"&gt;https://mastodon.social/&amp;#64;xoofx/109423020409800983&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One of the super cool feature of NativeAOT with .NET 7 is &amp;quot;Direct PInvoke calls&amp;quot; or the ability to link against a static library &lt;a href="https://github.com/dotnet/runtime/blob/main/src/coreclr/nativeaot/docs/interop.md"&gt;https://github.com/dotnet/runtime/blob/main/src/coreclr/nativeaot/docs/interop.md&lt;/a&gt; and call functions directly.
There is no built-in support to distribute such things with NuGet  (e.g like runtime folder) but it's easy to ship a package that would provide dynamic libraries but could also provide support for statically linked libraries and inject it automatically via a MSBuild target. I love this feature! 😎&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;.NET 7 の NativeAOT では直接 P/Invoke 呼び出しと静的ライブラリリンクがサポートされているという話。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/runtime/blob/main/src/coreclr/nativeaot/docs/interop.md"&gt;runtime/interop.md at main · dotnet/runtime · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
	</channel>
</rss>