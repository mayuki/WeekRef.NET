<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
	<channel>
		<title>WeekRef.NET</title>
		<link>/</link>
		<description>.NET 関連の情報をほぼ週刊配信</description>
		<copyright>Copyright © Mayuki Sawatari &lt;mayuki@misuzilla.org&gt;</copyright>
		<managingEditor>Mayuki Sawatari</managingEditor>
		<pubDate>Wed, 30 Nov 2022 10:15:21 GMT</pubDate>
		<lastBuildDate>Wed, 30 Nov 2022 10:15:21 GMT</lastBuildDate>
		<item>
			<title>2022-11-30: AppHarbor is Shutting Down, C# for Babies, Newtonsoft.Json 13.0.2, ComputeSharp 2.0</title>
			<link>/2022/11/30/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2022/11/30/updates</guid>
			<pubDate>Wed, 30 Nov 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="appharbor-is-shutting-down-appharbor"&gt;AppHarbor is Shutting Down - AppHarbor&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.appharbor.com/2022/11/09/shutting-down-appharbor"&gt;https://blog.appharbor.com/2022/11/09/shutting-down-appharbor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET アプリケーションのホスティングサービス AppHabor が12月5日にサービス終了のアナウンス。(11月9日付)&lt;/p&gt;
&lt;p&gt;期日以降は Web サイトやアプリケーション、データベースなどを含め、すべてのデータにアクセスできなくなる。&lt;/p&gt;
&lt;h3 id="c-for-babies"&gt;C# for Babies&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://lp.jetbrains.com/csharp-for-babies/"&gt;https://lp.jetbrains.com/csharp-for-babies/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JetBrains による赤ちゃんに C# を理解できるようにするための電子書籍。&lt;/p&gt;
&lt;p&gt;A から Z までの単語についてイラストと簡単な説明をつけている絵本。&lt;/p&gt;
&lt;h3 id="release-13.0.2-jamesnknewtonsoft.json"&gt;Release 13.0.2 · JamesNK/Newtonsoft.Json&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/JamesNK/Newtonsoft.Json/releases/tag/13.0.2"&gt;https://github.com/JamesNK/Newtonsoft.Json/releases/tag/13.0.2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Newtonsoft.Json (JSON.NET) 13.0.2 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは DateOnly や TimeOnly のサポートや UnixDateTimeConverter.AllowPreEpoch の追加などいくつかの新機能と不具合の修正が行われている。&lt;/p&gt;
&lt;h3 id="announcing-computesharp-2.0-run-c-on-the-gpu-with-ease-through-directx-12-and-d2d1"&gt;Announcing ComputeSharp 2.0 — run C# on the GPU with ease through DirectX 12 and D2D1!&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://sergiopedri.medium.com/announcing-computesharp-2-0-run-c-on-the-gpu-with-ease-through-directx-12-and-d2d1-be4f3f2312b4"&gt;https://sergiopedri.medium.com/announcing-computesharp-2-0-run-c-on-the-gpu-with-ease-through-directx-12-and-d2d1-be4f3f2312b4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ComputeSharp 2.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;2.0 では大きく書き直され、ランタイムコード生成の代わりとなるソースジェネレーターや多くの新しい API、D2D1 ピクセルシェーダーのサポート、UWP と WinUI 3.1 との統合のための XAML コントロールの導入といった変更が行われた。&lt;/p&gt;
&lt;p&gt;記事では ComputeSharp の紹介、動作の仕組み、XAML サポートと D2D1 ピクセルシェーダーといった部分を紹介している。&lt;/p&gt;
&lt;h3 id="net-maui-is-now-available-in-visual-studio-for-mac-17.4-visual-studio-blog"&gt;.NET MAUI is now available in Visual Studio for Mac 17.4 - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/net-maui-is-now-available-in-visual-studio-for-mac-17-4/"&gt;https://devblogs.microsoft.com/visualstudio/net-maui-is-now-available-in-visual-studio-for-mac-17-4/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio for Mac 17.4 での .NET MAUI の対応がリリースされた。&lt;/p&gt;
&lt;p&gt;Windows の Visual Studio と同様に .NET MAUI の開発に必要な機能の多くが利用可能となった。
また、XCode 14.1 への対応は近日中にリリースされ、今後は C# のホットリロードや XAML のライブプレビューといった機能の実装も予定しているとのこと。&lt;/p&gt;
&lt;h3 id="rider-2022.3-eap-9"&gt;Rider 2022.3 EAP 9&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.jetbrains.com/rider/nextversion/"&gt;https://www.jetbrains.com/rider/nextversion/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider 2022.3 EAP 9 (早期アクセスプレビュー) がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは .NET 7 SDK のサポート(プロジェクトテンプレートの更新や Central Package Management、C# 11 など)、Unreal Engine 5.1 のサポート、バックエンドの .NET 7 への移行によるパフォーマンス改善、新しいツールバー UI のデフォルト化、C# の機械学習によるコード補完といったものが含まれている。&lt;/p&gt;
&lt;!-- https://twitter.com/jetbrainsrider/status/1596198425745391621?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Rider 2022.3 EAP 9 just landed with support for .NET 7 SDK and Unreal Engine 5.1, plus a new Main Toolbar. Learn more and download it here: &lt;a href="https://t.co/QBOAmxsSLu"&gt;https://t.co/QBOAmxsSLu&lt;/a&gt; &lt;a href="https://t.co/4mHW6FUUmd"&gt;pic.twitter.com/4mHW6FUUmd&lt;/a&gt;&lt;/p&gt;&amp;mdash; JetBrains Rider (&amp;#64;JetBrainsRider) &lt;a href="https://twitter.com/JetBrainsRider/status/1596198425745391621?ref_src=twsrc%5Etfw"&gt;November 25, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="resharper-2022.3-eap-9"&gt;ReSharper 2022.3 EAP 9&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.jetbrains.com/resharper/nextversion/"&gt;https://www.jetbrains.com/resharper/nextversion/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper 2022.3 EAP 9 (早期アクセスプレビュー) がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは EAP 8 での ARM64 サポートが拡充され、dotCover, dotTrace, dotMemory そして ReSharper のコマンドラインツールが ARM64 に対応した。その他正式リリースに向けて不具合の修正が行われている。&lt;/p&gt;
&lt;!-- https://twitter.com/resharper/status/1596198977795657729?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;ReSharper 2022.3 EAP 9 has just been published! Follow the link to learn more and download: &lt;a href="https://t.co/pzUrLvdYJy"&gt;https://t.co/pzUrLvdYJy&lt;/a&gt; &lt;a href="https://t.co/M76wRl0W68"&gt;pic.twitter.com/M76wRl0W68&lt;/a&gt;&lt;/p&gt;&amp;mdash; JetBrains ReSharper (&amp;#64;resharper) &lt;a href="https://twitter.com/resharper/status/1596198977795657729?ref_src=twsrc%5Etfw"&gt;November 25, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="net-serialization-roundup-2022"&gt;.NET Serialization Roundup 2022&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://aloiskraus.wordpress.com/2022/11/23/net-serialization-roundup-2022/"&gt;https://aloiskraus.wordpress.com/2022/11/23/net-serialization-roundup-2022/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET の様々なシリアライザー(バイナリーや JSON)のシリアライズ、デシリアライズのパフォーマンス比較を行っている記事。&lt;/p&gt;
&lt;p&gt;記事ではシリアライズ/デシリアライズのパフォーマンスのほか、起動時のパフォーマンスに関しても計測、比較している。&lt;/p&gt;
&lt;h3 id="improve-your-productivity-with-web-live-preview-and-telerik-visual-studio-blog"&gt;Improve your productivity with Web Live Preview and Telerik - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/improve-your-productivity-with-web-live-preview-and-telerik/"&gt;https://devblogs.microsoft.com/visualstudio/improve-your-productivity-with-web-live-preview-and-telerik/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 での ASP.NET Web フォームを実行時プレビューを行う Web Live Preview についての紹介記事。&lt;/p&gt;
&lt;p&gt;記事では Web Live Preview の有効化と利用方法、Telerik のコンポーネントのようなサードパーティーコンポーネントとの統合の様子などを紹介している。&lt;/p&gt;
&lt;h3 id="c-list-pattern-examples-youve-been-haacked"&gt;C# List Pattern Examples | You've Been Haacked&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://haacked.com/archive/2022/11/22/csharp-list-pattern/"&gt;https://haacked.com/archive/2022/11/22/csharp-list-pattern/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 のリストパターンのコード例を紹介している記事。&lt;/p&gt;
&lt;h3 id="net-7-removes-its-insecure-xmlsecureresolver"&gt;.NET 7 Removes Its Insecure XmlSecureResolver&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.infoq.com/news/2022/11/XmlSecureResolver/"&gt;https://www.infoq.com/news/2022/11/XmlSecureResolver/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 では XmlSecureResolver が廃止されたことについての記事。&lt;/p&gt;
&lt;p&gt;XmlSecureResolver は外部リソースを参照することで発生する XXE を回避するため使用が推奨されていたが、コードアクセスセキュリティー (CAS) を元に実装されていたが .NET Core 以降は CAS を持たず制限がかからない状態となっていたため .NET 7 で廃止となった。型は残っているものの参照するとビルド時に警告が出力され、実行時には例外が発生する。&lt;/p&gt;
&lt;p&gt;外部リソースを制限するには XmlSecureResolver の代わりに XmlResolver.ThrowingResolver を使用することが推奨のアクションとなっている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/ja-jp/dotnet/core/compatibility/xml/7.0/xmlsecureresolver-obsolete"&gt;.NET 7 の破壊的変更: XmlSecureResolver は廃止されました - .NET | Microsoft Learn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asp.net-core-razor-pagesiasyncpagefilter-qiita"&gt;ASP.NET Core Razor PagesでIAsyncPageFilterを実装する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/gushwell/items/bcf39aaf708b9a483cf5"&gt;https://qiita.com/gushwell/items/bcf39aaf708b9a483cf5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core Razor Pages におけるページのフィルター処理を実装する方法についての記事。&lt;/p&gt;
&lt;h3 id="azure-adblazor-wasmasp.net-core-webapims-graph-api"&gt;Azure ADでログインしてBlazor WASM→ASP.NET Core WebAPI→MS Graph APIを呼びたい&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/okazuki/articles/auth-blazorwasm-aspnetcore-obo"&gt;https://zenn.dev/okazuki/articles/auth-blazorwasm-aspnetcore-obo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure AD にログインする Blazor WebAssembly のアプリケーションから ASP.NET Core Web API で Microsoft Graph API を呼び出す方法についての記事。&lt;/p&gt;
&lt;p&gt;クライアントから直接 Graph API を呼び出すのではなく、代わりにサーバーアプリケーションが呼び出すフロー(On-Behalf-Of フロー)の使用と構築方法。&lt;/p&gt;
&lt;h3 id="the-dangers-and-gotchas-of-using-scoped-services-in-optionsbuilder"&gt;The dangers and gotchas of using scoped services in OptionsBuilder&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/the-dangers-and-gotchas-of-using-scoped-services-when-configuring-options-with-options-builder/"&gt;https://andrewlock.net/the-dangers-and-gotchas-of-using-scoped-services-when-configuring-options-with-options-builder/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OptionsBuilder を使用した構成の構築にスコープ付きサービスを使用する場合の危険性と落とし穴についての記事。&lt;/p&gt;
&lt;h3 id="net-7-adds-aggressive-garbage-collection-for-kubernetes"&gt;.NET 7 Adds Aggressive Garbage Collection for Kubernetes&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.infoq.com/news/2022/11/GCCollectionMode-Aggressive/"&gt;https://www.infoq.com/news/2022/11/GCCollectionMode-Aggressive/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 で導入された &lt;code&gt;GCCollectionMode.Aggressive&lt;/code&gt; についての記事。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GCCollectionMode.Aggressive&lt;/code&gt; は &lt;code&gt;GC.Collect&lt;/code&gt; で GC を行う際に可能な限りメモリーを開放するというモード。これはコンテナー上のワーカーのようなアイドル時間が長く、待機中はメモリーも殆ど使用しないというケースで、完全にシャットダウンはしたくないが待機中のリソースの使用量は押さえたいというようなケースで役立つ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/runtime/issues/66037"&gt;[API Proposal]: Let the application author tell us to be idle. · Issue #66037 · dotnet/runtime&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="build-and-publish-visual-studio-extensions-with-github-actions"&gt;Build and publish Visual Studio extensions with GitHub Actions&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.elmah.io/build-and-publish-visual-studio-extensions-with-github-actions/"&gt;https://blog.elmah.io/build-and-publish-visual-studio-extensions-with-github-actions/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GitHub Actions で Visual Studio 拡張をビルドしてパブリッシュ(VSIX パッケージの生成)を行う方法についての記事。&lt;/p&gt;
&lt;h3 id="androidasp.net-core-qiita"&gt;AndroidでASP.NET Coreを動かす - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/karuakun/items/c8439d0aadb2e798cf08"&gt;https://qiita.com/karuakun/items/c8439d0aadb2e798cf08&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Android で Termux を使い、Ubuntu を動作させ .NET SDK をインストールして ASP.NET Core アプリケーションを実行するという記事。&lt;/p&gt;
&lt;h3 id="net.net-semgrep"&gt;.NET でも .NET でなくても静的セキュリティコード検査 (Semgrep 編)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/masakura/articles/b84642b5bd680f"&gt;https://zenn.dev/masakura/articles/b84642b5bd680f&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;静的セキュリティコード検査を行うオープンソースの Semgrep を使用して C# のコードを検査する使い方についての記事。&lt;/p&gt;
&lt;h3 id="magiconion-qiita"&gt;MagicOnionで大きな複合データオブジェクトを送受信する方法 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/mxProject/items/838ef3e5e2856c66a29c"&gt;https://qiita.com/mxProject/items/838ef3e5e2856c66a29c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MagicOnion でストリーミングを使用することで大きなデータを送受信する方法についての記事。&lt;/p&gt;
&lt;h3 id="confusing.net-decompilers-the-callvirt-opcode"&gt;Confusing .NET Decompilers: The CallVirt OpCode&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://washi.dev/blog/posts/confusing-decompilers-with-callvirt/"&gt;https://washi.dev/blog/posts/confusing-decompilers-with-callvirt/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;仮想関数テーブルのインデックスが同じであれば異なる型でも IL 上は CallVirt で呼び出すことができてしまい、デコンパイラーはそれをうまく取り扱えないといったことについての記事。&lt;/p&gt;
&lt;h3 id="lambda-cold-starts.net-7-native-aot-vs.net-6-managed-runtime-no-dogma-blog"&gt;Lambda Cold Starts - .NET 7 Native AOT vs .NET 6 Managed Runtime | no dogma blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://nodogmablog.bryanhogan.net/2022/11/lambda-cold-starts-net-7-native-aot-vs-net-6-managed-runtime/"&gt;https://nodogmablog.bryanhogan.net/2022/11/lambda-cold-starts-net-7-native-aot-vs-net-6-managed-runtime/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AWS Lambda でのコールドスタートの時間を .NET 7 の Native AOT と .NET 6 のランタイムで比較した記事。&lt;/p&gt;
&lt;h3 id="parsing-the-nettrace-stream-of-not-only-events"&gt;Parsing the “nettrace” stream of (not only) events&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://chnasarre.medium.com/parsing-the-nettrace-stream-of-not-only-events-8b95c7f82ec4"&gt;https://chnasarre.medium.com/parsing-the-nettrace-stream-of-not-only-events-8b95c7f82ec4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET の診断プロトコルの &amp;quot;nettrace&amp;quot; ストリームの形式とパースする方法についての記事&lt;/p&gt;
&lt;h3 id="dotnetconf2022maineventtechnical-at-main-dotnet-presentationsdotnetconf-github"&gt;dotNETConf/2022/MainEvent/Technical at main · dotnet-presentations/dotNETConf · GitHub&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet-presentations/dotNETConf/tree/main/2022/MainEvent/Technical"&gt;https://github.com/dotnet-presentations/dotNETConf/tree/main/2022/MainEvent/Technical&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Conf 2022 で使用されたスライド集。&lt;/p&gt;
&lt;h3 id="qiita"&gt;デスクトップのブラウザやプレーヤーのサウンドデータを横取りしてスペアナ風の表示をしてみた - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/osamus/items/5093cefe20e8f817bbef"&gt;https://qiita.com/osamus/items/5093cefe20e8f817bbef&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;BASS というオーディオを扱うライブラリーを使用してスペアナ風のビジュアライザーを実装した際のポイントなどをまとめている記事。&lt;/p&gt;
&lt;h3 id="cmemorypack7-1"&gt;[C#]MemoryPackを使ってみたい7 - ある程度動くサンプル1&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://spacekey.dev/memorypack-7"&gt;https://spacekey.dev/memorypack-7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MemoryPack を使用して ASP.NET Core の API サーバーと Nuxt による Web フロントエンドで通信処理を行うアプリケーションを実装してみたという記事。&lt;/p&gt;
&lt;h3 id="frozen-collections-in.net-8"&gt;Frozen collections in .NET 8&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://steven-giesel.com/blogPost/34e0fd95-0b3f-40f2-ba2a-36d1d4eb5601"&gt;https://steven-giesel.com/blogPost/34e0fd95-0b3f-40f2-ba2a-36d1d4eb5601&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 8 で導入予定の Frozen Collections についての記事。&lt;/p&gt;
&lt;p&gt;Frozen Collections と既存の &lt;code&gt;IReadOnlyList&amp;lt;T&amp;gt;&lt;/code&gt; や Immutable Collections との違い、パフォーマンスなどについて紹介している。&lt;/p&gt;
&lt;h3 id="removing-out-of-support-components-from-your-visual-studio-installations-visual-studio-blog"&gt;Removing out-of-support components from your Visual Studio installations - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/removing-out-of-support-components-from-your-visual-studio-installations/"&gt;https://devblogs.microsoft.com/visualstudio/removing-out-of-support-components-from-your-visual-studio-installations/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.4 のインストーラーからサポート対象外となったコンポーネントを削除する機能についての解説記事。&lt;/p&gt;
&lt;p&gt;新しいインストーラーではサポート対象外となったコンポーネントを一括で削除できるようになり、記事ではその操作方法などを紹介している。&lt;/p&gt;
&lt;p&gt;この削除機能はインストーラーが新しくなっていれば Visual Studio 2022 のすべてのバージョンに対して実行可能となり、Visual Studio 2019 や 2017 の環境であっても 2022 インストーラーをインストールすることで対応が可能とのこと。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="michalstrehovskypublishaotcompressed"&gt;MichalStrehovsky/PublishAotCompressed&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/MichalStrehovsky/PublishAotCompressed"&gt;https://github.com/MichalStrehovsky/PublishAotCompressed&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Native AOT でパブリッシュする際に UPX で実行ファイルを圧縮するという MSBuild の拡張パッケージ。&lt;/p&gt;
&lt;!-- https://twitter.com/MStrehovsky/status/1595941448326602752 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Build fully self-contained .NET 7 command line apps starting at ~800 kB with PublishAot and PublishAotCompressed! The new version of PublishAotCompressed bumps the UPX compressor to version 4.0.1 that shipped a couple days ago. Grab it from NuGet: &lt;a href="https://t.co/q4UBeXqq45"&gt;https://t.co/q4UBeXqq45&lt;/a&gt;&lt;/p&gt;&amp;mdash; Michal Strehovský (&amp;#64;MStrehovsky) &lt;a href="https://twitter.com/MStrehovsky/status/1595941448326602752?ref_src=twsrc%5Etfw"&gt;November 25, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="dhq-boilerboilerse2e-support-your-e2e-testing"&gt;dhq-boiler/boilersE2E: Support your E2E testing&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dhq-boiler/boilersE2E"&gt;https://github.com/dhq-boiler/boilersE2E&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows デスクトップアプリケーションの E2E テストを行う際のヘルパーとなるライブラリー。Windows Application Driver の起動と終了、タイムアウト付き要素検索など。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/dhq_boiler/items/0a8e1352abd161be9a3c"&gt;【C#】.NET デスクトップアプリ向けE2Eテスト用ライブラリを実装しました - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="kalk"&gt;kalk&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://kalk.dev/"&gt;https://kalk.dev/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;様々な計算や変換、Hardware Intrinsics の実行などが行える開発者向けコマンドライン計算機。&lt;/p&gt;
&lt;h3 id="forneveravaloniarider-jetbrains-rider-plugin-for-avalonia-development"&gt;ForNeVeR/AvaloniaRider: JetBrains Rider plugin for Avalonia development&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/ForNeVeR/AvaloniaRider/"&gt;https://github.com/ForNeVeR/AvaloniaRider/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider で Avalonia を開発サポートするためのプラグイン。プレビューやテンプレートなどが提供される。&lt;/p&gt;
&lt;!-- https://twitter.com/fvnever/status/1596592659581345793?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Took me a while (as everything do), but finally I&amp;#39;ve released the first stable release of AvaloniaRider, &lt;a href="https://twitter.com/hashtag/Avalonia?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#Avalonia&lt;/a&gt; previewer plugin for &lt;a href="https://twitter.com/JetBrainsRider?ref_src=twsrc%5Etfw"&gt;&amp;#64;JetBrainsRider&lt;/a&gt; (only EAP builds for now).&lt;br&gt;&lt;br&gt;Fully cross-platform, since it is based on &lt;a href="https://twitter.com/hashtag/Avalonia?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#Avalonia&lt;/a&gt; awesomeness.&lt;a href="https://t.co/zQzNuchGoF"&gt;https://t.co/zQzNuchGoF&lt;/a&gt;&lt;/p&gt;&amp;mdash; Dr. Friedrich von Never (&amp;#64;fvnever) &lt;a href="https://twitter.com/fvnever/status/1596592659581345793?ref_src=twsrc%5Etfw"&gt;November 26, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="lowleveldesignwindbg-ext-template-a-template-for-creating-managed-windbg-extensions"&gt;lowleveldesign/windbg-ext-template: A template for creating managed WinDbg extensions&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/lowleveldesign/windbg-ext-template"&gt;https://github.com/lowleveldesign/windbg-ext-template&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WinDbg で .NET をホストしてマネージドコードで拡張関数を実装するためのテンプレート。&lt;/p&gt;
&lt;!-- https://twitter.com/lowleveldesign/status/1596164757353922560?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;I&amp;#39;m happy to share a sample managed WinDbg extension based on the .NET hosting API and DbgX NuGet package. Thanks to the signatures in DbgX, we may now access all the DbgEng interfaces in dotnet!  🤯 &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/windbg?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#windbg&lt;/a&gt; &lt;a href="https://t.co/ndxyEgPzDv"&gt;https://t.co/ndxyEgPzDv&lt;/a&gt;&lt;/p&gt;&amp;mdash; Sebastian Solnica (&amp;#64;lowleveldesign) &lt;a href="https://twitter.com/lowleveldesign/status/1596164757353922560?ref_src=twsrc%5Etfw"&gt;November 25, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="home-endoflife.date"&gt;Home | endoflife.date&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://endoflife.date/"&gt;https://endoflife.date/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;様々なフレームワークやプロダクトの End-of-Life の日付をまとめているサイト。&lt;/p&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/dotnetfdn/status/1595427955076784133?s=12&amp;t=EDTXeykhwoV--mTr9sPPxw --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;ICYMI - Firmware images of .NET &lt;a href="https://twitter.com/nanoFramework?ref_src=twsrc%5Etfw"&gt;&amp;#64;nanoframework&lt;/a&gt; &lt;a href="https://twitter.com/EspressifSystem?ref_src=twsrc%5Etfw"&gt;&amp;#64;EspressifSystem&lt;/a&gt; ESP32-C3 series have just been released! 🥳🚀&lt;br&gt;.NET now runs on &lt;a href="https://twitter.com/risc_v?ref_src=twsrc%5Etfw"&gt;&amp;#64;risc_v&lt;/a&gt; processors too!&lt;br&gt;How cool is this?!?! 💜🤩 &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://t.co/9UmMpKPkMJ"&gt;pic.twitter.com/9UmMpKPkMJ&lt;/a&gt;&lt;/p&gt;&amp;mdash; .NET Foundation (&amp;#64;dotnetfdn) &lt;a href="https://twitter.com/dotnetfdn/status/1595427955076784133?ref_src=twsrc%5Etfw"&gt;November 23, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;ESP32-C3 向けの .NET nanoFramework ファームウェアイメージがリリースされ、RISC-V で .NET が動くという話。&lt;/p&gt;
&lt;h3 id="alexandre-mutel-one-of-the-super-cool-feature-of-nativeaot-with-mastodon"&gt;Alexandre Mutel: &amp;quot;One of the super cool feature of NativeAOT with .…&amp;quot; - Mastodon&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://mastodon.social/&amp;#64;xoofx/109423020409800983"&gt;https://mastodon.social/&amp;#64;xoofx/109423020409800983&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One of the super cool feature of NativeAOT with .NET 7 is &amp;quot;Direct PInvoke calls&amp;quot; or the ability to link against a static library &lt;a href="https://github.com/dotnet/runtime/blob/main/src/coreclr/nativeaot/docs/interop.md"&gt;https://github.com/dotnet/runtime/blob/main/src/coreclr/nativeaot/docs/interop.md&lt;/a&gt; and call functions directly.
There is no built-in support to distribute such things with NuGet  (e.g like runtime folder) but it's easy to ship a package that would provide dynamic libraries but could also provide support for statically linked libraries and inject it automatically via a MSBuild target. I love this feature! 😎&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;.NET 7 の NativeAOT では直接 P/Invoke 呼び出しと静的ライブラリリンクがサポートされているという話。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/runtime/blob/main/src/coreclr/nativeaot/docs/interop.md"&gt;runtime/interop.md at main · dotnet/runtime · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2022-11-22: C# support in Fleet, .NET Virtual Monolithic Repository, How fast is really ASP.NET Core?</title>
			<link>/2022/11/22/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2022/11/22/updates</guid>
			<pubDate>Tue, 22 Nov 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="c-support-in-fleet-public-preview-the.net-tools-blog"&gt;C# support in Fleet Public Preview | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/11/17/csharp-support-in-fleet/"&gt;https://blog.jetbrains.com/dotnet/2022/11/17/csharp-support-in-fleet/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Fleet での C# サポートがパブリックプレビューとなった。&lt;/p&gt;
&lt;p&gt;現時点では C# の基本的なサポートのみとなり、Razor/Blazor や VB.NET, F# といった言語サポートは行われない(.NET サポートではない理由)。Rider と同様に ReSharper をベースとした実装が行われているが Xamarin や Unity といったサポートがないため Rider と Fleet は当面共存する。また制限として .NET 5 以降を対象とするプロジェクトのみサポートとなる。&lt;/p&gt;
&lt;p&gt;サポートされている機能としてはコード解析、ナビゲーション、名前のリファクタリング、コード補完、テンプレート、フォーマッティング、ドキュメントポップアップ、アプリケーションの構成と実行、ブレークポイントをはじめとしたデバッグがある。&lt;/p&gt;
&lt;p&gt;記事ではサポートの有効化の手順や今後の計画などにも触れている。&lt;/p&gt;
&lt;h3 id="announcing-the.net-virtual-monolithic-repository-issue-241-dotnetannouncements"&gt;Announcing the .NET Virtual Monolithic Repository · Issue #241 · dotnet/announcements&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/announcements/issues/241"&gt;https://github.com/dotnet/announcements/issues/241&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET のバーチャルモノリシックリポジトリーという .NET をビルドするために必要なものを一つのリポジトリーにミラーして集めるというリポジトリーが公開された。&lt;/p&gt;
&lt;p&gt;.NET の製品ビルドはいくつものリポジトリーから構成されるため、Microsoft 以外がビルドを再現することが難しく、またビルドとリリースのインフラストラクチャーが複雑さを増していくことが課題となっているため、ビルドと出荷を簡素化しコミュニティーに対して透過的である状態にするといった目的のリポジトリーとなっている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/dotnet"&gt;dotnet/dotnet: Home of .NET's Virtual Monolithic Repository. Includes all the code needed to build the .NET SDK from source.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="how-fast-is-really-asp.net-core"&gt;How fast is really ASP.NET Core?&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dusted.codes/how-fast-is-really-aspnet-core"&gt;https://dusted.codes/how-fast-is-really-aspnet-core&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core のパフォーマンスに関して近年 TechEmpower Benchmark の結果を元に高速さを宣伝しているが、これに対応するコードはどのようなものとなっているのかを掘り下げている記事。&lt;/p&gt;
&lt;p&gt;ベンチマークのコードには Kestrel や最低限の部分のみで書かれた &amp;quot;Platform&amp;quot;、ASP.NET Core の Middleware を使う &amp;quot;Micro&amp;quot;、Razor テンプレートエンジンまで使う &amp;quot;Full&amp;quot; の構成があり、それぞれの実装を取り上げ、宣伝には Platform での結果が持ち出されているが「他の言語/プラットフォームに比べて速い」と言えるのかどうかといった話など。&lt;/p&gt;
&lt;h3 id="actions-self-hosted-runners-now-support-windows-arm64-issue-616-githubroadmap"&gt;Actions: Self-hosted runners now support Windows ARM64 · Issue #616 · github/roadmap&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/github/roadmap/issues/616#event-7826802074"&gt;https://github.com/github/roadmap/issues/616#event-7826802074&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GitHub Actions の Self-hosted runner が Windows ARM64 環境をサポートした。&lt;/p&gt;
&lt;h3 id="announcing-oracle-support-for.net-7-alex-keh-medium"&gt;Announcing Oracle Support for .NET 7 - Alex Keh - Medium&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;alex.keh/announcing-oracle-support-for-net-7-c011b0dc4558"&gt;https://medium.com/&amp;#64;alex.keh/announcing-oracle-support-for-net-7-c011b0dc4558&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ODP.NET Core が .NET 7 をサポートした。&lt;/p&gt;
&lt;p&gt;NuGet パッケージのバージョン 3.21.80 以降で Oracle Database 11g Release 2 (11.2.0.4) 以降をサポートする。&lt;/p&gt;
&lt;h3 id="visual-studio-2022-version-17.4.1-visual-studio-2022-release-notes-microsoft-learn"&gt;Visual Studio 2022 version 17.4.1 - Visual Studio 2022 Release Notes | Microsoft Learn&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://learn.microsoft.com/en-us/visualstudio/releases/2022/release-notes#17.4.1"&gt;https://learn.microsoft.com/en-us/visualstudio/releases/2022/release-notes#17.4.1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 version 17.4.1 がリリースされた。&lt;/p&gt;
&lt;p&gt;ML.NET Model Builder や統合ターミナルのスクリーンリーダーの問題、Linux での .NET 7 のコアダンプを開いた際にクラッシュする問題などが修正されている。&lt;/p&gt;
&lt;h3 id="multi-repository-support-released-visual-studio-blog"&gt;Multi-repository Support Released! - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/multi-repository-support-released/"&gt;https://devblogs.microsoft.com/visualstudio/multi-repository-support-released/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.4 でリリースされた Git のマルチリポジトリーサポートについての解説記事。&lt;/p&gt;
&lt;p&gt;マルチリポジトリーサポートにより一つのソリューションを開いている最中に複数のリポジトリーを扱えるようになる。なお同時に取り扱えるリポジトリの数はパフォーマンスの制約上現時点では10個までと制限されている。&lt;/p&gt;
&lt;p&gt;記事では複数リポジトリーを跨いだブランチの管理と変更の追跡、プッシュ、Fetch 時の Prune の有無など Git リポジトリーの設定といった点を紹介している。&lt;/p&gt;
&lt;h3 id="public-preview-of-dev-tunnels-in-visual-studio-for-asp.net-core-projects-visual-studio-blog"&gt;Public preview of dev tunnels in Visual Studio for ASP.NET Core projects - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/public-preview-of-dev-tunnels-in-visual-studio-for-asp-net-core-projects/"&gt;https://devblogs.microsoft.com/visualstudio/public-preview-of-dev-tunnels-in-visual-studio-for-asp-net-core-projects/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio で ASP.NET Core 開発時に使用できる開発トンネルのパブリックプレビューについての記事。&lt;/p&gt;
&lt;p&gt;&amp;quot;dev tunnel&amp;quot; はインターネットからローカル環境へのトンネル(ポートフォワーディング)を提供するサービス。プライベートプレビューからパブリックプレビューとなった。
記事ではトンネルを有効にする方法とデバッグ起動時に使用する設定方法、初期リリースからの変更点について紹介している。&lt;/p&gt;
&lt;p&gt;今後のロードマップとして永続 URL やトンネル管理や各種 UI といったものを追加したいとのこと。&lt;/p&gt;
&lt;h3 id="visual-studio-2022-performance-enhancements-17.4-visual-studio-blog"&gt;Visual Studio 2022 Performance Enhancements 17.4 - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2022-performance-enhancements-17-4/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-2022-performance-enhancements-17-4/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.4 でのパフォーマンス改善についての紹介記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;フォルダーを指定して検索&lt;/li&gt;
&lt;li&gt;C++ プロジェクトのインデックス作成の高速化&lt;/li&gt;
&lt;li&gt;Git ブランチの切り替え中のソリューションのリロードの削減&lt;/li&gt;
&lt;li&gt;.NET の構成切り替え時の応答性&lt;/li&gt;
&lt;li&gt;ユニットテスト
&lt;ul&gt;
&lt;li&gt;並列テスト探索&lt;/li&gt;
&lt;li&gt;効率的な並列テスト実行&lt;/li&gt;
&lt;li&gt;Visual Studio とテストランナープロセスのコミュニケーションの最適化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ファイル保存の応答性向上&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="release-release-v2.50.0-grpcgrpc-dotnet"&gt;Release Release v2.50.0 · grpc/grpc-dotnet&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/grpc/grpc-dotnet/releases/tag/v2.50.0"&gt;https://github.com/grpc/grpc-dotnet/releases/tag/v2.50.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;grpc-dotnet 2.50.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは大きな機能変更はなく、主にいくつかの不具合が修正されている。&lt;/p&gt;
&lt;h3 id="net-framework-assembly-support-added-to-azure-logic-apps-standard-xslt-transformations-preview"&gt;.NET Framework assembly support added to Azure Logic Apps (Standard) XSLT transformations (Preview)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://techcommunity.microsoft.com/t5/integrations-on-azure-blog/net-framework-assembly-support-added-to-azure-logic-apps/ba-p/3669120"&gt;https://techcommunity.microsoft.com/t5/integrations-on-azure-blog/net-framework-assembly-support-added-to-azure-logic-apps/ba-p/3669120&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure Logic Apps (Standard) XSLT transformations で .NET Framework のアセンブリーサポートが追加された。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="net-7.0s-performance-improvements-with-dynamic-pgo-are-incredible-petabridge"&gt;.NET 7.0's Performance Improvements with Dynamic PGO are Incredible | Petabridge&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://petabridge.com/blog/dotnet7-pgo-performance-improvements/"&gt;https://petabridge.com/blog/dotnet7-pgo-performance-improvements/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Akka.NET での .NET 7 の DynamicPGO のパフォーマンス改善についての記事。&lt;/p&gt;
&lt;h3 id="net-7"&gt;.NET 7で導入されたビルトインコンテナサポートを試してみた - 銀の光と碧い空&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://tech.tanaka733.net/entry/2022/11/builtin-container-support"&gt;https://tech.tanaka733.net/entry/2022/11/builtin-container-support&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 でのビルトインコンテナーサポート(dotnet publish からコンテナーイメージをビルド)についての記事。&lt;/p&gt;
&lt;p&gt;記事では実際に使用する方法や各種設定についてや制限についてなどを説明している。&lt;/p&gt;
&lt;h3 id="writing-an-obs-plugin-with.net-nativeaot"&gt;Writing an OBS plugin with .NET NativeAOT&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://sharovarskyi.com/blog/posts/dotnet-obs-plugin-with-nativeaot/"&gt;https://sharovarskyi.com/blog/posts/dotnet-obs-plugin-with-nativeaot/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 の NativeAOT で OBS プラグインを書くという記事。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;UnmanagedCallersOnly&lt;/code&gt; で OBS のプラグイン用の関数をエクスポートし、プラグインとして読み込まれた際にログに出力するといった例を実装している。&lt;/p&gt;
&lt;h3 id="entity-framework-coredapper-qiita"&gt;Entity Framework CoreとDapperを同一トランザクションで併用する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/jun1s/items/212a95b73e68625a3674"&gt;https://qiita.com/jun1s/items/212a95b73e68625a3674&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core と Dapper を併用した際のトランザクションやコネクションの扱いについての記事。&lt;/p&gt;
&lt;h3 id="netibm-power-qiita"&gt;.NETがIBM Powerでサポートされたので試してみる - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/tom_m_m/items/9a729f462c0622a5ece3"&gt;https://qiita.com/tom_m_m/items/9a729f462c0622a5ece3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 でサポートされた 64-bit IBM Power (ppc64le) をインストール、実行してみるという記事。&lt;/p&gt;
&lt;h3 id="hashset-vs-sortedset-in-c-code-maze"&gt;HashSet vs SortedSet in C# - Code Maze&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://code-maze.com/csharp-hashset-vs-sortedset/"&gt;https://code-maze.com/csharp-hashset-vs-sortedset/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;HashSet&amp;lt;T&amp;gt;&lt;/code&gt; と &lt;code&gt;SortedSet&amp;lt;T&amp;gt;&lt;/code&gt; の違いと特徴、そのパフォーマンスの差についてまとめている記事。&lt;/p&gt;
&lt;h3 id="authorize-qiita"&gt;[Authorize]を使わなくても有効にする方法 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/mkuwan/items/bd5ff882108998d76dca"&gt;https://qiita.com/mkuwan/items/bd5ff882108998d76dca&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Authorize&lt;/code&gt; 属性をコントローラーやメソッドに指定せず、フォールバック認可ポリシーによって一律に指定する方法についての記事。&lt;/p&gt;
&lt;h3 id="a-quick-comparison-of-security-static-code-analyzers-for-c"&gt;A quick comparison of Security Static Code Analyzers for C#&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/dbalikhin/a-quick-comparison-of-security-static-code-analyzers-for-c-2l5h"&gt;https://dev.to/dbalikhin/a-quick-comparison-of-security-static-code-analyzers-for-c-2l5h&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# の静的コードセキュリティー解析ツールを比較している記事。&lt;/p&gt;
&lt;p&gt;記事では CodeQL, SonarCloud, Semgrep, Security Code Scan, Snyk Code といったツールをサンプルコードに対して実行してその結果を比較している。その他に速度や IDE サポート、価格といった面でも比較している。&lt;/p&gt;
&lt;h3 id="blazorbindings.maui-preview-10"&gt;BlazorBindings.Maui - Preview 10&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/dreamescaper/blazorbindingsmaui-preview-10-5c35"&gt;https://dev.to/dreamescaper/blazorbindingsmaui-preview-10-5c35&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MobileBlazorBindings からフォークした MAUI 向けの BlazorBindings.Maui の Preview 10 についての記事。&lt;/p&gt;
&lt;p&gt;.NET 7 サポートやナビゲーションの改善、シェルプロパティ、コンポーネントジェネレーターの改善などを紹介している。&lt;/p&gt;
&lt;h3 id="assertion-scopes-the-one-fluentassertions-feature-you-didnt-know-you-needed"&gt;Assertion Scopes, the one FluentAssertions feature you didn't know you needed&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/this-is-learning/assertion-scopes-the-one-fluentassertions-feature-you-didnt-know-you-needed-4pn"&gt;https://dev.to/this-is-learning/assertion-scopes-the-one-fluentassertions-feature-you-didnt-know-you-needed-4pn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;FluentAssertions にある Assertion Scope と呼ばれるアサーションのグループ化の仕組みについての記事。&lt;/p&gt;
&lt;p&gt;Assertion Scope 内で失敗したアサートはまとめて報告される(一つ失敗しても後続のアサートも実行される)といったことを実現できる。&lt;/p&gt;
&lt;h3 id="how-to-draw-2d-graphics-in.net-mauis-graphicsview"&gt;How to Draw 2D Graphics in .NET MAUI’s GraphicsView&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/syncfusion/how-to-draw-2d-graphics-in-net-mauis-graphicsview-daj"&gt;https://dev.to/syncfusion/how-to-draw-2d-graphics-in-net-mauis-graphicsview-daj&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI で 2D グラフィックスを描画するビューを作る方法についての記事。&lt;/p&gt;
&lt;p&gt;GraphicsView と Microsoft.Maui.Graphics を使用して図形などを描画することができる。&lt;/p&gt;
&lt;h3 id="intro-to-litedb-for.net-developers.sample-webapp-included"&gt;Intro to LiteDB for .NET Developers. Sample WebApp Included&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://platform.uno/blog/intro-to-litedb-for-net-developers-sample-webapp-included/"&gt;https://platform.uno/blog/intro-to-litedb-for-net-developers-sample-webapp-included/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET の NoSQL データベースである LiteDB の紹介とそれを使った Uno Platform サンプルアプリケーションを実装についての記事。&lt;/p&gt;
&lt;h3 id="c-11-required-members-ndepend"&gt;C# 11 required members - NDepend&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.ndepend.com/c-11-required-members"&gt;https://blog.ndepend.com/c-11-required-members&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 の &lt;code&gt;required&lt;/code&gt; (必須)メンバーについての記事。&lt;/p&gt;
&lt;p&gt;記事では使用方法や制限事項、どのようなケースで役立つのかといったことを紹介している。&lt;/p&gt;
&lt;h3 id="enable-group-policy-settings-with-visual-studio-administrative-templates-admx-visual-studio-blog"&gt;Enable Group Policy Settings with Visual Studio Administrative Templates (ADMX) - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/enable-group-policy-settings-with-visual-studio-administrative-templates-admx/"&gt;https://devblogs.microsoft.com/visualstudio/enable-group-policy-settings-with-visual-studio-administrative-templates-admx/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 管理用テンプレートを使用してグループポリシー設定を有効化することについての記事。&lt;/p&gt;
&lt;h3 id="ef-core-7-is-here-welcome-typed-entity-id"&gt;EF Core 7 is here - Welcome typed entity id 🍾&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/maxx_don/ef-core-7-is-here-welcome-typed-entity-id-1k3p"&gt;https://dev.to/maxx_don/ef-core-7-is-here-welcome-typed-entity-id-1k3p&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core 7 でカスタムな型 ID をもつエンティティーがサポートされたことについての記事。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="le-nnblazor-transition-group-an-easy-way-to-perform-animations-when-a-blazor-component-enters-or-leaves-the-dom"&gt;le-nn/blazor-transition-group: An easy way to perform animations when a Blazor component enters or leaves the DOM&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/le-nn/blazor-transition-group"&gt;https://github.com/le-nn/blazor-transition-group&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor でリストのようなコンポーネントに追加、削除アニメーションを実装するためのライブラリー。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/remrem/articles/3e13d64bcba6b5"&gt;Blazorで簡単にリストの追加/削除アニメーションを実現する [BlazorTransitionGroup]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asmichichildprocess-asmichi.childprocess-is-a.net-library-that-provides-functionality-for-creating-child-processes.an-alternative-to-system.diagnostics.process.start"&gt;asmichi/ChildProcess: Asmichi.ChildProcess is a .NET library that provides functionality for creating child processes. An alternative to &lt;code&gt;System.Diagnostics.Process.Start&lt;/code&gt;.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/asmichi/ChildProcess"&gt;https://github.com/asmichi/ChildProcess&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;子プロセスを生成して入出力などの操作を柔軟に行えるライブラリー。&lt;/p&gt;
&lt;h3 id="arm64-windows-11-dd-gzip-linux-dd-gzip-qiita"&gt;ARM64 版 Windows 11 で動作する dd + gzip 自作ツール (物理ディスクのイメージ化 + リストア、Linux の dd + gzip 互換) の提供 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/dnobori/items/59cc61b7f35449182b98"&gt;https://qiita.com/dnobori/items/59cc61b7f35449182b98&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ARM64 版の Windows で動作する物理ディスクのイメージ化と書き戻しを行うツール。&lt;/p&gt;
&lt;h3 id="pythonnetpythonnet-python-for.net-is-a-package-that-gives-python-programmers-nearly-seamless-integration-with-the.net-common-language-runtime-clr-and-provides-a-powerful-application-scripting-tool-for.net-developers"&gt;pythonnet/pythonnet: Python for .NET is a package that gives Python programmers nearly seamless integration with the .NET Common Language Runtime (CLR) and provides a powerful application scripting tool for .NET developers.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/pythonnet/pythonnet"&gt;https://github.com/pythonnet/pythonnet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET から Python をシームレスに呼び出す (組み込む)、あるいは Python から .NET を呼び出すといったことを実現するライブラリー。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/hiron_rgkr/items/e0f110d75fb35584e6ed"&gt;C# から Python を呼ぶ Pythonnet の使い方 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="monolithic-to-microservice-journey-for.net-applications"&gt;Monolithic to Microservice journey for .NET Applications&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://d1.awsstatic.com/developer/Monolith-to-Microservice-Journey-net-framework-application-v1.5.pdf"&gt;https://d1.awsstatic.com/developer/Monolith-to-Microservice-Journey-net-framework-application-v1.5.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET アプリケーションのためのモノリスからマイクロサービスへのジャーニー (英語)&lt;/p&gt;
&lt;!-- https://twitter.com/dotnetonAWS/status/1593725744554835973 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Learn how to move and modernize Windows workloads to &lt;a href="https://twitter.com/hashtag/AWS?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#AWS&lt;/a&gt; using a combination of strategies including rehosting, replatforming, and refactoring in this 🆕 technical guide. &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt;&lt;br&gt;&lt;br&gt;🔗 &lt;a href="https://t.co/sx48IY6hSQ"&gt;https://t.co/sx48IY6hSQ&lt;/a&gt; &lt;a href="https://t.co/wJN1H3ttb9"&gt;pic.twitter.com/wJN1H3ttb9&lt;/a&gt;&lt;/p&gt;&amp;mdash; .NET on AWS (&amp;#64;dotnetonAWS) &lt;a href="https://twitter.com/dotnetonAWS/status/1593725744554835973?ref_src=twsrc%5Etfw"&gt;November 18, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;p&gt;Azure と gRPC JSON Transcoding と .NET Native AOT (サーバー側?) の組み合わせで動いているという話。&lt;/p&gt;
&lt;!-- https://twitter.com/jamesnk/status/1592634240310861824?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;This app is published with .NET Native AOT:&lt;a href="https://t.co/fAqsdxRtjw"&gt;https://t.co/fAqsdxRtjw&lt;/a&gt;&lt;br&gt;&lt;br&gt;🌎 gRPC on Azure&lt;br&gt;🔥 gRPC JSON transcoding&lt;br&gt;🚀 .NET Native AOT &lt;a href="https://t.co/rPVjbVzSfJ"&gt;pic.twitter.com/rPVjbVzSfJ&lt;/a&gt;&lt;/p&gt;&amp;mdash; James Newton-King ♔ (&amp;#64;JamesNK) &lt;a href="https://twitter.com/JamesNK/status/1592634240310861824?ref_src=twsrc%5Etfw"&gt;November 15, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;PerfView で .NET アプリケーションのパフォーマンスをプロファイリングするという動画。&lt;/p&gt;
&lt;!-- https://twitter.com/aaronontheweb/status/1592275255426711553?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;I promised a video on performance profiling &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; applications with PerfView; I have now published it!&lt;br&gt;&lt;br&gt;&amp;quot;Performance Profiling .NET Applications with PerfView&amp;quot;&lt;a href="https://t.co/dMz6lOsSFR"&gt;https://t.co/dMz6lOsSFR&lt;/a&gt;&lt;/p&gt;&amp;mdash; Aaron Stannard (&amp;#64;Aaronontheweb) &lt;a href="https://twitter.com/Aaronontheweb/status/1592275255426711553?ref_src=twsrc%5Etfw"&gt;November 14, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2022-11-15: .NET 7</title>
			<link>/2022/11/15/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2022/11/15/updates</guid>
			<pubDate>Tue, 15 Nov 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="net-7-is-available-today.net-blog"&gt;.NET 7 is Available Today - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-dotnet-7/"&gt;https://devblogs.microsoft.com/dotnet/announcing-dotnet-7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 がリリースされた。記事では .NET 7 の様々な新機能や変更点について改めてまとめて紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;統合
&lt;ul&gt;
&lt;li&gt;One BCL (一つのベースクラスライブラリー)&lt;/li&gt;
&lt;li&gt;新しい TFM&lt;/li&gt;
&lt;li&gt;ARM64 のネイティブサポート&lt;/li&gt;
&lt;li&gt;Linux 上での .NET サポートの強化
&lt;ul&gt;
&lt;li&gt;64-bit IBM Power プラットフォームのサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;モダン
&lt;ul&gt;
&lt;li&gt;引き続きのパフォーマンス改善&lt;/li&gt;
&lt;li&gt;コンテナーファーストワークフローのような開発生産性の向上&lt;/li&gt;
&lt;li&gt;同じコードベースからのモバイルとデスクトップアプリの構築&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;クラウドネイティブアプリのための .NET
&lt;ul&gt;
&lt;li&gt;分散したクラウドネイティブアプリのビルドとデプロイを簡単に
&lt;ul&gt;
&lt;li&gt;Day 0 での Azure サポート&lt;/li&gt;
&lt;li&gt;ビルトインのコンテナーサポート&lt;/li&gt;
&lt;li&gt;Orleans 7&lt;/li&gt;
&lt;li&gt;Observability&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;シンプル
&lt;ul&gt;
&lt;li&gt;C# 11 でシンプルで少ないコードを記述
&lt;ul&gt;
&lt;li&gt;Generic Math&lt;/li&gt;
&lt;li&gt;Raw String Literals&lt;/li&gt;
&lt;li&gt;.NET ライブラリー&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;クラウドネイティブアプリのための HTTP/3 と Minimal API の改善&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;パフォーマンス
&lt;ul&gt;
&lt;li&gt;沢山のパフォーマンスの改善
&lt;ul&gt;
&lt;li&gt;On Stack Replacement&lt;/li&gt;
&lt;li&gt;Profile-Guided Optimization&lt;/li&gt;
&lt;li&gt;Native AOT&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;.NET 7 は Standard Term Support (標準期間サポート) のためリリースから18か月間のサポートとなる。&lt;/p&gt;
&lt;h3 id="announcing-asp.net-core-in.net-7.net-blog"&gt;Announcing ASP.NET Core in .NET 7 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-asp-net-core-in-dotnet-7/"&gt;https://devblogs.microsoft.com/dotnet/announcing-asp-net-core-in-dotnet-7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 の ASP.NET Core に関するアナウンス記事。&lt;/p&gt;
&lt;p&gt;記事では新しい機能や変更点について過去の記事へのリンクをまとめて紹介している。&lt;/p&gt;
&lt;h3 id="whats-new-in-windows-forms-in.net-7.0.net-blog"&gt;What's new in Windows Forms in .NET 7.0 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/winforms-enhancements-in-dotnet-7/"&gt;https://devblogs.microsoft.com/dotnet/winforms-enhancements-in-dotnet-7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 の Windows Forms の新しい機能や変更点についての記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;アクセシビリティの改善と修正&lt;/li&gt;
&lt;li&gt;高 DPI とスケーリングの改善&lt;/li&gt;
&lt;li&gt;データバインディングの改善&lt;/li&gt;
&lt;li&gt;COM ラッパーと Native AOT&lt;/li&gt;
&lt;li&gt;その他変更点&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="announcing.net-maui-for.net-7-general-availability.net-blog"&gt;Announcing .NET MAUI for .NET 7 General Availability - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-maui-dotnet-7/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-maui-dotnet-7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 の .NET MAUI がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは Map コントロールやモバイルでのレンダリングパフォーマンスの改善、デスクトップでの様々な強化といったものが行われている。&lt;/p&gt;
&lt;h3 id="whats-new-for-wpf-in.net-7.net-blog"&gt;What's new for WPF in .NET 7 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/wpf-on-dotnet-7/"&gt;https://devblogs.microsoft.com/dotnet/wpf-on-dotnet-7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 の WPF の新しい機能や変更点についての記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;パフォーマンス
&lt;ul&gt;
&lt;li&gt;Box 化/Box 化解除&lt;/li&gt;
&lt;li&gt;アロケーション&lt;/li&gt;
&lt;li&gt;その他&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;アクセシビリティ&lt;/li&gt;
&lt;li&gt;不具合の修正&lt;/li&gt;
&lt;li&gt;基盤のアップグレード&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="entity-framework-core-7-ef7-is-available-today.net-blog"&gt;Entity Framework Core 7 (EF7) is available today - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-ef7/"&gt;https://devblogs.microsoft.com/dotnet/announcing-ef7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core 7 (EF7) がリリースされた。&lt;/p&gt;
&lt;p&gt;記事では Entity Framework Core 7 での新機能や変更点について改めて紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JSON カラム
&lt;ul&gt;
&lt;li&gt;JSON 問い合わせに LINQ を使用&lt;/li&gt;
&lt;li&gt;SaveChanges を使用した JSON の更新&lt;/li&gt;
&lt;li&gt;その他 JSON カラムについて&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バルク更新と削除&lt;/li&gt;
&lt;li&gt;単一行の更新と削除&lt;/li&gt;
&lt;li&gt;高速な SaveChanges
&lt;ul&gt;
&lt;li&gt;不要なトランザクションの削除&lt;/li&gt;
&lt;li&gt;複数行の挿入&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Table-per-concrete-type (TPC) 継承マッピング&lt;/li&gt;
&lt;li&gt;カスタムデータベースファーストテンプレート
&lt;ul&gt;
&lt;li&gt;生成されるエンティティ型のカスタマイズ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;カスタムモデル構築規則
&lt;ul&gt;
&lt;li&gt;規則の削除&lt;/li&gt;
&lt;li&gt;規則の追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;追加、更新、削除のストアドプロシージャーのマッピング&lt;/li&gt;
&lt;li&gt;新しいまたは改善されたインターセプターとイベント
&lt;ul&gt;
&lt;li&gt;マテリアル化インターセプション&lt;/li&gt;
&lt;li&gt;接続文字列の遅延初期化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;様々な小さな改善&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Entity Framework Core 7 は .NET 6 をターゲットとしており、.NET 6 (LTS) または .NET 7 で利用可能。&lt;/p&gt;
&lt;h3 id="announcing-f-7.net-blog"&gt;Announcing F# 7 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-fsharp-7/"&gt;https://devblogs.microsoft.com/dotnet/announcing-fsharp-7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 で利用可能となった F# 7 についてのアナウンス。記事では次の機能を紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;インターフェースの static abstract members のサポート&lt;/li&gt;
&lt;li&gt;SRTP をより使いやすく&lt;/li&gt;
&lt;li&gt;必須プロパティーチェック
&lt;ul&gt;
&lt;li&gt;init スコープと init-only プロパティー&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;リファレンスアセンブリーサポート&lt;/li&gt;
&lt;li&gt;F# self-contained デプロイメントと Native AOT&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="welcome-to-c-11.net-blog"&gt;Welcome to C# 11 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/welcome-to-csharp-11/"&gt;https://devblogs.microsoft.com/dotnet/welcome-to-csharp-11/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 で利用可能となった C# 11 についてのアナウンス。記事では次の機能を紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UTF-8 文字列リテラル&lt;/li&gt;
&lt;li&gt;生文字列リテラル&lt;/li&gt;
&lt;li&gt;静的メンバー上の抽象化&lt;/li&gt;
&lt;li&gt;リストパターン&lt;/li&gt;
&lt;li&gt;必須メンバー&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="announcing-nuget-6.4-signed-central-delivered-the-nuget-blog"&gt;Announcing NuGet 6.4 - Signed, Central, Delivered - The NuGet Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/"&gt;https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NuGet 6.4 がリリースされた。&lt;/p&gt;
&lt;p&gt;NuGet 6.4 は Visual Studio 2022 と .NET 7 に含まれ、単体の実行ファイルとしてもダウンロード可能。&lt;/p&gt;
&lt;p&gt;記事ではこのリリースに含まれる次の点について紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Central Package Management が運用利用可能に&lt;/li&gt;
&lt;li&gt;GlobalPackageReference で一つの PackageReference をどこでも使用
&lt;ul&gt;
&lt;li&gt;GlobalPackageReference を定義することですべてのプロジェクトにパッケージを追加できる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Visual Studio のすべてのタブでのパッケージ読み込みのパフォーマンス改善&lt;/li&gt;
&lt;li&gt;NuGet 署名パッケージ検証&lt;/li&gt;
&lt;li&gt;Visual Studio での認証の改善&lt;/li&gt;
&lt;li&gt;NuGet.exe ローカライズ&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="visual-studio-2022-17.4-is-now-available-visual-studio-blog"&gt;Visual Studio 2022 17.4 is now available! - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2022-17-4/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-2022-17-4/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 version 17.4 がリリースされた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.NET 7&lt;/li&gt;
&lt;li&gt;C++&lt;/li&gt;
&lt;li&gt;Arm64&lt;/li&gt;
&lt;li&gt;ロールバック&lt;/li&gt;
&lt;li&gt;エンタープライズサポート
&lt;ul&gt;
&lt;li&gt;LTSC サポート&lt;/li&gt;
&lt;li&gt;Windows Updaet for Business からのセキュリティーアップデート&lt;/li&gt;
&lt;li&gt;Visual Studio 管理テンプレートによる管理ポリシー&lt;/li&gt;
&lt;li&gt;サポート外のコンポーネントの削除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;コラボレーションとチーム
&lt;ul&gt;
&lt;li&gt;Git ツーリング&lt;/li&gt;
&lt;li&gt;マルチリポジトリサポートのリリース&lt;/li&gt;
&lt;li&gt;Microsoft Teams Toolkit&lt;/li&gt;
&lt;li&gt;エコシステム
&lt;ul&gt;
&lt;li&gt;Arm64 の拡張と VisualStudio.Extensibility 拡張モデル&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;生産性
&lt;ul&gt;
&lt;li&gt;選択マッチハイライティング&lt;/li&gt;
&lt;li&gt;オーディオキュー&lt;/li&gt;
&lt;li&gt;データテーブルビジュアライザー&lt;/li&gt;
&lt;li&gt;コールスタックウィンドウ内での例外スタックフレーム&lt;/li&gt;
&lt;li&gt;テストエクスプローラーでのテスト結果のクリアとフィルター&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;パフォーマンス
&lt;ul&gt;
&lt;li&gt;Git ブランチ切り替え&lt;/li&gt;
&lt;li&gt;ファイル保存のレスポンス改善&lt;/li&gt;
&lt;li&gt;C++ インデックス&lt;/li&gt;
&lt;li&gt;ファイル内の検索と置き換え&lt;/li&gt;
&lt;li&gt;言語サービス設定切り替え最適化&lt;/li&gt;
&lt;li&gt;ユニットテストパフォーマンス改善
&lt;ul&gt;
&lt;li&gt;テスト検索の並列化&lt;/li&gt;
&lt;li&gt;テストの実行の効果的な並列化&lt;/li&gt;
&lt;li&gt;Visual Studio とテストランナープロセス間の通信の最適化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Arm64 対応と Windows Update for Business での更新、Visual Studio のロールバックについては下記の詳細な記事を参照のこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/arm64-visual-studio-is-officially-here/"&gt;Arm64 Visual Studio is officially here! - Visual Studio Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/deploy-visual-studio-updates-to-devices-enrolled-in-windows-update-for-business/"&gt;Deploy Visual Studio updates to devices enrolled in Windows Update for Business - Visual Studio Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/introducing-visual-studio-rollback/"&gt;Introducing Visual Studio Rollback! - Visual Studio Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最後に次期バージョンのプレビューである Visual Studio 2022 17.5 Preview 1 も利用可能となったことも案内している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Azure Container Registry や Azure Container Apps のサポート&lt;/li&gt;
&lt;li&gt;SQL Server 2022 のサポート&lt;/li&gt;
&lt;li&gt;Markdown のより深いサポート&lt;/li&gt;
&lt;li&gt;正規表現によるタブの色設定&lt;/li&gt;
&lt;li&gt;新しい Quick Add Item 体験&lt;/li&gt;
&lt;li&gt;Web プロジェクトでの F5 ターゲットとしての統合ターミナル&lt;/li&gt;
&lt;li&gt;サインインの改善のための Windows Authentication Broker との統合&lt;/li&gt;
&lt;li&gt;SDK スタイルプロジェクトのためのインプロセス VSIX サポート&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="visual-studio-for-mac-17.4-is-now-available-visual-studio-blog"&gt;Visual Studio for Mac 17.4 is now available - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-17-4-is-now-available/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-17-4-is-now-available/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 for Mac v17.4 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースではドッキングウィンドウ、フォントや行間の設定のようなユーザーインターフェースの改善、デバッガーの UI の改善、MAUI や .NET 7 と C# 11 のサポートといったものが含まれている。&lt;/p&gt;
&lt;p&gt;また Visual Studio 2022 for Mac v17.5 Preview 1 も利用可能となり、ランタイムの .NET 7 への更新やフォントサポートの改善が行われていることが案内されている。&lt;/p&gt;
&lt;h3 id="announcing-ml.net-2.0.net-blog"&gt;Announcing ML.NET 2.0 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-ml-net-2-0/"&gt;https://devblogs.microsoft.com/dotnet/announcing-ml-net-2-0/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ML.NET 2.0 と新しいバージョンの Model Builder がリリースされた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Model Builder でのテキスト分類シナリオ&lt;/li&gt;
&lt;li&gt;センテンス類似性 API&lt;/li&gt;
&lt;li&gt;トークナイザーサポート&lt;/li&gt;
&lt;li&gt;AutoML 改善&lt;/li&gt;
&lt;li&gt;Model Builder の高度な設定&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="whats-new-in-orleans-7.0.net-blog"&gt;What's new in Orleans 7.0 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/whats-new-in-orleans-7/"&gt;https://devblogs.microsoft.com/dotnet/whats-new-in-orleans-7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Orleans 7.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;Orleans チームは .NET チームの一部となり、.NET 7 と共に改善を進めた結果150%以上のパフォーマンス改善が持たされたとのこと。記事ではパフォーマンスの改善について、開発エクスペリエンスの向上について、Grain と Stream の識別の簡素化についてなどを紹介している。&lt;/p&gt;
&lt;h3 id="net-conf-2022-youtube"&gt;.NET Conf 2022 - YouTube&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PLdo4fOcmZ0oVlqu_V8EXUDDnPsYwemxjn"&gt;https://www.youtube.com/playlist?list=PLdo4fOcmZ0oVlqu_V8EXUDDnPsYwemxjn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 のリリース発表を含む .NET Conf 2022 のセッションビデオのプレイリスト。&lt;/p&gt;
&lt;h3 id="net-information-disclosure-vulnerability-ghsa-8g2p-5pqh-5jmc-github-advisory-database"&gt;.NET Information Disclosure Vulnerability - GHSA-8g2p-5pqh-5jmc - GitHub Advisory Database&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/advisories/GHSA-8g2p-5pqh-5jmc"&gt;https://github.com/advisories/GHSA-8g2p-5pqh-5jmc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoft.Data.SqlClient の 1.1.3 以下と 2.0.0 から 2.1.1 以下、System.Data.SqlClient の 4.8.4 以下に情報漏洩の脆弱性が見つかった。&lt;/p&gt;
&lt;p&gt;高負荷時にタイムアウトが発生した際に、非同期で実行されたクエリーに誤った結果を返してしまうことがあるという脆弱性がある。&lt;/p&gt;
&lt;p&gt;Microsoft.Data.SqlClient の 1.1.4 または 2.1.2、System.Data.SqlClient の 4.8.5 で修正されており、当該パッケージを利用している場合には更新が必要となる。&lt;/p&gt;
&lt;h3 id="net-framework-november-2022-security-and-quality-rollup-updates.net-blog"&gt;.NET Framework November 2022 Security and Quality Rollup Updates - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-framework-november-2022-security-and-quality-rollup-updates/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-framework-november-2022-security-and-quality-rollup-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework の2022年11月のセキュリティーと品質累積アップデートがリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは Microsoft.Data.SqlClient に関する脆弱性 (上記) の修正と WPF とランタイムに関するいくつかの不具合が修正されている。&lt;/p&gt;
&lt;h3 id="net-november-2022-updates.net-6.0.11-and.net-core-3.1.31.net-blog"&gt;.NET November 2022 Updates – .NET 6.0.11 and .NET Core 3.1.31 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/november-2022-updates/"&gt;https://devblogs.microsoft.com/dotnet/november-2022-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6.0.11 と .NET Core 3.1.31 がリリースされた。&lt;/p&gt;
&lt;p&gt;いくつかの不具合や改善が含まれている。また、記事では .NET Core 3.1 が今年の12月13日にサポート終了 (EOL) を迎えるため、.NET 6 へのアップデートをあらためて推奨している。&lt;/p&gt;
&lt;h3 id="release-2.2.0-mysql-netmysqlconnector"&gt;Release 2.2.0 · mysql-net/MySqlConnector&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/mysql-net/MySqlConnector/releases/tag/2.2.0"&gt;https://github.com/mysql-net/MySqlConnector/releases/tag/2.2.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Async MySqlConnector 2.2.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは .NET 7 のサポートと .NET 4.5 のサポート削除、その他いくつかの改善が含まれている。&lt;/p&gt;
&lt;h3 id="cake-v3.0.0-released"&gt;Cake v3.0.0 released&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://cakebuildnet.medium.com/cake-v3-0-0-released-b5555129a0f5"&gt;https://cakebuildnet.medium.com/cake-v3-0-0-released-b5555129a0f5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Cake v3.0.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは .NET 7 と C# 11 のサポート、&lt;code&gt;TaskOf&amp;lt;T&amp;gt;&lt;/code&gt;、マルチターゲットサポート、ビルドプロバイダーの改善、アドインが依存する Cake.Core のバージョンを 3.0 推奨するように、その他いくつかの改善と修正が行われている。&lt;/p&gt;
&lt;!-- https://twitter.com/cakebuildnet/status/1590129909187645441?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Cake v3.0.0 released - .NET 7 &amp;amp; C# 11 support, TaskOf&amp;lt;T&amp;gt;, Multiple target support, Improved build providers, and more🎉&lt;a href="https://t.co/LdsIidL9TK"&gt;https://t.co/LdsIidL9TK&lt;/a&gt;&lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/devops?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#devops&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/csharp?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#csharp&lt;/a&gt;&lt;/p&gt;&amp;mdash; Cake Build (&amp;#64;cakebuildnet) &lt;a href="https://twitter.com/cakebuildnet/status/1590129909187645441?ref_src=twsrc%5Etfw"&gt;November 8, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="nuget-central-package-management-comes-to-jetbrains-rider-the.net-tools-blog"&gt;NuGet Central Package Management Comes To JetBrains Rider | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/11/07/nuget-central-package-management-comes-to-jetbrains-rider/"&gt;https://blog.jetbrains.com/dotnet/2022/11/07/nuget-central-package-management-comes-to-jetbrains-rider/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider で NuGet の Central Package Management をサポートするというアナウンス。&lt;/p&gt;
&lt;p&gt;現在 Rider 2022.3 EAP と NuGet 6.2 以降をサポートする SDK があることで試すことができる。記事ではその設定方法と Central Package Management でのいくつかの Tips を紹介している。&lt;/p&gt;
&lt;h3 id="windows-community-toolkit-labs-experiments-are-here-ifdef-windows"&gt;Windows Community Toolkit Labs Experiments are Here! - #ifdef Windows&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/ifdef-windows/windows-community-toolkit-labs-experiments-are-here/"&gt;https://devblogs.microsoft.com/ifdef-windows/windows-community-toolkit-labs-experiments-are-here/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows Community Toolkit Labs についての記事。&lt;/p&gt;
&lt;p&gt;Windows Community Toolkit Labs は Windows Community Toolkit に含まれる前の試験的な実装のライブラリー。記事では Rive プレイヤーや設定カードと設定エキスパンダーといったコントロール、WCT Labs の使用方法について紹介している。&lt;/p&gt;
&lt;h3 id="release-v7.0.0-npgsqlnpgsql"&gt;Release v7.0.0 · npgsql/npgsql&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/npgsql/npgsql/releases/tag/v7.0.0"&gt;https://github.com/npgsql/npgsql/releases/tag/v7.0.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Npgsql 7.0.0 がリリースされた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DbDataSource を実装する NpgsqlDataSource&lt;/li&gt;
&lt;li&gt;Microsoft.Extensions.Logging によるロギングの改善&lt;/li&gt;
&lt;li&gt;論理レプリケーションプロトコル version 3 のサポート&lt;/li&gt;
&lt;li&gt;いくつかの破壊的変更&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="generally-available-azure-static-web-apps-now-fully-supports.net-7-azure-updates-microsoft-azure"&gt;Generally available: Azure Static Web Apps now fully supports .NET 7 | Azure updates | Microsoft Azure&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://azure.microsoft.com/en-us/updates/generally-available-azure-static-web-apps-now-fully-supports-net-7/"&gt;https://azure.microsoft.com/en-us/updates/generally-available-azure-static-web-apps-now-fully-supports-net-7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure Static Web Apps で .NET 7 がサポートされた。&lt;/p&gt;
&lt;p&gt;これにより .NET 7 Blazor WebAssembly アプリケーションをデプロイすることや .NET 7 による Azure Functions のビルドなどが可能となった。&lt;/p&gt;
&lt;h3 id="announcing-the.net-7-for-azure-functions-isolated-worker-process-is-generally-available-microsoft-community-hub"&gt;Announcing the .NET 7 for Azure functions isolated worker process is generally available - Microsoft Community Hub&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://techcommunity.microsoft.com/t5/apps-on-azure-blog/announcing-the-net-7-for-azure-functions-isolated-worker-process/ba-p/3671398"&gt;https://techcommunity.microsoft.com/t5/apps-on-azure-blog/announcing-the-net-7-for-azure-functions-isolated-worker-process/ba-p/3671398&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure Functions の 分離ワーカープロセスで .NET 7 がサポートされた。&lt;/p&gt;
&lt;h3 id="net-7-ga-available-on-app-service-azure-app-service"&gt;.NET 7 GA available on App Service - Azure App Service&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://azure.github.io/AppService/2022/11/08/dotnet7_ga.html"&gt;https://azure.github.io/AppService/2022/11/08/dotnet7_ga.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure App Service で .NET 7 がサポートされた。&lt;/p&gt;
&lt;h3 id="jetbrains.net-days-gamedev-day-online-2022-session-recordings-available-the.net-tools-blog"&gt;JetBrains .NET Days + GameDev Day Online 2022 – Session Recordings Available | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/11/10/dotnet-days-gamedev-day-online-2022-recordings/"&gt;https://blog.jetbrains.com/dotnet/2022/11/10/dotnet-days-gamedev-day-online-2022-recordings/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;10月下旬に行われた JetBrains による .NET とゲーム開発のオンラインイベントのセッション録画が公開となった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLQ176FUIyIUbSS1HBVrqEyNHpfSh166KW"&gt;JetBrains .NET Days Online 2022 - YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLQ176FUIyIUbWpW83t8IUGojnBaTDbmr4"&gt;JetBrains GameDev Day Online 2022 - YouTube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="c-advent-calendar-2022-qiita"&gt;C#のカレンダー | Advent Calendar 2022 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/advent-calendar/2022/csharplang"&gt;https://qiita.com/advent-calendar/2022/csharplang&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Qiita での2022年の C# Advent Calendar。&lt;/p&gt;
&lt;h3 id="net-sdk-visual-studio-tech.guitarrapc.com"&gt;新しいバージョンの .NET SDK と Visual Studio の更新 - tech.guitarrapc.cóm&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://tech.guitarrapc.com/entry/2022/11/10/004625"&gt;https://tech.guitarrapc.com/entry/2022/11/10/004625&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio を更新した場合の .NET SDK の取り扱いについての記事。&lt;/p&gt;
&lt;h3 id="net-7-wpf-linux-tech.guitarrapc.com"&gt;.NET 7 で WPF を Linux ビルドする - tech.guitarrapc.cóm&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://tech.guitarrapc.com/entry/2022/11/11/031555"&gt;https://tech.guitarrapc.com/entry/2022/11/11/031555&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Linux 環境で .NET 7 SDK を使用して WPF アプリケーションをビルドすることについての記事。&lt;/p&gt;
&lt;h3 id="visual-studio-2022-17.4-microsoft.codeanalysis.analyzers"&gt;Visual Studio 2022 17.4 以降で Microsoft.CodeAnalysis.Analyzers の警告が出る&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/mayuki/articles/c4728ae9cdef8e"&gt;https://zenn.dev/mayuki/articles/c4728ae9cdef8e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.4 以降で Microsoft.CodeAnalysis.Analyzers の警告が表示される問題の原因と対処方法。&lt;/p&gt;
&lt;h3 id="how-to-use-dall-e-api-with-c.net"&gt;How to Use DALL-E API With C#.NET&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://betterprogramming.pub/create-a-text-to-image-generator-using-dall-e-api-in-c-net-7df58d940e79"&gt;https://betterprogramming.pub/create-a-text-to-image-generator-using-dall-e-api-in-c-net-7df58d940e79&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;画像生成の DALL-E の API を .NET から呼び出してみるという記事。&lt;/p&gt;
&lt;h3 id="build-a-stock-update-notification-bot-for-microsoft-teams-using-c-and-teams-toolkit-for-visual-studio"&gt;Build a stock update notification bot for Microsoft Teams using C# and Teams Toolkit for Visual Studio&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/microsoft365/build-a-stock-update-notification-bot-for-microsoft-teams-using-c-and-teams-toolkit-for-visual-studio-mfl"&gt;https://dev.to/microsoft365/build-a-stock-update-notification-bot-for-microsoft-teams-using-c-and-teams-toolkit-for-visual-studio-mfl&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Teams Toolkit for Visual Studio を使用して株式アップデート情報を通知するボットを C# で実装する手順の記事。&lt;/p&gt;
&lt;h3 id="redis-as-a-database-with-redis-om"&gt;Redis as a Database with Redis OM&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;marius.munteann/redis-as-a-database-with-redis-om-2601a48b5c04"&gt;https://medium.com/&amp;#64;marius.munteann/redis-as-a-database-with-redis-om-2601a48b5c04&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Redis OM を使用して Redis をデータベースのように扱う方法についての記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/redis/redis-om-dotnet"&gt;redis/redis-om-dotnet: Object mapping, and more, for Redis and .NET&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asp.net-core-web-api-qiita"&gt;ASP.NET Core Web APIのバージョン管理 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/gushwell/items/663538393baef926c4c4"&gt;https://qiita.com/gushwell/items/663538393baef926c4c4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoft.AspNetCore.Mvc.Versioning を使用して API のバージョニング (例: /v1/api, /v2/api など) を行う方法についての記事。&lt;/p&gt;
&lt;h3 id="aws-lambda.net-core-3.1.net-6-qiita"&gt;AWS Lambdaで.NET Core 3.1から.NET 6に移行したときにやったこと - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/kaz-matsubara/items/7c3284dd6b38fe4489fb"&gt;https://qiita.com/kaz-matsubara/items/7c3284dd6b38fe4489fb&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AWS Lambda 向けの .NET Core 3.1 アプリケーションを .NET 6 に移行する際に行ったことをまとめた記事。&lt;/p&gt;
&lt;h3 id="whats-new-in.net-7-for-authentication-and-authorization"&gt;What's New in .NET 7 for Authentication and Authorization&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://auth0.com/blog/whats-new-in-dotnet-7-for-authentication-and-authorization/"&gt;https://auth0.com/blog/whats-new-in-dotnet-7-for-authentication-and-authorization/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 での認証と認可に関する変更と新機能についてまとめて紹介している記事。&lt;/p&gt;
&lt;h3 id="avoid-webdeploy-locking-errors-to-iis-with-shadow-copy-for-asp.net-core-apps"&gt;Avoid WebDeploy Locking Errors to IIS with Shadow Copy for ASP.NET Core Apps&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://weblog.west-wind.com/posts/2022/Nov/07/Avoid-WebDeploy-Locking-Errors-to-IIS-with-Shadow-Copy-for-ASPNET-Core-Apps"&gt;https://weblog.west-wind.com/posts/2022/Nov/07/Avoid-WebDeploy-Locking-Errors-to-IIS-with-Shadow-Copy-for-ASPNET-Core-Apps&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;IIS で動作する ASP.NET Core アプリケーションを WebDeploy でデプロイする際にファイルロックのエラーが発生する問題を回避する方法についての記事。&lt;/p&gt;
&lt;p&gt;記事では .NET 6 以降実験的に利用可能となったシャドウコピーを有効にする方法と WebDeploy の方法について解説している。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="mk3008sqmodel-select-query-builder"&gt;mk3008/SqModel: Select query builder&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/mk3008/SqModel"&gt;https://github.com/mk3008/SqModel&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SQL 文をパースし、加工したりして再構築するライブラリー。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/mkmonaka/articles/2e70c3c2354b45"&gt;C#でSQL文を再構築（解析・加工）するライブラリを公開しました&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;p&gt;.NET の公式サイトがリデザインされたという話。&lt;/p&gt;
&lt;!-- https://twitter.com/davidpine7/status/1589819551977701377?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;💜 Wow, I&amp;#39;m loving the redesigned &lt;a href="https://t.co/3tITGtOex3"&gt;https://t.co/3tITGtOex3&lt;/a&gt; site! It&amp;#39;s absolutely BEAUTIFUL 🤩 &lt;br&gt;&lt;br&gt;Congrats on that &lt;a href="https://twitter.com/mairacw?ref_src=twsrc%5Etfw"&gt;&amp;#64;mairacw&lt;/a&gt;, it&amp;#39;s awesome! Also, I&amp;#39;m seeing .NET 7 &lt;a href="https://twitter.com/nuget?ref_src=twsrc%5Etfw"&gt;&amp;#64;nuget&lt;/a&gt; packages. &lt;br&gt;&lt;br&gt;🔥 &lt;a href="https://twitter.com/hashtag/dotNETConf?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotNETConf&lt;/a&gt;  &lt;a href="https://twitter.com/hashtag/developerCommunity?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#developerCommunity&lt;/a&gt; &lt;a href="https://t.co/kAXgVGGFOE"&gt;pic.twitter.com/kAXgVGGFOE&lt;/a&gt;&lt;/p&gt;&amp;mdash; David Pine 🇺🇦 (&amp;#64;davidpine7) &lt;a href="https://twitter.com/davidpine7/status/1589819551977701377?ref_src=twsrc%5Etfw"&gt;November 8, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;なお&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="ja" dir="ltr"&gt;.NET のサイトがリニューアルして最近っぽくなってるけど、残念感が凄い・・・ &lt;a href="https://t.co/bAbT5JdO3n"&gt;pic.twitter.com/bAbT5JdO3n&lt;/a&gt;&lt;/p&gt;&amp;mdash; Tatsuro Shibamura (&amp;#64;shibayan) &lt;a href="https://twitter.com/shibayan/status/1589880989043810306?ref_src=twsrc%5Etfw"&gt;November 8, 2022&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;.NET でグリーンスレッドの実験的実装で Kestrel が動いているという話。&lt;/p&gt;
&lt;!-- https://twitter.com/davidfowl/status/1589859605508943873?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Got the .NET green thread (virtual thread/goroutine) experiment running with Kestrel. This stuff is hard to show but this call stack made me very happy 😅 &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://t.co/4Xy8kHGiHU"&gt;pic.twitter.com/4Xy8kHGiHU&lt;/a&gt;&lt;/p&gt;&amp;mdash; David Fowler 🇧🇧🇺🇸 (&amp;#64;davidfowl) &lt;a href="https://twitter.com/davidfowl/status/1589859605508943873?ref_src=twsrc%5Etfw"&gt;November 8, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Paint​.NET v5.0 を .NET 7 に移行するのは WinForms の nullable アノテーションで幾つかコンパイルエラーがあったものの5分でできたという話。&lt;/p&gt;
&lt;!-- https://twitter.com/rickbrewpdn/status/1590059027945631744?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Paint​.NET v5.0 is on .NET 7! Total conversion time was about 5 minutes. Had some compile errors because WinForms added some new nullable annotations. Also I got a (non-spam) phone call in the middle of it all. &lt;a href="https://t.co/1jCMJA4uBD"&gt;pic.twitter.com/1jCMJA4uBD&lt;/a&gt;&lt;/p&gt;&amp;mdash; Rick Brewster (&amp;#64;rickbrewPDN) &lt;a href="https://twitter.com/rickbrewPDN/status/1590059027945631744?ref_src=twsrc%5Etfw"&gt;November 8, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;ASP.NET Core のフレームワークのスタック図。&lt;/p&gt;
&lt;!-- https://twitter.com/davidfowl/status/1590165613506613248?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;I love this slide &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/aspnetcore?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#aspnetcore&lt;/a&gt; &lt;a href="https://t.co/TLDMAdwmAD"&gt;pic.twitter.com/TLDMAdwmAD&lt;/a&gt;&lt;/p&gt;&amp;mdash; David Fowler 🇧🇧🇺🇸 (&amp;#64;davidfowl) &lt;a href="https://twitter.com/davidfowl/status/1590165613506613248?ref_src=twsrc%5Etfw"&gt;November 9, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Akka.NET を .NET 7 (PGO 有効) でベンチマークを取った速くなったという話。&lt;/p&gt;
&lt;!-- https://twitter.com/aaronontheweb/status/1591474543339634691?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Yesterday, I observed a 33% out-of-the-box performance improvement in &lt;a href="https://twitter.com/AkkaDotNET?ref_src=twsrc%5Etfw"&gt;&amp;#64;AkkaDotNET&lt;/a&gt; &amp;#39;s single remote connection end-to-end benchmark using .NET 7.0 with PGO enabled. Very impressive.&lt;br&gt;&lt;br&gt;Today I ran our in-memory benchmarks  w/ PGO and the results are even more interesting! &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://t.co/ekmCYllddy"&gt;https://t.co/ekmCYllddy&lt;/a&gt;&lt;/p&gt;&amp;mdash; Aaron Stannard (&amp;#64;Aaronontheweb) &lt;a href="https://twitter.com/Aaronontheweb/status/1591474543339634691?ref_src=twsrc%5Etfw"&gt;November 12, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;!-- https://twitter.com/aaronontheweb/status/1591092844827222017?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Some .NET 7.0 performance benchmarks for &lt;a href="https://twitter.com/AkkaDotNET?ref_src=twsrc%5Etfw"&gt;&amp;#64;AkkaDotNET&lt;/a&gt; over a single Akka.Remote connection&lt;br&gt;&lt;br&gt;looks like things are ~10% faster on .NET 7. Take every free lunch you can find ;) &lt;a href="https://t.co/JEVyD5xx8C"&gt;pic.twitter.com/JEVyD5xx8C&lt;/a&gt;&lt;/p&gt;&amp;mdash; Aaron Stannard (&amp;#64;Aaronontheweb) &lt;a href="https://twitter.com/Aaronontheweb/status/1591092844827222017?ref_src=twsrc%5Etfw"&gt;November 11, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;.NET 7 で文字列を特定の区切り文字で結合するのに一番速いのは何かという話。&lt;/p&gt;
&lt;!-- https://twitter.com/DaveCallanIE/status/1591799079306203136 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Simple string concatenation in .NET 7 👇🏻&lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/csharp?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#csharp&lt;/a&gt; &lt;a href="https://t.co/wy5BVIEmnN"&gt;pic.twitter.com/wy5BVIEmnN&lt;/a&gt;&lt;/p&gt;&amp;mdash; Dave Callan (&amp;#64;DaveCallanIE) &lt;a href="https://twitter.com/DaveCallanIE/status/1591799079306203136?ref_src=twsrc%5Etfw"&gt;November 13, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2022-11-07: Performance improvements in .NET 7, Uno Platform 4.6, WCF Upgrade Assistant</title>
			<link>/2022/11/07/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2022/11/07/updates</guid>
			<pubDate>Mon, 07 Nov 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="agenda.net-conf-2022"&gt;Agenda - .NET Conf 2022&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.dotnetconf.net/agenda"&gt;https://www.dotnetconf.net/agenda&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;11/9 (日本時間) から 11/11 まで行われる .NET Conf 2022 のセッションテーブル。&lt;/p&gt;
&lt;h3 id="net-conf-2022-recap-event-microsoft-japan-community-event-tour-series-microsoft-events"&gt;.NET Conf 2022 Recap Event 東京 ~ Microsoft Japan Community Event Tour Series - Microsoft Events&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://msevents.microsoft.com/event?id=3219140458"&gt;https://msevents.microsoft.com/event?id=3219140458&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;12/6 (火) に行われる .NET Conf 2022 のおさらいイベントが東京で開催される。会場は日本マイクロソフト本社、参加費は無料となっている。&lt;/p&gt;
&lt;p&gt;「午後の部」と「夜の部」の二部構成で「午後の部」では .NET Conf 2022 で発表された新しい技術の紹介や解説、「夜の部」では懇親会や Ask the Speaker、コミュニティーによるライトニングトークなどが予定されている。&lt;/p&gt;
&lt;h3 id="create-your.net-portfolio-in-the.net-conf-student-zone.net-blog"&gt;Create your .NET portfolio in the .NET Conf student zone - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-conf-2022-student-zone/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-conf-2022-student-zone/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Conf で学生向けのライブストリーミングイベント .NET Student Zone を行うという紹介。&lt;/p&gt;
&lt;p&gt;.NET Student Zone では .NET に関することを学べるセッションが配信される。またそれに合わせて .NET Conf Student Zone Cloud Skills Challenge というチャレンジも開催され、参加者(学生)の中から3名に SWAG (景品) が当たるキャンペーンも実施される。&lt;/p&gt;
&lt;h3 id="performance-improvements-in-asp.net-core-7.net-blog"&gt;Performance improvements in ASP.NET Core 7 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/performance-improvements-in-aspnet-core-7/"&gt;https://devblogs.microsoft.com/dotnet/performance-improvements-in-aspnet-core-7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 の ASP.NET Core のパフォーマンス改善についての解説記事。&lt;/p&gt;
&lt;p&gt;ベンチマークと共に様々な性能向上について解説している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;サーバー全般
&lt;ul&gt;
&lt;li&gt;メモリープールパーティショニング&lt;/li&gt;
&lt;li&gt;Windows の IO プールをマネージド実装を利用するよう切り替え&lt;/li&gt;
&lt;li&gt;接続クローズ時の例外の削減&lt;/li&gt;
&lt;li&gt;PoolingAsyncValueTaskMethodBuilder の適用の拡大&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HTTP/2
&lt;ul&gt;
&lt;li&gt;ロック競合の削減&lt;/li&gt;
&lt;li&gt;デフォルトウィンドウサイズの拡大&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HTTP/3
&lt;ul&gt;
&lt;li&gt;QPack 処理の改善&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;その他
&lt;ul&gt;
&lt;li&gt;SignalR&lt;/li&gt;
&lt;li&gt;認証&lt;/li&gt;
&lt;li&gt;HttpResult&lt;/li&gt;
&lt;li&gt;IndexOfAny&lt;/li&gt;
&lt;li&gt;フィルター&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="net-7-performance-improvements-in.net-maui.net-blog"&gt;.NET 7 Performance Improvements in .NET MAUI - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-7-performance-improvements-in-dotnet-maui/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-7-performance-improvements-in-dotnet-maui/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 での .NET MAUI のパフォーマンス改善について解説記事。&lt;/p&gt;
&lt;p&gt;起動時間とアプリケーションサイズ、スクロール時のパフォーマンスなどが改善されていることを掘り下げている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;スクロールとレイアウトのパフォーマンス改善
&lt;ul&gt;
&lt;li&gt;LOLs/秒&lt;/li&gt;
&lt;li&gt;&lt;code&gt;View.Context&lt;/code&gt; の繰り返し呼び出しを避ける&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CollectionView&lt;/code&gt; 内での &lt;code&gt;View.Context&lt;/code&gt; 呼び出しを避ける&lt;/li&gt;
&lt;li&gt;レイアウト中の JNI 呼び出しを削減&lt;/li&gt;
&lt;li&gt;RTL とダークモードの値をキャッシュする&lt;/li&gt;
&lt;li&gt;レイアウト中の &lt;code&gt;IView[]&lt;/code&gt; 生成を避ける&lt;/li&gt;
&lt;li&gt;RTL レイアウト計算をプラットフォームにゆだねる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CollectionView&lt;/code&gt; のその他注意事項&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;起動時のパフォーマンス改善
&lt;ul&gt;
&lt;li&gt;Android NDK コンパイラーフラグ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DateTimeOffset.Now&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ColorStateList(int[][],int[])&lt;/code&gt; を避ける&lt;/li&gt;
&lt;li&gt;.NET MAUI の AOT プロファイルの改善&lt;/li&gt;
&lt;li&gt;Java 相互運用でのより良い文字列比較&lt;/li&gt;
&lt;li&gt;XAML コンパイルの改善&lt;/li&gt;
&lt;li&gt;Windows 上での ReadyToRun のデフォルト有効化&lt;/li&gt;
&lt;li&gt;macOS 上でのデュアルアーキテクチャーのデフォルト有効化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RegexOptions.Compiled&lt;/code&gt; についての注意&lt;/li&gt;
&lt;li&gt;Mono のインタープリターの改善&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;アプリケーションサイズの改善
&lt;ul&gt;
&lt;li&gt;Android の DebuggerSupport トリマー値の修正&lt;/li&gt;
&lt;li&gt;R8 Java Code Shrinker 改善&lt;/li&gt;
&lt;li&gt;Kotlin 関連ファイルの除外機能&lt;/li&gt;
&lt;li&gt;Generics の AOT 出力の改善&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ツールとドキュメント
&lt;ul&gt;
&lt;li&gt;.NET MAUI アプリケーションのプロファイリング&lt;/li&gt;
&lt;li&gt;起動時間の計測&lt;/li&gt;
&lt;li&gt;アプリケーションサイズのレポートツール&lt;/li&gt;
&lt;li&gt;試験的または高度な設定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="uno-platform-4.6-hello.net-7"&gt;Uno Platform 4.6: Hello .NET 7!&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://platform.uno/blog/uno-platform-4-6-hello-net-7/"&gt;https://platform.uno/blog/uno-platform-4-6-hello-net-7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Uno Platform 4.6 で .NET 7 に対応するというアナウンス。&lt;/p&gt;
&lt;p&gt;記事では Uno Platform 4.6 での改善点として .NET 7 および Visual Studio 17.4 のサポート、ライブラリーリソース、SVG サポート、Android 13 サポート、WebAssembly Bootstrap 7.0、ASP.NET Core ホスティングプロジェクトについて紹介している。&lt;/p&gt;
&lt;h3 id="bring-wcf-apps-to-the-latest.net-with-corewcf-and-upgrade-assistant.net-blog"&gt;Bring WCF apps to the latest .NET with CoreWCF and Upgrade Assistant - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/migration-wcf-to-corewcf-upgrade-assistant/"&gt;https://devblogs.microsoft.com/dotnet/migration-wcf-to-corewcf-upgrade-assistant/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework の WCF プロジェクトを CoreWCF へと移行するためのアップグレードアシスタントを紹介する記事。&lt;/p&gt;
&lt;p&gt;記事ではサンプルプロジェクトを元に、ツールのインストールと実行、実行される移行処理についてを説明している。自動アップグレードで非サポートのものとして Web ベースや .svc ファイルを使用したサービス、XML を使用した動作構成、NetTcpBinding または HTTP ベース以外のバインディングといったものがあるとのこと。&lt;/p&gt;
&lt;h3 id="announcing.net-community-toolkit-v8.1.0-preview-1.net-blog"&gt;Announcing .NET Community Toolkit v8.1.0 Preview 1 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-dotnet-community-toolkit-v810-preview-1/"&gt;https://devblogs.microsoft.com/dotnet/announcing-dotnet-community-toolkit-v810-preview-1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Community Toolkit v8.1.0 Preview 1 のアナウンス。&lt;/p&gt;
&lt;p&gt;MVVM Toolkit のソースジェネレーターで ObservableProperty に対するカスタム属性のサポートやソースジェネレーター自体の最適化、&lt;code&gt;IObservable&amp;lt;T&amp;gt;&lt;/code&gt; メッセンジャー拡張、.NET 7 と C# 11 の対応 (&lt;code&gt;Ref&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;NullableRef&amp;lt;T&amp;gt;&lt;/code&gt; など)、その他様々な改善が含まれている。&lt;/p&gt;
&lt;h3 id="net-interactive-notebooks-is-now-polyglot-notebooks.net-blog"&gt;.NET Interactive Notebooks is now Polyglot Notebooks! - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-interactive-notebooks-is-now-polyglot-notebooks/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-interactive-notebooks-is-now-polyglot-notebooks/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Interactive Notebooks が Polyglot Notebooks に名称変更したというアナウンス。&lt;/p&gt;
&lt;p&gt;Visual Studio Code 上で利用できる拡張である .NET Interactive Notebooks が Polyglot Notebooks に名称変更された。&lt;/p&gt;
&lt;p&gt;.NET Interactive Notebooks は .NET 以外の言語のサポートが増えてきたことで名前が適切ではなくなってきたため、Polyglot Notebooks に名称変更することとなった。ただしエンジンは引き続き .NET Interactive であり、Visual Studio Code 拡張の名前が変更されただけであるとのこと。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="neue-cc-memorypack.net-7c-11"&gt;neue cc - MemoryPackにみる .NET 7/C# 11世代のシリアライザー最適化技法&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://neue.cc/2022/11/04_memorypack.html"&gt;https://neue.cc/2022/11/04_memorypack.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;バイナリーシリアライザーの MemoryPack の実装を元に .NET 7 / C# 11 世代でのシリアライザーの最適化テクニックについて解説している記事。&lt;/p&gt;
&lt;h3 id="skiasharp-hatched-fills-with-skshader"&gt;SkiaSharp: Hatched fills with SKShader&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://bclehmann.github.io/2022/11/05/HatchingWithSKShader.html"&gt;https://bclehmann.github.io/2022/11/05/HatchingWithSKShader.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SkiaSharp で SKShader を使用してハッチングの塗りつぶしを行う方法についての記事。&lt;/p&gt;
&lt;h3 id="skiasharp-unmasking-with-skcolorfilter"&gt;SkiaSharp: Unmasking with SKColorFilter&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://bclehmann.github.io/2022/11/06/UnmaskingWithSKColorFilter.html"&gt;https://bclehmann.github.io/2022/11/06/UnmaskingWithSKColorFilter.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SkiaSharp で SKColorFilter を使用して色を変更する方法についての記事。&lt;/p&gt;
&lt;h3 id="switch-tenants-in-an-asp.net-core-app-using-azure-ad-with-multi-tenants"&gt;Switch tenants in an ASP.NET Core app using Azure AD with multi tenants&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://damienbod.com/2022/10/31/switch-tenants-in-an-asp-net-core-app-using-azure-ad-with-multi-tenants/"&gt;https://damienbod.com/2022/10/31/switch-tenants-in-an-asp-net-core-app-using-azure-ad-with-multi-tenants/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure AD のマルチテナントアプリケーションとなる ASP.NET Core アプリケーションでテナントを切り替える方法についての記事。&lt;/p&gt;
&lt;h3 id="c.netvector-classif.then.else-qiita"&gt;C# .NETのVector classで条件分岐(if..then..else) - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/C5D5E5/items/dd9da77e24752ff50cec"&gt;https://qiita.com/C5D5E5/items/dd9da77e24752ff50cec&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Vector を利用した際の条件分岐を行うための &lt;code&gt;Vector.ConditionalSelect&lt;/code&gt; についての記事。&lt;/p&gt;
&lt;h3 id="dotnet.net-performance-tracing-for-winui-uno-and-maui-applications-nicks.net-travels"&gt;Dotnet (.NET) Performance Tracing for WinUI, Uno and Maui Applications - Nick's .NET Travels&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://nicksnettravels.builttoroam.com/dotnet-trace/"&gt;https://nicksnettravels.builttoroam.com/dotnet-trace/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;dotnet-trace と dotnet-dsrouter を使用して WinUI や Uno Platform, MAUI のアプリケーションのトレースを取得する方法についての記事。&lt;/p&gt;
&lt;h3 id="async-mutex-davids-blog"&gt;Async Mutex | David’s Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dfederm.com/async-mutex/"&gt;https://dfederm.com/async-mutex/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Mutex をラップして async/await で利用できるようにする AsyncMutex を実装するという記事。&lt;/p&gt;
&lt;h3 id="cbyte16-qiita"&gt;[C#]デバッグ時とかに欲しくなるbyte配列の16進ダンプ - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/amutou/items/6a0954c7bf190127f3ef"&gt;https://qiita.com/amutou/items/6a0954c7bf190127f3ef&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;od コマンドやバイナリエディターのような16進数ダンプを出力するコード。&lt;/p&gt;
&lt;h3 id="c-qiita"&gt;C#の基本的な数値型同士の計算って何型になるんだっけ？ - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/full_deviation/items/a1e01871c33673fd66af"&gt;https://qiita.com/full_deviation/items/a1e01871c33673fd66af&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# の数値型 (sbyte,byte,ushort,short,uint,int...) をそれぞれ組み合わせて計算したときに結果の型を調べたという記事。&lt;/p&gt;
&lt;h3 id="containerized-blazor-microsoft-ponders-new-client-side-hosting-visual-studio-magazine"&gt;Containerized Blazor: Microsoft Ponders New Client-Side Hosting -- Visual Studio Magazine&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://visualstudiomagazine.com/articles/2022/11/02/blazor-docker.aspx"&gt;https://visualstudiomagazine.com/articles/2022/11/02/blazor-docker.aspx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor WebAssembly をコンテナー化できるようにすることを検討している話についての記事。Blazor Server と異なり静的にビルドされ ASP.NET Core は不要となるため、手法として ASP.NET Core と同じ必要がない。&lt;/p&gt;
&lt;h3 id="net-annotated-monthly-november-2022-the.net-tools-blog"&gt;.NET Annotated Monthly | November 2022 | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/11/02/net-annotated-monthly-november-2022/"&gt;https://blog.jetbrains.com/dotnet/2022/11/02/net-annotated-monthly-november-2022/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JetBrains による .NET 関連の情報まとめ 2022年11月号。&lt;/p&gt;
&lt;h3 id="visual-studio-visual-studio-visual-studio-microsoft-ignite"&gt;Visual Studio が Visual Studio を使って Visual Studio を構築する方法 - Microsoft Ignite - セッション カタログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ignite.microsoft.com/ja-JP/sessions/bafdbcbc-f9e3-49ed-ac0b-fd1dd8cbc155?source=sessions"&gt;https://ignite.microsoft.com/ja-JP/sessions/bafdbcbc-f9e3-49ed-ac0b-fd1dd8cbc155?source=sessions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio を開発しているチームが Visual Studio を開発するために行っていることについてのセッション。&lt;/p&gt;
&lt;p&gt;Visual Studio のような超巨大なプロジェクトを効率的にビルドするための内部の仕組み、自動テストやパフォーマンスのトラッキングなど。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="autumnsky1010soundmaker-you-can-do-the-following-content-with-this-library-and-make-the-sound-of-chiptune-export-sound-to-a-file-of-wave-format"&gt;AutumnSky1010/SoundMaker: You can do The following content with this library and make the sound of chiptune export sound to a file of wave format.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/AutumnSky1010/SoundMaker"&gt;https://github.com/AutumnSky1010/SoundMaker&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;チップチューン的な音楽を生成/出力するライブラリー。&lt;/p&gt;
&lt;!-- https://twitter.com/dtb_autumnsky/status/1588806133275594752?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="ja" dir="ltr"&gt;C#で動画のような音を生成できるライブラリ「SoundMaker」を公開しました。&lt;br&gt;(まだ碌にテストが出来てないのでバージョンは0.2.0です。)&lt;br&gt;&lt;br&gt;リプ欄のNuGet・GitHubからインストール出来るのでぜひ使ってみてください！ &lt;a href="https://t.co/5LnRMCXQFh"&gt;pic.twitter.com/5LnRMCXQFh&lt;/a&gt;&lt;/p&gt;&amp;mdash; 🍠秋空🍠 (&amp;#64;DTB_AutumnSky) &lt;a href="https://twitter.com/DTB_AutumnSky/status/1588806133275594752?ref_src=twsrc%5Etfw"&gt;November 5, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="tompazoureknaturalsort.extension-extension-method-for-stringcomparison-that-adds-support-for-natural-sorting-e.g.abc1-abc2-abc10-instead-of-abc1-abc10-abc2"&gt;tompazourek/NaturalSort.Extension: 🔀 Extension method for StringComparison that adds support for natural sorting (e.g. &amp;quot;abc1&amp;quot;, &amp;quot;abc2&amp;quot;, &amp;quot;abc10&amp;quot; instead of &amp;quot;abc1&amp;quot;, &amp;quot;abc10&amp;quot;, &amp;quot;abc2&amp;quot;).&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/tompazourek/NaturalSort.Extension"&gt;https://github.com/tompazourek/NaturalSort.Extension&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;エクスプローラーのファイル名のソートで使用されている自然順ソートを実現するための拡張ライブラリー。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/kaorumori/items/712f87a25a3930068c3e"&gt;Blazor WebAssemblyでファイル名を自然順でソート - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="devloopedavatar-a-modern-compile-time-generated-interceptionproxy-library"&gt;devlooped/avatar: A modern compile-time generated interception/proxy library&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/devlooped/avatar"&gt;https://github.com/devlooped/avatar&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Source Generator を使用することでコンパイル時にプロキシーを生成するインターセプトライブラリー。 Source Generator を使用していることで IL の Emit (動的コード生成) が行えない環境でも動作することが特徴。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/mngreen/items/35e45714b1e7540ffd62"&gt;Moqで利用されているAvatarライブラリについて少しだけ調べてみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="jinekconsolonia-a-cross-platform-ui-framework-for.net"&gt;jinek/Consolonia: A cross-platform UI framework for .NET.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/jinek/Consolonia"&gt;https://github.com/jinek/Consolonia&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Avalonia UI のコンソール上での実装。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=yyVuvjYycCo"&gt;Avalonia UI app running in text console using Consolonia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="pierre3plantumlclassdiagramgenerator-this-is-a-generator-to-create-a-class-diagram-of-plantuml-from-the-c-source-code"&gt;pierre3/PlantUmlClassDiagramGenerator: This is a generator to create a class-diagram of PlantUML from the C# source code.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/pierre3/PlantUmlClassDiagramGenerator"&gt;https://github.com/pierre3/PlantUmlClassDiagramGenerator&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# のソースコードを元に PlantUML のクラス図を生成するツール。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/pierusan2010/items/fbaa8fdf9b7f998bf56f"&gt;C#のソースコードからPlantUMLのクラス図を生成するツール PlantUmlClassDiagramGenerator 1.3.0 をリリースしました！ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="ststeigerpdfsharpcore-port-of-the-pdfsharp-library-to.net-core-largely-removed-gdi-only-missing-getfontdata-which-can-be-replaced-with-freetype2"&gt;ststeiger/PdfSharpCore: Port of the PdfSharp library to .NET Core - largely removed GDI+ (only missing GetFontData - which can be replaced with freetype2)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/ststeiger/PdfSharpCore"&gt;https://github.com/ststeiger/PdfSharpCore&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PDF を生成するライブラリー。PdfSharp を .NET Core 向けに改修されたもの。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/masmgr/articles/f8557ade054b71"&gt;PdfSharpCore の紹介&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="optimize-xxhash3-by-xoofx-pull-request-77756-dotnetruntime"&gt;Optimize XxHash3 by xoofx · Pull Request #77756 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/77756"&gt;https://github.com/dotnet/runtime/pull/77756&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;XxHash3 を高速化したという PR。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/runtime/pull/77881"&gt;Optimize XxHash3 on ARM platform by xoofx · Pull Request #77881 · dotnet/runtime&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="add-xxhash128-by-xoofx-pull-request-77944-dotnetruntime"&gt;Add XxHash128 by xoofx · Pull Request #77944 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/77944"&gt;https://github.com/dotnet/runtime/pull/77944&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;XxHash128 の実装を追加する提案と PR&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/runtime/issues/77885"&gt;[API Proposal]: XxHash128 · Issue #77885 · dotnet/runtime&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2022-11-01: AWS App Runner now supports .NET managed runtime, AWS Toolkit for .NET Refactoring, Copy Nice</title>
			<link>/2022/11/01/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2022/11/01/updates</guid>
			<pubDate>Tue, 01 Nov 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="aws-app-runner-launches-support-for-php-go.net-and-ruby-managed-runtimes"&gt;AWS App Runner launches support for PHP, Go, .Net, and Ruby managed runtimes&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/jp/about-aws/whats-new/2022/10/aws-app-runner-support-php-go-dot-net-ruby-managed-runtimes/"&gt;https://aws.amazon.com/jp/about-aws/whats-new/2022/10/aws-app-runner-support-php-go-dot-net-ruby-managed-runtimes/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AWS App Runner で .NET を含む複数の言語のランタイムがサポートされた。&lt;/p&gt;
&lt;p&gt;AWS App Runner はイメージまたは設定ファイルをソースコード共に用意することでビルド、デプロイ、実行まで簡単に行える仕組み。ランタイムとして .NET 6 がサポートされ、例として以下のような設定ファイルで ASP.NET Core アプリケーションをビルド、デプロイできるとのこと。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;version: 1.0
runtime: dotnet6
build:
  commands:
    build:
      – dotnet publish -c Release -o out
run:
  command: dotnet out/HelloWorldDotNetApp.dll
  network:
    port: 5000
    env: APP_PORT
  env:
    – name: ASPNETCORE_URLS
      value: &amp;quot;http://*:5000&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="introducing-aws-toolkit-for.net-refactoring-a-new-visual-studio-extension"&gt;Introducing AWS Toolkit for .NET Refactoring, a new Visual Studio extension&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/jp/about-aws/whats-new/2022/10/aws-toolkit-net-refactoring-visual-studio-extension/"&gt;https://aws.amazon.com/jp/about-aws/whats-new/2022/10/aws-toolkit-net-refactoring-visual-studio-extension/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AWS Toolkit for .NET Refactoring という Visual Studio 拡張がリリースされた。&lt;/p&gt;
&lt;p&gt;これはレガシー .NET Framework アプリケーションをクラウド環境向けに更新するための機能を提供する拡張。.NET Core/.NET に移行するにあたっての依存関係や API 利用をスキャンや、IIS の web.config から Linux 環境で動作させるためのコードの変更、 AWS へのデプロイ支援といったことを行える。&lt;/p&gt;
&lt;h3 id="copy-with-proper-indentation-visual-studio-blog"&gt;Copy with proper indentation - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/copy-with-proper-indentation/"&gt;https://devblogs.microsoft.com/visualstudio/copy-with-proper-indentation/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;コードのインデントを正しく維持した形でコピーできるようにする実験的な Visual Studio 拡張について紹介している記事。&lt;/p&gt;
&lt;p&gt;この拡張を利用すると、ネストしたコードブロックの途中のブロックをコピーした場合でもインデントを整えて維持された状態にできる。メッセージングアプリやブログなどにペーストする際に一行目のみインデントが失われ、それ以降がインデントされすぎているといった状態を防ぐことができる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=MadsKristensen.CopyNice"&gt;Copy Nice - Visual Studio Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="net-framework-october-2022-cumulative-update-preview.net-blog"&gt;.NET Framework October 2022 Cumulative Update Preview - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-framework-october-2022-cumulative-update-preview/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-framework-october-2022-cumulative-update-preview/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework の2022年10月の累積アップデートのプレビューがリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは WPF をはじめとしたいくつかの品質改善の更新が含まれている。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="making-animationevent-safe-for-the-coreclr-garbage-collector-unity-blog"&gt;Making AnimationEvent safe for the CoreCLR garbage collector | Unity Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.unity.com/technology/making-animationevent-safe-for-the-coreclr-garbage-collector"&gt;https://blog.unity.com/technology/making-animationevent-safe-for-the-coreclr-garbage-collector&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unity を CoreCLR で動作させる上で AnimationEvent を CoreCLR の GC と共に統合して動かすために行ったことについての記事。&lt;/p&gt;
&lt;p&gt;速度のために Blittable にしたこと、GCHandle を再利用すること、それらのコードが Mono, IL2CPP で CoreCLR と同等の速度で動くように修正したことなど。&lt;/p&gt;
&lt;h3 id="visual-studio-2022-tech.guitarrapc.com"&gt;Visual Studio 2022 で使っている拡張機能 - tech.guitarrapc.cóm&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://tech.guitarrapc.com/entry/2022/10/27/023608"&gt;https://tech.guitarrapc.com/entry/2022/10/27/023608&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 で利用できる拡張機能の紹介記事。エディターからビルド状況の表示など様々な拡張を紹介している。&lt;/p&gt;
&lt;h3 id="blazor-wasm-c-c"&gt;Blazor Wasm 実動作デモはじめました | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2022/10/blazorwasmdemo/"&gt;https://ufcpp.net/blog/2022/10/blazorwasmdemo/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ソートについての記事で動作デモを Blazor WebAssembly で作り直したという記事。&lt;/p&gt;
&lt;h3 id="net-16-jsakamoto"&gt;複数の .NET プロジェクトに対し、共通の1箇所で同じバージョン情報を設定する、6 つの方法 | &amp;#64;jsakamoto&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devadjust.exblog.jp/29404286/"&gt;https://devadjust.exblog.jp/29404286/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ソリューションなどに含まれる複数の .NET プロジェクトのバージョン情報などを一か所から共通して設定できるようにする方法を紹介している記事。&lt;/p&gt;
&lt;p&gt;共通して設定する方法として記事では6つの手法を紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Directory.Build.props&lt;/li&gt;
&lt;li&gt;props の Import&lt;/li&gt;
&lt;li&gt;AssemblyFileVersion を含むソースコードのリンク&lt;/li&gt;
&lt;li&gt;ファイルからの読み込み&lt;/li&gt;
&lt;li&gt;dotnet build の引数による指定&lt;/li&gt;
&lt;li&gt;環境変数によるビルド時の指定&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="opensearch.netga"&gt;OpenSearchの.NETクライアントがGAになったので使ってみる&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/shimat/articles/d2ae99acaf022f"&gt;https://zenn.dev/shimat/articles/d2ae99acaf022f&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Amazon OpenSearch (旧 Elasticsearch Service) の .NET クライアントライブラリーについての記事。&lt;/p&gt;
&lt;p&gt;Elasticsearch のクライアントライブラリーは v7.14 以降 OpenSearch に接続できなくなったため、OpenSearch によるクライアントライブラリーが待たれていた。今回リリースされた .NET 版クライアントライブラリーの使用方法と使用感について。&lt;/p&gt;
&lt;h3 id="build-your-own-oauth-2.0-server-and-openid-connect-provider-in-asp.net-core-6.0"&gt;Build your own OAuth 2.0 Server and OpenId Connect Provider in ASP.NET Core 6.0&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/mohammedahmed/build-your-own-oauth-20-server-and-openid-connect-provider-in-aspnet-core-60-1g1m"&gt;https://dev.to/mohammedahmed/build-your-own-oauth-20-server-and-openid-connect-provider-in-aspnet-core-60-1g1m&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 の ASP.NET Core で OAuth 2.0 サーバーと OpenId Connect Provider を独自実装してみるという記事。&lt;/p&gt;
&lt;h3 id="managed-pointers-span-ref-struct-c11-ref-fields-and-the-scoped-keyword-ndepend"&gt;Managed pointers, Span, ref struct, C#11 ref fields and the scoped keyword - NDepend&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.ndepend.com/managed-pointers-span-ref-struct-c11-ref-fields-and-the-scoped-keyword"&gt;https://blog.ndepend.com/managed-pointers-span-ref-struct-c11-ref-fields-and-the-scoped-keyword&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ポインターから Span、ref 構造体とフィールドといったものをおさらいして解説している記事。&lt;/p&gt;
&lt;h3 id="automatically-version-and-release.net-application"&gt;Automatically version and release .Net Application&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.antosubash.com/posts/automatic-version-and-release"&gt;https://blog.antosubash.com/posts/automatic-version-and-release&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Versionize というツールを使用して GitHub Actions で自動バージョニングを行ってリリースする方法についての記事。&lt;/p&gt;
&lt;p&gt;記事では Husky.Net を使用して Git の pre-commit フックでコメントの lint を行う方法についても触れている。&lt;/p&gt;
&lt;h3 id="learning-series-get-started-with-github-in-visual-studio"&gt;Learning Series: Get started with GitHub in Visual Studio&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/learn-github-in-visual-studio-learning-series/"&gt;https://devblogs.microsoft.com/visualstudio/learn-github-in-visual-studio-learning-series/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio を使用して GitHub を学ぶメールシリーズの紹介記事。&lt;/p&gt;
&lt;h3 id="net7-linq-qiita"&gt;.NET7 で LINQ の集計関数がめっちゃ高速化した話 (あるいは、ベクトル化の難しさ) - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/Kujiro/items/dc90366325fffcd3675d"&gt;https://qiita.com/Kujiro/items/dc90366325fffcd3675d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 で高速化した LINQ の集計関数 (Sum, Max, Average) の具体的な実装について解説している記事。&lt;/p&gt;
&lt;h3 id="project-volterra-windows-2023"&gt;Project Volterra 改め Windows 開発キット 2023 を購入した - しばやん雑記&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.shibayan.jp/entry/20221027/1666807751"&gt;https://blog.shibayan.jp/entry/20221027/1666807751&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows 開発キット 2023 のレビュー記事。&lt;/p&gt;
&lt;h3 id="windows-2023-developersio"&gt;Windows 開発キット 2023を買ってみた | DevelopersIO&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.classmethod.jp/articles/try-windows-dev-kit-2023-project-volterra/"&gt;https://dev.classmethod.jp/articles/try-windows-dev-kit-2023-project-volterra/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows 開発キット 2023 のレビュー記事。PowerShell や AWS のツールといったものの動作についても触れている。&lt;/p&gt;
&lt;h3 id="fighting-with-nullable-reference-types-in-razor-pages"&gt;Fighting with nullable reference types in Razor Pages&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/fighting-with-nullable-reference-types-in-razor-pages/"&gt;https://andrewlock.net/fighting-with-nullable-reference-types-in-razor-pages/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Razor ページで null 参照型との付き合い方についての記事。&lt;/p&gt;
&lt;p&gt;Razor は外部から値が差し込まれるといった都合もあり、警告や不適切な握りつぶしでは NullReferenceException の可能性を高めてしまうためどのようにするのがよいのかという話。記事では C# 11 の &lt;code&gt;required&lt;/code&gt; を使用することである程度緩和できる案などを紹介している。&lt;/p&gt;
&lt;h3 id="csqlite"&gt;C#でSQLiteをマルチスレッドで利用する&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/kn64872/articles/90ae674d5332a7"&gt;https://zenn.dev/kn64872/articles/90ae674d5332a7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;System.Data.SQLite をマルチスレッドで利用する際の挙動について調べている記事。&lt;/p&gt;
&lt;h3 id="slaying-zombie-no-repro-crashes-with-infer.net-blog"&gt;Slaying Zombie ‘No Repro’ Crashes with Infer# - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/slaying-zombie-no-repo-crashes-with-infersharp/"&gt;https://devblogs.microsoft.com/dotnet/slaying-zombie-no-repo-crashes-with-infersharp/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;静的なコード分析を行う Infer# を使用して、見つけにくいリソースリークやセキュリティー問題を検出する紹介記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/microsoft/infersharp"&gt;microsoft/infersharp: Infer# is an interprocedural and scalable static code analyzer for C#. Via the capabilities of Facebook's Infer, this tool detects null dereferences, resource leaks, and thread-safety violations. It also performs taint flow tracking to detect critical security vulnerabilities like SQL injections.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="corvus-dotnetcorvus.uritemplates-low-allocation-uri-template-parsing-and-resolution-supporting-the-tavis.uritemplates-api"&gt;corvus-dotnet/Corvus.UriTemplates: Low-allocation URI Template parsing and resolution, supporting the Tavis.UriTemplates API.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/corvus-dotnet/corvus.uritemplates"&gt;https://github.com/corvus-dotnet/corvus.uritemplates&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;URI Template (RFC 6570) を取り扱うアロケーションの少ないライブラリー。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://endjin.com/blog/2022/10/high-performance-csharp-uritemplates"&gt;High Performance UriTemplate resolution with low-allocation C# | endjin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/mairacw/status/1585789100879069185?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;It&amp;#39;s official now! &lt;a href="https://twitter.com/dotnet?ref_src=twsrc%5Etfw"&gt;&amp;#64;dotnet&lt;/a&gt; Current releases have been renamed to Standard Term Support and the changes are live on the site&lt;a href="https://t.co/d25vW0BnlG"&gt;https://t.co/d25vW0BnlG&lt;/a&gt; &lt;a href="https://t.co/oz3g5oVQIc"&gt;pic.twitter.com/oz3g5oVQIc&lt;/a&gt;&lt;/p&gt;&amp;mdash; Maira Wenzel (&amp;#64;mairacw) &lt;a href="https://twitter.com/mairacw/status/1585789100879069185?ref_src=twsrc%5Etfw"&gt;October 28, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;.NET の Current リリース (1年サポート) は Standard Term Support という名前に変わったという話。&lt;/p&gt;
&lt;!-- https://twitter.com/egorbo/status/1585714639806947331?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;.NET8 now instruments hot AOT code (re-jits it) and in general instruments only hot code - we already can see nice benefits from that (RPS🔼, Start-time🔽)🙃&lt;a href="https://t.co/WvS3IkZDxI"&gt;https://t.co/WvS3IkZDxI&lt;/a&gt; (merged) &lt;a href="https://t.co/mknbA6sPPl"&gt;pic.twitter.com/mknbA6sPPl&lt;/a&gt;&lt;/p&gt;&amp;mdash; Egor Bogatov (&amp;#64;EgorBo) &lt;a href="https://twitter.com/EgorBo/status/1585714639806947331?ref_src=twsrc%5Etfw"&gt;October 27, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;.NET 8 ではホットな AOT コードを計測(再 JIT)し、計測もホットなコードのみを対象とするようにしたことで RPS と起動時間が改善するという話。&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2022-10-25: .NET MAUI support for .NET 7 RC 2, OpenSilver 1.1, Windows Dev Kit 2023</title>
			<link>/2022/10/25/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2022/10/25/updates</guid>
			<pubDate>Tue, 25 Oct 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="announcing.net-maui-support-for.net-7-release-candidate-2.net-blog"&gt;Announcing .NET MAUI support for .NET 7 Release Candidate 2 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-maui-rc2/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-maui-rc2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 RC 2 向けの .NET MAUI サポートがリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは iOS 16 に対応した Xcode 14 のサポートが行われており、Visual Studio 17.4 Preview 4 で利用可能となる。またこのバージョンはプロダクション環境での利用がサポート対象となる。&lt;/p&gt;
&lt;h3 id="opensilver-1.1-released"&gt;OpenSilver 1.1 Released!&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.opensilver.net/announcements/opensilver1-1.aspx"&gt;https://www.opensilver.net/announcements/opensilver1-1.aspx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Silverlight の互換を目指す、WebAssembly 上で動作するオープンソース実装 OpenSilver の 1.1 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは100を超える Silverlight の機能のサポートの追加、Telerik UI をはじめとした様々なサードパーティーライブラリーのサポートの追加、最大3倍のパフォーマンス向上といった改善が行われている。&lt;/p&gt;
&lt;p&gt;また、来年初頭にリリースを予定している 2.0 では VB.NET のサポートを追加するとのこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://visualstudiomagazine.com/articles/2022/10/17/opensilver-1-1.aspx"&gt;OpenSilver Gets Closer to Open Source Parity with Long-Dead Microsoft Silverlight -- Visual Studio Magazine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.infoq.com/news/2022/10/opensilver-1-1-silverlight/"&gt;OpenSilver 1.1 Promises 99% of Code Compatibility with Silverlight Applications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="available-today-windows-dev-kit-2023-aka-project-volterra-windows-developer-blog"&gt;Available today: Windows Dev Kit 2023 aka Project Volterra - Windows Developer Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blogs.windows.com/windowsdeveloper/2022/10/24/available-today-windows-dev-kit-2023-aka-project-volterra/"&gt;https://blogs.windows.com/windowsdeveloper/2022/10/24/available-today-windows-dev-kit-2023-aka-project-volterra/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Arm アーキテクチャー向け Windows の開発キットが Windows Dev Kit 2023 という名前で販売開始となった。&lt;/p&gt;
&lt;p&gt;Windows Dev Kit 2023 は Build 2022 で Project Volterra という名前で発表された開発者向けのキットで、Snapdragon 8cx Gen 3 と 32GB の RAM、512GB の NVMe SSD を備えている。&lt;/p&gt;
&lt;p&gt;オーストラリア、カナダ、中国、フランス、ドイツ、日本、英国、米国で今日から注文が可能となっている。日本では 99,880円 (税込) となる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.microsoft.com/ja-jp/d/windows-%E9%96%8B%E7%99%BA%E3%82%AD%E3%83%83%E3%83%88-2023/94k0p67w7581"&gt;Windows 開発キット 2023 を購入 Arm アプリ開発者向けデスクトップ PC - Microsoft Store&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="release-diagnostics-release-v6.0.351802-dotnetdiagnostics"&gt;Release Diagnostics Release - v6.0.351802 · dotnet/diagnostics&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/diagnostics/releases/tag/v6.0.351802"&gt;https://github.com/dotnet/diagnostics/releases/tag/v6.0.351802&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;dotnet-{dump,monitor,trace} (Diagnostics) の 6.0.351802 がリリースされた。&lt;/p&gt;
&lt;p&gt;dotnet-dump では Linux/macOS での SOS コマンドの拡充をはじめ、いくつかの不具合と改善が含まれている。dotnet-monitor と dotnet-trace では不具合の修正が行われている。&lt;/p&gt;
&lt;h3 id="support-reminder-for-older-versions-of-visual-studio-visual-studio-blog"&gt;Support reminder for older versions of Visual Studio - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/support-reminder-for-older-versions-of-visual-studio/"&gt;https://devblogs.microsoft.com/visualstudio/support-reminder-for-older-versions-of-visual-studio/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;サポートが終了となる Visual Studio についてのリマインダー。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Visual Studio 2012: 2023年1月10日に延長サポートが終了&lt;/li&gt;
&lt;li&gt;Visual Studio 2013: 2024年4月9日に延長サポートが終了&lt;/li&gt;
&lt;li&gt;Visual Studio 2015: 2025年10月14日に延長サポートが終了&lt;/li&gt;
&lt;li&gt;Visual Studio 2017: 2022年4月12日にメインストリームサポートが終了、2027年4月13日に延長サポートが終了 (15.9)&lt;/li&gt;
&lt;li&gt;Visual Studio 2019 (16.9): 2022年10月11日にサポートが終了。引き続き 2019 のサポートを受ける場合には 16.11 への移行が推奨される&lt;/li&gt;
&lt;li&gt;Visual Studio 2019 Preview: 更新終了のため、リリースチャンネルへの移行または 2022 の Preview チャンネルへの移行が推奨される&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;記事では管理者による更新プログラムの管理やサポート終了となったコンポーネントの削除方法といった点についても触れている。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="hello.net-atomicjar"&gt;Hello .NET! - AtomicJar&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.atomicjar.com/2022/10/hello-dotnet/"&gt;https://www.atomicjar.com/2022/10/hello-dotnet/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Testcontainers の .NET 向け実装のメンテナー (AtomicJar 社の人) の Testcontainers の紹介。&lt;/p&gt;
&lt;p&gt;Testcontainers の .NET 向けの実装を行った経緯やリポジトリの成長、xUnit.net との連携例といったものを紹介している。&lt;/p&gt;
&lt;h3 id="dotnet-monitor-enabling-a-diagnostics-sidecar-in-aks"&gt;dotnet-monitor: Enabling a diagnostics sidecar in AKS&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.poppastring.com/blog/dotnetmonitor-enabling-a-diagnostics-sidecar-in-aks"&gt;https://www.poppastring.com/blog/dotnetmonitor-enabling-a-diagnostics-sidecar-in-aks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;dotnet-monitor を AKS (Azure Kubernetes Serivce) の Pod のサイドカーとして動かす方法についての動画。&lt;/p&gt;
&lt;h3 id="net-systems-programming-learned-the-hard-way.pptx"&gt;NET Systems Programming Learned the Hard Way.pptx&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.slideshare.net/petabridge/net-systems-programming-learned-the-hard-waypptx"&gt;https://www.slideshare.net/petabridge/net-systems-programming-learned-the-hard-waypptx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Akka.NET 開発者による .NET の低レベルなコンポーネントに関しての解説スライド。&lt;/p&gt;
&lt;!-- https://twitter.com/aaronontheweb/status/1582836426185486336?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;.NET Systems Programming Learned the Hard Way&lt;br&gt;&lt;br&gt;Recording: &lt;a href="https://t.co/WvVzjp98Ip"&gt;https://t.co/WvVzjp98Ip&lt;/a&gt;&lt;br&gt;Slides: &lt;a href="https://t.co/34ohASQ69w"&gt;https://t.co/34ohASQ69w&lt;/a&gt;&lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/performance?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#performance&lt;/a&gt;&lt;/p&gt;&amp;mdash; Aaron Stannard (&amp;#64;Aaronontheweb) &lt;a href="https://twitter.com/Aaronontheweb/status/1582836426185486336?ref_src=twsrc%5Etfw"&gt;October 19, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="cmemorypack1-spacekey.dev"&gt;[C#]MemoryPackを使ってみたい1 - 基本 | spacekey.dev&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://spacekey.dev/memorypack-1"&gt;https://spacekey.dev/memorypack-1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;バイナリーシリアライザー MemoryPack を使用してみるというシリーズ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://spacekey.dev/memorypack-2"&gt;[C#]MemoryPackを使ってみたい2 - ASP.NET Coreで使う | spacekey.dev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://spacekey.dev/memorypack-3"&gt;[C#]MemoryPackを使ってみたい3 - TypeScriptで使う | spacekey.dev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://spacekey.dev/memorypack-4"&gt;[C#]MemoryPackを使ってみたい4 - MemoryPackableの色々 | spacekey.dev&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="clr-events-go-for-the-nettrace-file-format"&gt;CLR events: go for the nettrace file format!&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://chnasarre.medium.com/clr-events-go-for-the-nettrace-file-format-6b363364c2a3"&gt;https://chnasarre.medium.com/clr-events-go-for-the-nettrace-file-format-6b363364c2a3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CLR から診断イベントを nettrace バイナリーストリームで受け取る方法についての記事。&lt;/p&gt;
&lt;h3 id="wslriderasp.net-kubernetes-1"&gt;WSLとRiderによるASP.NET / Kubernetes開発 (1)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/dynamitecoolguy/articles/4530e1134bcbac"&gt;https://zenn.dev/dynamitecoolguy/articles/4530e1134bcbac&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WSL 上で Rider を実行して ASP.NET Core と Kubernetes を使用した開発をする準備手順を紹介している記事。&lt;/p&gt;
&lt;h3 id="implementing-graphql-api-gateway-in.net-6-hot-chocolate-v12-redis"&gt;Implementing GraphQL API Gateway in .NET 6 + Hot Chocolate v12 + Redis&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dianper.medium.com/implementing-graphql-api-gateway-in-net-6-hot-chocolate-v12-redis-1a0ac12f340c"&gt;https://dianper.medium.com/implementing-graphql-api-gateway-in-net-6-hot-chocolate-v12-redis-1a0ac12f340c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;フェデレーションスキーマを使用した GraphQL API ゲートウェイを .NET 6 と Hot Chocolate v12、Redis を使用して実現する方法についての記事。&lt;/p&gt;
&lt;h3 id="write-your-own-code-coverage-script-for-your.net-projects"&gt;Write your own code coverage script for your .NET projects&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;stefanacimovicMEng/write-your-own-code-coverage-script-for-your-net-projects-e26b621aa0dc"&gt;https://medium.com/&amp;#64;stefanacimovicMEng/write-your-own-code-coverage-script-for-your-net-projects-e26b621aa0dc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET プロジェクトのコードカバレッジを取得してレポートを出力する一連の手順を自作する方法についての記事。&lt;/p&gt;
&lt;h3 id="custom-scaffold-templates-in-asp.net-core-dotnetthoughts"&gt;Custom scaffold templates in ASP.NET Core | dotnetthoughts&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dotnetthoughts.net/custom-scaffold-templates-in-asp-net-core/"&gt;https://dotnetthoughts.net/custom-scaffold-templates-in-asp-net-core/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core MVC のテンプレートをプロジェクトレベルでカスタマイズする方法についての記事。&lt;/p&gt;
&lt;h3 id="samapi-gatewayawsserverlessfunction-qiita"&gt;SAMを使ってAPI-Gateway経由でAWS&lt;span&gt;Serverless&lt;/span&gt;Functionから画像をダウンロードする - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/karuakun/items/e61007864364ab164774"&gt;https://qiita.com/karuakun/items/e61007864364ab164774&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AWS Serverless Application Model を使用してアプリケーションを作成した場合に API Gateway を介したバイナリデータを取り扱う方法についての記事。&lt;/p&gt;
&lt;h3 id="visual-studio-2022-themes-you-should-try-free-themes"&gt;10 Visual Studio 2022 Themes you Should Try (Free Themes!)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.dotnetsafer.com/best-visual-studio-2022-themes/"&gt;https://blog.dotnetsafer.com/best-visual-studio-2022-themes/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 に追加できる10種類のテーマの紹介。&lt;/p&gt;
&lt;h3 id="build-your-own-reverse-proxy"&gt;Build your Own Reverse proxy&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://satish1v.medium.com/build-your-own-reverse-proxy-bf3232e7e5f3"&gt;https://satish1v.medium.com/build-your-own-reverse-proxy-bf3232e7e5f3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;YARP で簡単にリバースプロキシーサーバーを作ってみるという記事。&lt;/p&gt;
&lt;h3 id="error-handling-in-the-field-ayende-rahien"&gt;Error handling in the field - Ayende &amp;#64; Rahien&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ayende.com/blog/198369-A/error-handling-in-the-field"&gt;https://ayende.com/blog/198369-A/error-handling-in-the-field&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;アプリケーションのクラッシュレポート(UnhandledException)を収集するようにしていたところ、最近の Windows Update で WPF の挙動が変わって内部でエラーが出るようになったので無視するようにしたものの微妙という話。&lt;/p&gt;
&lt;h3 id="how-to-send-emails-at-scale-in.net-with-the-azure-communication-service"&gt;How to send emails at scale in .NET with the Azure Communication Service&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/medialesson/how-to-send-emails-at-scale-in-net-with-the-azure-communication-service-14565d84147f"&gt;https://medium.com/medialesson/how-to-send-emails-at-scale-in-net-with-the-azure-communication-service-14565d84147f&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure Communication Service を使用してメール送信を行う方法についての記事。&lt;/p&gt;
&lt;h3 id="net-7-asp.net-core-blazor"&gt;.NET 7 の ASP.NET Core Blazor の新機能試してみよう&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/okazuki/articles/blazor-dotnet7"&gt;https://zenn.dev/okazuki/articles/blazor-dotnet7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 の ASP.NET Core Blazor の新機能を紹介している記事。&lt;/p&gt;
&lt;p&gt;WebAssembly のローディング、bind の修飾子、仮想化の改善、ナビゲーションの改善について触れている。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="sergio0694polysharp-polysharp-provides-generated-source-only-polyfills-for-c-language-features-to-easily-use-all-runtime-agnostic-features-downlevel.add-a-reference-set-your-c-version-to-latest-and-have-fun"&gt;Sergio0694/PolySharp: PolySharp provides generated, source-only polyfills for C# language features, to easily use all runtime-agnostic features downlevel. Add a reference, set your C# version to latest and have fun! 🚀&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/Sergio0694/PolySharp"&gt;https://github.com/Sergio0694/PolySharp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# の言語機能として必要となる属性(&lt;code&gt;CallerArgumentExpression&lt;/code&gt;等)や構造体(&lt;code&gt;Range&lt;/code&gt;等)の型が含まれていないターゲットフレームワーク向けにソースジェネレーターで型を追加生成することで新しい言語機能を利用できるようにするという Polyfill。&lt;/p&gt;
&lt;!-- https://twitter.com/SergioPedri/status/1584482651271856128 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;New weekend project: PolySharp! It includes smart, source-generated polyfills for all C# language features: just reference it, enable C# 11, and enjoy all the new features downlevel, including on .NET Framework, UWP and more! Try it out! 🚀&lt;a href="https://twitter.com/hashtag/csharp?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#csharp&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt;&lt;a href="https://t.co/mPhXuJ8Ns0"&gt;https://t.co/mPhXuJ8Ns0&lt;/a&gt; &lt;a href="https://t.co/juZuMi91dv"&gt;pic.twitter.com/juZuMi91dv&lt;/a&gt;&lt;/p&gt;&amp;mdash; Sergio Pedri (&amp;#64;SergioPedri) &lt;a href="https://twitter.com/SergioPedri/status/1584482651271856128?ref_src=twsrc%5Etfw"&gt;October 24, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="xt0rteddotnet-startup-projects-a-dotnet-tool-to-manage-multiple-visual-studio-startup-projects-for-a-solution"&gt;xt0rted/dotnet-startup-projects: A dotnet tool to manage multiple Visual Studio startup projects for a solution&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/xt0rted/dotnet-startup-projects"&gt;https://github.com/xt0rted/dotnet-startup-projects&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ソリューションで起動する Visual Studio のバージョンを変更するツール。&lt;/p&gt;
&lt;!-- https://twitter.com/xt0rted/status/1581880780745109505?s=12&amp;t=nWJI9WhjD8PixDRVN--Rlw --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Just published a &lt;a href="https://twitter.com/dotnet?ref_src=twsrc%5Etfw"&gt;&amp;#64;dotnet&lt;/a&gt; tool to help manage solutions with multiple &lt;a href="https://twitter.com/VisualStudio?ref_src=twsrc%5Etfw"&gt;&amp;#64;VisualStudio&lt;/a&gt; startup projects.&lt;br&gt;&lt;br&gt;Add a property to each startup project, then run &amp;quot;startup-projects set --vs 2022&amp;quot; against the sln. It&amp;#39;ll create a new .suo file with the right settings.&lt;a href="https://t.co/tBybU6eyR1"&gt;https://t.co/tBybU6eyR1&lt;/a&gt;&lt;/p&gt;&amp;mdash; Brian Surowiec (&amp;#64;xt0rted) &lt;a href="https://twitter.com/xt0rted/status/1581880780745109505?ref_src=twsrc%5Etfw"&gt;October 17, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="networking-telemetry-in.net.net-microsoft-learn"&gt;Networking Telemetry in .NET - .NET | Microsoft Learn&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://learn.microsoft.com/en-us/dotnet/fundamentals/networking/networking-telemetry"&gt;https://learn.microsoft.com/en-us/dotnet/fundamentals/networking/networking-telemetry&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET のネットワーク関連のカウンターなどのテレメトリー情報についてまとめているドキュメント。&lt;/p&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/davidfowl/status/1582955638736695296?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;We&amp;#39;re working on making &lt;a href="https://t.co/4PmXMR5h75"&gt;https://t.co/4PmXMR5h75&lt;/a&gt; Core and EntityFramework work with trimming and ahead of time compilation (.NET NativeAOT). One of the big challenges is moving away from dynamic runtime code generation. Let&amp;#39;s talk about what that means👇🏾 &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/aspnetcore?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#aspnetcore&lt;/a&gt;&lt;/p&gt;&amp;mdash; David Fowler 🇧🇧🇺🇸 (&amp;#64;davidfowl) &lt;a href="https://twitter.com/davidfowl/status/1582955638736695296?ref_src=twsrc%5Etfw"&gt;October 20, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;ASP.NET Core と Entity Framework Core を NativeAOT に対応させるために取り組んでいるが、コード生成の課題についての話。&lt;/p&gt;
&lt;!-- https://twitter.com/xoofx/status/1582696587360624640?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="und" dir="ltr"&gt;TIL 😍 &lt;a href="https://t.co/q65eZqb8Za"&gt;https://t.co/q65eZqb8Za&lt;/a&gt; &lt;a href="https://t.co/2cSgDSs71n"&gt;pic.twitter.com/2cSgDSs71n&lt;/a&gt;&lt;/p&gt;&amp;mdash; Alexandre Mutel (&amp;#64;xoofx) &lt;a href="https://twitter.com/xoofx/status/1582696587360624640?ref_src=twsrc%5Etfw"&gt;October 19, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;ソリューションエクスプローラーの「すべてのファイルを表示」すると、SDK などで読み込んでいる targets や props 等を確認できるという小技。&lt;/p&gt;
&lt;!-- https://twitter.com/dsymetweets/status/1582438640143069184?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;On delivering a 3GB file via multiple nuget packages that stitch together on restore:&lt;br&gt;&lt;br&gt;&amp;quot;It&amp;#39;s the greatest hack of my life. The one I want written up in the great book of hacks that gets read in hack heaven. Alongside all the other times a large file hack has been played...  1/2&lt;/p&gt;&amp;mdash; Don Syme (&amp;#64;dsymetweets) &lt;a href="https://twitter.com/dsymetweets/status/1582438640143069184?ref_src=twsrc%5Etfw"&gt;October 18, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;&lt;a href="https://www.nuget.org/packages/libtorch-cuda-11.3-linux-x64#dependencies-body-tab"&gt;分割されたトータル 3GB の NuGet パッケージの話。&lt;/a&gt;&lt;/p&gt;
&lt;!-- https://twitter.com/jbevain/status/1583877491273650176?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;If there&amp;#39;s one thing I don&amp;#39;t like, it&amp;#39;s exceptions that are caught but are hiding another issue (or could be avoided in favor of a simpler check). The Mono debugging API make it incredibly easy to programmatically monitor your Unity Game/Editor: &lt;a href="https://t.co/K5yU8SDIcG"&gt;https://t.co/K5yU8SDIcG&lt;/a&gt; &lt;a href="https://t.co/AXTmbZ5XIB"&gt;pic.twitter.com/AXTmbZ5XIB&lt;/a&gt;&lt;/p&gt;&amp;mdash; Jb Evain (&amp;#64;jbevain) &lt;a href="https://twitter.com/jbevain/status/1583877491273650176?ref_src=twsrc%5Etfw"&gt;October 22, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="introduce-system.runtime.tieredpgo-knob-by-egorbo-pull-request-26350-dotnetsdk"&gt;Introduce System.Runtime.TieredPGO knob by EgorBo · Pull Request #26350 · dotnet/sdk&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/sdk/pull/26350"&gt;https://github.com/dotnet/sdk/pull/26350&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TieredPGO&lt;/code&gt; という環境変数や MSBuild プロパティで階層化 PGO を有効化できるオプションが .NET 7 で追加されたという PR。&lt;/p&gt;
&lt;h3 id="the-compiler-should-report-an-error-about-references-to-out-of-scope-stack-memory-generated-by-unscopedref-and-defensively-copied-struct.issue-64776-dotnetroslyn"&gt;The compiler should report an error about references to out-of-scope stack memory generated by &lt;code&gt;[UnscopedRef]&lt;/code&gt; and defensively copied struct. · Issue #64776 · dotnet/roslyn&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/roslyn/issues/64776"&gt;https://github.com/dotnet/roslyn/issues/64776&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;スタック上に防衛的コピーされた値の参照を返して本来できないはずのアクセスができてしまうコードが書けるというコンパイラーのバグ。&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2022-10-17: .NET 7 Release Candidate 2, .NET MAUI support for Xcode 14 and iOS 16, .NET 6.0.10 and .NET Core 3.1.30</title>
			<link>/2022/10/17/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2022/10/17/updates</guid>
			<pubDate>Mon, 17 Oct 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="announcing.net-7-release-candidate-2.net-blog"&gt;Announcing .NET 7 Release Candidate 2 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-dotnet-7-rc-2/"&gt;https://devblogs.microsoft.com/dotnet/announcing-dotnet-7-rc-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 RC2 がリリースされた。&lt;/p&gt;
&lt;p&gt;記事では過去の .NET 7 に関する新機能の記事へのリンクのほか、いくつかの変更について紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;System.Text.Json のソース生成時のリフレクションフォールバックの再有効化方法&lt;/li&gt;
&lt;li&gt;API を正しく使用するための新しいアナライザー
&lt;ul&gt;
&lt;li&gt;Generic Math インターフェースを正しく実装するためのアナライザー&lt;/li&gt;
&lt;li&gt;IntPtr と UIntPtr の組み込みオペレーターの挙動の変更を防止するためのアナライザー&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="announcing-entity-framework-core-7-rc2-json-columns.net-blog"&gt;Announcing Entity Framework Core 7 RC2: JSON Columns - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-ef7-release-candidate-2/"&gt;https://devblogs.microsoft.com/dotnet/announcing-ef7-release-candidate-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core 7 RC2 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは GA に含まれる機能のすべてが含まれ、RC1 から80以上の問題の修正が行われている。&lt;/p&gt;
&lt;p&gt;記事では Entity Framework Core 7 の新機能の JSON カラムへのマッピングについて、定義方法やクエリーなど詳しく紹介している。&lt;/p&gt;
&lt;h3 id="asp.net-core-updates-in.net-7-release-candidate-2.net-blog"&gt;ASP.NET Core updates in .NET 7 Release Candidate 2 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-7-rc-2/"&gt;https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-7-rc-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 RC2 での ASP.NET Core の更新についての記事。&lt;/p&gt;
&lt;p&gt;このリリースでは次の新機能が含まれており、記事ではそれぞれについて解説している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;出力キャッシュの改善&lt;/li&gt;
&lt;li&gt;msal.js (MSAL) を使用した動的な認証要求&lt;/li&gt;
&lt;li&gt;Blazor WebAssembly での認証の診断の改善&lt;/li&gt;
&lt;li&gt;WebAssembly でのマルチスレッディング (試験的)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="announcing.net-maui-support-for-xcode-14-and-ios-16.net-blog"&gt;Announcing .NET MAUI support for Xcode 14 and iOS 16 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-maui-xcode14/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-maui-xcode14/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI が Xcode 14 および iOS 16 をサポートした。&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 と .NET 6 で Xcode 14 と iOS 16 のサポートする .NET MAUI の6番目となるサービスリリース。Visual Studio 2022 17.3 または 17.4 Preview 3 、Visual Studio for Mac は 17.4 Preview 3 での対応。&lt;/p&gt;
&lt;p&gt;なお .NET 7 の MAUI での Xcode 14 サポートは後日(一週間後)となっているため、この時点では .NET 7 の MAUI は RC1 が最新となる。&lt;/p&gt;
&lt;p&gt;記事では Windows デバイスから Mac に接続して iOS のアプリケーションを開発できることを紹介している。&lt;/p&gt;
&lt;h3 id="whats-new-in-system.text.json-in.net-7.net-blog"&gt;What's new in System.Text.Json in .NET 7 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/system-text-json-in-dotnet-7/"&gt;https://devblogs.microsoft.com/dotnet/system-text-json-in-dotnet-7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 の System.Text.Json の新機能についての紹介記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;コントラクトのカスタマイズ
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IJsonTypeInfoResolver&lt;/code&gt; や &lt;code&gt;Modifiers&lt;/code&gt; を使ったシリアライズ/デシリアライズ処理のカスタマイズ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;型階層
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JsonDerivedType&lt;/code&gt; 属性を使用した継承型のシリアライズ/デシリアライズ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JsonPolymorphic&lt;/code&gt; 属性や &lt;code&gt;JsonTypeInfo&lt;/code&gt; を操作することによるポリモーフィズムのカスタマイズ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;必須メンバー (&lt;code&gt;required&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JsonSerializerOptions.Default&lt;/code&gt; の追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Utf8JsonReader.CopyString&lt;/code&gt; の追加&lt;/li&gt;
&lt;li&gt;ソース生成改善
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IAsyncEnumerable&amp;lt;T&amp;gt;&lt;/code&gt; のサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JsonDocument&lt;/code&gt; のサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DateOnly&lt;/code&gt;, &lt;code&gt;TimeOnly&lt;/code&gt; のサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;パフォーマンス改善&lt;/li&gt;
&lt;li&gt;破壊的変更&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="net-october-2022-updates.net-6.0.10-and.net-core-3.1.30.net-blog"&gt;.NET October 2022 Updates – .NET 6.0.10 and .NET Core 3.1.30 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/october-2022-updates/"&gt;https://devblogs.microsoft.com/dotnet/october-2022-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6.0.10 と .NET Core 3.1.30 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースではいくつかの不具合の修正と改善のほか、NuGet に関する脆弱性に対応するセキュリティー修正が含まれている。&lt;/p&gt;
&lt;h3 id="net-framework-october-2022-security-and-quality-rollup.net-blog"&gt;.NET Framework October 2022 Security and Quality Rollup - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-framework-october-2022-security-and-quality-rollup/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-framework-october-2022-security-and-quality-rollup/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework の2022年10月のセキュリティーと累積アップデートがリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースではいくつかの問題の修正と信頼性の向上が含まれている。新しいセキュリティー修正は含まれない。&lt;/p&gt;
&lt;h3 id="azure-static-web-apps-extended-support-for.net-core-3.1-ends-on-3-december-2022-azure-updates-microsoft-azure"&gt;Azure Static Web Apps extended support for .NET Core 3.1 ends on 3 December 2022 | Azure updates | Microsoft Azure&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://azure.microsoft.com/en-us/updates/staticwebappsdotnet3deprecation/"&gt;https://azure.microsoft.com/en-us/updates/staticwebappsdotnet3deprecation/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure Static Web Apps の .NET Core 3.1 の拡張サポートが2022年12月3日に終了する。&lt;/p&gt;
&lt;p&gt;Azure Static Web Apps の関数は Azure Functions 上で動作するため、引き続きサポートとセキュリティー更新を受け取るためには .NET 6 を使用するランタイム v4 への移行が必要となる。&lt;/p&gt;
&lt;h3 id="in-development-day-0-support-for.net-7-azure-updates-microsoft-azure"&gt;In development: Day 0 support for .NET 7 | Azure updates | Microsoft Azure&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://azure.microsoft.com/en-us/updates/in-development-day-0-support-for-net-7/"&gt;https://azure.microsoft.com/en-us/updates/in-development-day-0-support-for-net-7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure App Service での .NET 7 の Day 0 サポート予定のアナウンス。&lt;/p&gt;
&lt;h3 id="cake-v2.3.0-released"&gt;Cake v2.3.0 released&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://cakebuildnet.medium.com/cake-v2-3-0-released-b60746a00555"&gt;https://cakebuildnet.medium.com/cake-v2-3-0-released-b60746a00555&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Cake v2.3 がリリースされた。&lt;/p&gt;
&lt;p&gt;グローバルスクリプトキャッシュの改善やコマンドのエイリアスといった改善が含まれている。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="creadline-qiita"&gt;【C#】コンソールアプリで入力された文字を非表示にしてReadLineする - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/admiralhetare/items/2de677d90c5ce0ab2659"&gt;https://qiita.com/admiralhetare/items/2de677d90c5ce0ab2659&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;パスワード入力のようなエコーバックしない1行入力 (ReadLine) を実現する方法についての記事。&lt;/p&gt;
&lt;h3 id="adding-validation-to-strongly-typed-configuration-objects-using-fluentvalidation"&gt;Adding validation to strongly typed configuration objects using FluentValidation&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/adding-validation-to-strongly-typed-configuration-objects-using-flentvalidation/"&gt;https://andrewlock.net/adding-validation-to-strongly-typed-configuration-objects-using-flentvalidation/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core のような Microsoft.Extensions.Configuration を使用した設定で型付き設定を行う際に FluentValidation で設定値を検証する方法についてのの記事。&lt;/p&gt;
&lt;h3 id="end-to-end-test-a-blazor-app-with-playwright-part-1"&gt;End-to-End test a Blazor App with Playwright [Part 1]&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/younited-tech-blog/end-to-end-test-a-blazor-app-with-playwright-part-1-224e8894c0f3"&gt;https://medium.com/younited-tech-blog/end-to-end-test-a-blazor-app-with-playwright-part-1-224e8894c0f3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor アプリケーションを Playwright で End-to-End テストを行う方法についての記事シリーズ。&lt;/p&gt;
&lt;h3 id="list-in-c-implementation-and-features"&gt;List in C#: implementation and features&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://pvs-studio.com/en/blog/posts/csharp/0995/"&gt;https://pvs-studio.com/en/blog/posts/csharp/0995/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET の &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt; がどのような実装となっていてどのような機能を提供するのかを解説している記事。&lt;/p&gt;
&lt;h3 id="net-6-aws-ssm-parameter-storegeneric-host"&gt;[.NET 6] AWS SSM Parameter StoreをGeneric Hostに登録して使う&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/shimat/articles/affbb2ece0ace8"&gt;https://zenn.dev/shimat/articles/affbb2ece0ace8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AWS Systems Manager Parameter Store にある値を ASP.NET Core のような Generic Host アプリケーションから利用する方法についての記事。&lt;/p&gt;
&lt;h3 id="entity-framework-core-7-strongly-typed-ids-together-with-auto-increment-columns"&gt;Entity Framework Core 7: Strongly Typed Ids Together With Auto-Increment Columns&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://david-masters.medium.com/entity-framework-core-7-strongly-typed-ids-together-with-auto-increment-columns-fd9715e331f3"&gt;https://david-masters.medium.com/entity-framework-core-7-strongly-typed-ids-together-with-auto-increment-columns-fd9715e331f3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core 7 で対応するオートインクリメントなカラムに対する厳密な型を持つ ID を使用することについての記事。&lt;/p&gt;
&lt;h3 id="blazor-life-cycle-events-oversimplified"&gt;Blazor Life Cycle Events: Oversimplified&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://betterprogramming.pub/blazor-life-cycle-events-oversimplified-4b8e1bd5fa4b"&gt;https://betterprogramming.pub/blazor-life-cycle-events-oversimplified-4b8e1bd5fa4b&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor のライフサイクルイベントについて解説している記事。&lt;/p&gt;
&lt;h3 id="developing-asp.net-core-apps-in-docker-live-recompilation"&gt;Developing ASP.NET Core apps in Docker - Live Recompilation&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://tymisko.hashnode.dev/developing-aspnet-core-apps-in-docker-live-recompilation"&gt;https://tymisko.hashnode.dev/developing-aspnet-core-apps-in-docker-live-recompilation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Docker (Docker Compose) で ASP.NET Core アプリケーションを開発する手順についての記事。&lt;/p&gt;
&lt;p&gt;ローカルのソースコードをマウントしてコンテナー内でビルドと実行を行う方法を紹介している。&lt;/p&gt;
&lt;h3 id="asp.net-core-6-record"&gt;[ASP.NET Core 6] モデルバインドでrecordを使うときの注意点&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/shimat/articles/ef69b034cd0499"&gt;https://zenn.dev/shimat/articles/ef69b034cd0499&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 の ASP.NET Core で &lt;code&gt;record&lt;/code&gt; 型をモデルバインドする際に設定する属性(&lt;code&gt;FromForm&lt;/code&gt;, &lt;code&gt;JsonPropertyName&lt;/code&gt; など)で注意すべき点をまとめた記事。&lt;/p&gt;
&lt;h3 id="lessons-learned-on-optimizing.net-on-aws-lambda"&gt;Lessons Learned on Optimizing .NET on AWS Lambda&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/lambdasharp/lessons-learned-on-optimizing-net-on-aws-lambda-2n5m"&gt;https://dev.to/lambdasharp/lessons-learned-on-optimizing-net-on-aws-lambda-2n5m&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AWS Lambda で .NET アプリケーションを実行する際の最適化ポイントのまとめ。&lt;/p&gt;
&lt;h3 id="stripe-payment-gateway-implementation-in-asp.net-core-web-api"&gt;Stripe Payment Gateway Implementation in ASP .NET Core Web API&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://juldhais.net/stripe-payment-gateway-implementation-in-asp-net-core-web-api-359ad44e2b47"&gt;https://juldhais.net/stripe-payment-gateway-implementation-in-asp-net-core-web-api-359ad44e2b47&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core Web API から Stripe の API を使用する方法まとめ。&lt;/p&gt;
&lt;h2 id="section-2"&gt;プレゼンテーション&lt;/h2&gt;
&lt;h3 id="victor-nicollet-ilpack-saving-assemblies-to-disk-dotnetos-conference-2022-youtube"&gt;Victor Nicollet - ILPack: saving assemblies to disk (Dotnetos Conference 2022) - YouTube&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=t_kBLD5D3_4"&gt;https://www.youtube.com/watch?v=t_kBLD5D3_4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Core 以降で動的にアセンブリを保存するためのライブラリー ILPack についての発表。&lt;/p&gt;
&lt;h3 id="kevin-gosse-pushing-c-to-new-places-with-nativeaot-dotnetos-conference-2022-youtube"&gt;Kevin Gosse - Pushing C# to new places with NativeAOT (Dotnetos Conference 2022) - YouTube&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=eE0AbO5_XSw"&gt;https://www.youtube.com/watch?v=eE0AbO5_XSw&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET の NativeAOT でネイティブライブラリーを作ることでいろいろなことができる(.NET プロファイラーや LLDB 拡張、.NET の GC など)という発表。&lt;/p&gt;
&lt;h3 id="krzysztof-stolarz-road-to.net-6-migration-story-of-hope-and-despair-dotnetos-conference-2022-youtube"&gt;Krzysztof Stolarz - Road to .NET 6: migration story of hope and despair (Dotnetos Conference 2022) - YouTube&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=ttsowlY55KM"&gt;https://www.youtube.com/watch?v=ttsowlY55KM&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;高負荷リアルタイムな .NET Framework によるサーバーアプリケーションを .NET に移行した事例についての発表。&lt;/p&gt;
&lt;h2 id="section-3"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="chrisnaswin-pprof-windows.pprof-viewer"&gt;chrisnas/Win-pprof: Windows .pprof viewer&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/chrisnas/Win-pprof"&gt;https://github.com/chrisnas/Win-pprof&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.pprof ファイルを表示するための Windows のビューアー。&lt;/p&gt;
&lt;!-- https://twitter.com/chnasarre/status/1579920371192860672?s=12&amp;t=hC3atrI-NJ1e261jEZ6dEA --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;If you have to look into .pprof files, &lt;a href="https://t.co/LktSgqheaP"&gt;https://t.co/LktSgqheaP&lt;/a&gt; could help: &lt;br&gt;- dotnet-pprof: CLI to dump .pprof files&lt;br&gt;- win-pprof: GUI to navigate into .pprof; focusing on samples, values, labels and call stacks.&lt;br&gt;&lt;br&gt;I&amp;#39;m sharing the tools I&amp;#39;m using everyday to check our profiles. &lt;a href="https://t.co/FPlpRFsCtn"&gt;pic.twitter.com/FPlpRFsCtn&lt;/a&gt;&lt;/p&gt;&amp;mdash; Christophe Nasarre (&amp;#64;chnasarre) &lt;a href="https://twitter.com/chnasarre/status/1579920371192860672?ref_src=twsrc%5Etfw"&gt;October 11, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="section-4"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-5"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/egorbo/status/1579828358627479552?s=12&amp;t=4j3EARsK3is33HPAds3gTg --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Here is roughly how Tiered Compilation works in .NET. Now guess why I added two extra instructions to the call-counting stub (size regression!) and detected benefits from that in web apps? 🙃 HINT: all calls to B() hit the same location of memory to decrement call-counter for B() &lt;a href="https://t.co/iCIpyF8OMw"&gt;pic.twitter.com/iCIpyF8OMw&lt;/a&gt;&lt;/p&gt;&amp;mdash; Egor Bogatov (&amp;#64;EgorBo) &lt;a href="https://twitter.com/EgorBo/status/1579828358627479552?ref_src=twsrc%5Etfw"&gt;October 11, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;.NET の階層化コンパイルがどのようになっているかの大雑把な図で、何故2つの呼び出しが追加されていて Web アプリにはどういうメリットがあるのかという話。異なるスレッドで同じメソッドを実行するパターン、つまり異なるコア(あるいは NUMA)から同じメモリー位置にアクセスする場合にキャッシュスラッシングを減らすためらしい。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="jit-implement-tail-merging-by-andyayersms-pull-request-77103-dotnetruntime"&gt;JIT: implement tail merging by AndyAyersMS · Pull Request #77103 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/77103"&gt;https://github.com/dotnet/runtime/pull/77103&lt;/a&gt;&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2022-10-11: Console.ReadKey improvements, Bing Ads Campaign Platform – Journey to .NET 6</title>
			<link>/2022/10/11/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2022/10/11/updates</guid>
			<pubDate>Tue, 11 Oct 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="console.readkey-improvements-in.net-7.net-blog"&gt;Console.ReadKey improvements in .NET 7 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/console-readkey-improvements-in-net-7/"&gt;https://devblogs.microsoft.com/dotnet/console-readkey-improvements-in-net-7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unix/Linux での &lt;code&gt;Console.ReadKey&lt;/code&gt; の挙動をより良いものにするために .NET 7 で書き直したこととその変更の解説記事。&lt;/p&gt;
&lt;p&gt;以前から Unix/Linux での &lt;code&gt;Console.ReadKey&lt;/code&gt; の挙動には入力されたキーの組み合わせや修飾キーの取り扱いでバグとなる挙動がいくつも確認されてきていた。.NET 7 ではコードを新たに書き換えこの問題に対処している。&lt;/p&gt;
&lt;p&gt;記事では書き換えの前に自動テストカバレッジを増やすために取った手法、内部でのシステムコールの呼び出し、古い実装と新しい実装について書かれている。&lt;/p&gt;
&lt;p&gt;また .NET 6 互換の挙動に戻す runtimeconfig.json と環境変数の設定も紹介している。これらの互換動作は .NET 8 で削除される予定。&lt;/p&gt;
&lt;h3 id="bing-ads-campaign-platform-journey-to.net-6.net-blog"&gt;Bing Ads Campaign Platform – Journey to .NET 6 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/bing-ads-campaign-platform-journey-to-dotnet-6/"&gt;https://devblogs.microsoft.com/dotnet/bing-ads-campaign-platform-journey-to-dotnet-6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Bing の検索広告のキャンペーンプラットフォームを .NET 6 (+ AKS) へと移行した事例紹介。&lt;/p&gt;
&lt;p&gt;プラットフォームは秒間数千のリクエストを 100ms 未満で処理する数十の分散サービスで構築されている。コードベースでは .cspro は600を超え、500を超える NuGet パッケージの依存を持つという規模感であり、元々の実行環境は .NET Framework 4.6 と(単に&amp;quot;リフト&amp;quot;した) Windows 仮想マシンでホストする WCF による SOAP サービスだったとのこと。&lt;/p&gt;
&lt;p&gt;記事では新しい .NET に移行する理由と移行プロセス、課題、移行の結果についてそれぞれ紹介している。&lt;/p&gt;
&lt;p&gt;.NET に移行する理由は大きく次の5つをあげている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;コンテナーを使うようなクロスプラットフォーム化&lt;/li&gt;
&lt;li&gt;ハイパフォーマンスや言語の機能、.NET Framework 進化の停止といった面からの .NET 開発の未来&lt;/li&gt;
&lt;li&gt;改善のイテレーションが高速であることによるイノベーションの摩擦の軽減&lt;/li&gt;
&lt;li&gt;オープンソース&lt;/li&gt;
&lt;li&gt;CLI ツールや SDK スタイルプロジェクト、バインディングリダイレクトの廃止のような優れたツーリング&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;移行プロセスはライブラリーは &amp;quot;.NET Framework 4.6 → .NET Framework 4.7 → .NET Standard 2.0&amp;quot;、アプリケーションは .NET Framework 4.6 → .NET Framework 4.7 → .NET Core 3.1 → .NET 5 → .NET 6&amp;quot; という順番で移行していった。.NET Framework 4.6 は .NET Standard を完全にサポートしておらず .NET Standard への移行は簡単ではなかったとのこと。&lt;/p&gt;
&lt;p&gt;移行する中での課題とその解決について幾つか紹介している。&lt;/p&gt;
&lt;p&gt;まず、プロジェクトは数多くの NuGet パッケージに依存しているためパッケージの更新や古いライブラリーからの置き換えが発生すること。互換性のないパッケージは再パッケージして .NET Standard をサポートした形で社内パッケージフィードに公開したり、ソースの存在しないパッケージであっても逆コンパイルしてパッチすることで .NET Standard 互換として解決した。&lt;/p&gt;
&lt;p&gt;バインディングリダイレクトの問題は PackageReference 方式へと移行したことでダイアモンド依存問題を解決した。大量の .csproj があるため SDK スタイルに変換するツールを使用して移行を達成した。その後 .NET チームからは try-convert と呼ばれる同様のツールがリリースされた。また、パッケージ依存の複雑性を下げるためにパッケージのバージョン管理を一元化するようにしたとのこと。(記事でリンクされている &lt;a href="https://github.com/Microsoft/MSBuildSdks/tree/main/src/CentralPackageVersions"&gt;Microsoft.Build.CentralPackageVersions&lt;/a&gt; は&lt;a href="https://devblogs.microsoft.com/nuget/introducing-central-package-management/"&gt;NuGet の Central Package Management&lt;/a&gt; の前身と思われる)&lt;/p&gt;
&lt;p&gt;最後に WCF への依存について。サービスは WCF による SOAP サービスで構築されていて、利用者に公開している都合 gRPC のような物への移行はできないので最終的には WCF のサブセットである CoreWCF 作成し、移行をしたとのこと。以降の過程では .NET Framework と .NET のコードが共存することもあり、マルチターゲット化するなどの苦労はある程度あった様子。&lt;/p&gt;
&lt;p&gt;.NET への移行の結果としてレイテンシーは大きく改善され、WCF から CoreWCF に移行した結果メモリーの使用量を40-50%ほど削減するといった大きな効果があった。&lt;/p&gt;
&lt;p&gt;まとめとして .NET 6 への移行は大規模で痛みを伴うものではあったが価値があったと評価し、大規模なコードベースからの移行の教訓として次のポイントをあげている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.NET Framework 4.7 か .NET Framework 4.8 に移行する&lt;/li&gt;
&lt;li&gt;何事を始める前にすべてのプロジェクトを SDK スタイルに変換し、PackageReference を使用するようにする&lt;/li&gt;
&lt;li&gt;.NET Standard を使用して .NET Framework と .NET の両方のプロジェクトでコードを共有できるようにする&lt;/li&gt;
&lt;li&gt;パッケージの一元管理を使用して新しい NuGet パッケージへの移行を簡単にする&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="comparing-files-in-visual-studio-visual-studio-blog"&gt;Comparing files in Visual Studio - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/comparing-files-in-visual-studio/"&gt;https://devblogs.microsoft.com/visualstudio/comparing-files-in-visual-studio/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio にファイル比較機能を実装することを検討していることについて。&lt;/p&gt;
&lt;p&gt;Visual Studio では従来任意のファイルを選択してのファイル比較を行う機能を提供して来なかったが検討を始めた。まずは File Differ という機能拡張から機能の実験開始していて記事ではその拡張の機能を紹介している。&lt;/p&gt;
&lt;p&gt;興味がある場合はフィードバックや投票を行ってほしいとのこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=MadsKristensen.FileDiffer"&gt;File Differ - Visual Studio Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developercommunity.visualstudio.com/t/is-there-a-way-to-compare-two-files-from-solution/619706"&gt;[NEW] Is there a way to compare two files from solution explorer? - Visual Studio Feedback&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="authentication-for.net-maui-apps-with-msal.net.net-blog"&gt;Authentication for .NET MAUI Apps with MSAL.NET - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/authentication-in-dotnet-maui-apps-msal/"&gt;https://devblogs.microsoft.com/dotnet/authentication-in-dotnet-maui-apps-msal/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoft Identity.Client 4.47.0 (MSAL.NET) で .NET MAUI をサポートしたというアナウンス。&lt;/p&gt;
&lt;h3 id="announcing-the.net-maui-community-toolkit-v1.3.net-blog"&gt;Announcing the .NET MAUI Community Toolkit v1.3 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-the-dotnet-maui-community-toolkit-v13/"&gt;https://devblogs.microsoft.com/dotnet/announcing-the-dotnet-maui-community-toolkit-v13/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI Community Toolkit v1.3 がリリースされた。&lt;/p&gt;
&lt;p&gt;ステータスバーのスタイリング、Gravatar イメージソース、アニメーションの強化、ソースリンクの対応といったものが含まれている。&lt;/p&gt;
&lt;h3 id="release-11.0.0-preview-2-avaloniauiavalonia"&gt;Release 11.0.0 Preview 2 · AvaloniaUI/Avalonia&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/AvaloniaUI/Avalonia/releases/tag/11.0.0-preview2"&gt;https://github.com/AvaloniaUI/Avalonia/releases/tag/11.0.0-preview2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Avalonia 11.0.0 Preview 2 がリリースされた。&lt;/p&gt;
&lt;p&gt;いくつかの安定性の向上や様々な修正などが含まれている。&lt;/p&gt;
&lt;h3 id="rider-2022.3-eap-2-new-ui-improved-unit-testing-better-dynamic-program-analysis-and-more.the.net-tools-blog"&gt;Rider 2022.3 EAP 2: New UI, Improved Unit Testing, Better Dynamic Program Analysis and More. | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/10/07/rider-2022-3-eap-2/"&gt;https://blog.jetbrains.com/dotnet/2022/10/07/rider-2022-3-eap-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider 2022.3 EAP 2 がリリースされた。&lt;/p&gt;
&lt;p&gt;新しい IntelliJ ベース IDE の UI、Search Everywhere やツールウィンドウ、ソリューションエクスプローラーの改善、Rider 組み込みの dotMemory の Linux, macOS への対応、C# 11 への対応、ユニットテストエクスプローラーの改善、デバッガーのパフォーマンス改善、.NET MAUI サポート、IIS での起動対応、動的プログラム解析 (データベースアクセス)など。&lt;/p&gt;
&lt;h3 id="announcing-nuget-packagereference-support-for-ccli-msbuild-projects-targeting.net-core-and.net-5-or-higher-c-team-blog"&gt;Announcing NuGet PackageReference support for C++/CLI MSBuild projects targeting .NET Core and .NET 5 or higher - C++ Team Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/cppblog/announcing-nuget-packagereference-support-for-c-cli-msbuild-projects-targeting-net-core/"&gt;https://devblogs.microsoft.com/cppblog/announcing-nuget-packagereference-support-for-c-cli-msbuild-projects-targeting-net-core/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 version 17.3 以降の .NET Core または .NET 5 以降をターゲットとする C++/CLI MSBuild プロジェクトでは NuGet パッケージの参照が可能になったというアナウンス。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="xamarin.forms-maui"&gt;Xamarin.Formsライブラリを MAUIに移植した話&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://speakerdeck.com/muak/xamarin-dot-formsraiburariwo-mauiniyi-zhi-sitahua"&gt;https://speakerdeck.com/muak/xamarin-dot-formsraiburariwo-mauiniyi-zhi-sitahua&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Xamarin.Forms 向けのライブラリーを .NET MAUI に移植した話のスライド。&lt;/p&gt;
&lt;p&gt;Xamarin.Forms と .NET MAUI の実装方法の違いや Tips 等を紹介している。&lt;/p&gt;
&lt;h3 id="maui"&gt;MAUI の現状と進化ポイント | ドクセル&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.docswell.com/s/hiro128_777/KW79X5-2022-09-30-184910"&gt;https://www.docswell.com/s/hiro128_777/KW79X5-2022-09-30-184910&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI の Xamarin.Forms とのアーキテクチャーの違いや、現状の各種ツーリングのサポート状態などをまとめたスライド。&lt;/p&gt;
&lt;h3 id="net-annotated-monthly-october-2022-the.net-tools-blog"&gt;.NET Annotated Monthly | October 2022 | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/10/06/net-annotated-monthly-october-2022/"&gt;https://blog.jetbrains.com/dotnet/2022/10/06/net-annotated-monthly-october-2022/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JetBrains による2022年10月の .NET 関連情報まとめ記事。&lt;/p&gt;
&lt;h3 id="c.net-namedpipe-ipc-wpf-qiita"&gt;[C#] .NET で NamedPipe を使ってプロセス間通信 (IPC) を行う (WPFサンプル) - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/kobayashi_stmn/items/7de42805eba009deebaa"&gt;https://qiita.com/kobayashi_stmn/items/7de42805eba009deebaa&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 の WPF アプリケーションで NamedPipe を使用してプロセス間通信を行う方法についての記事。&lt;/p&gt;
&lt;h3 id="visual-studios-azure-marketplace-images-now-support-microsoft-dev-box-visual-studio-blog"&gt;Visual Studio’s Azure Marketplace images now support Microsoft Dev Box - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studios-azure-marketplace-images-now-support-microsoft-dev-box/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studios-azure-marketplace-images-now-support-microsoft-dev-box/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure Marketplace の Visual Studio イメージが Microsoft Dev Box でサポートされたというアナウンス。&lt;/p&gt;
&lt;h3 id="adding-validation-to-strongly-typed-configuration-objects-in.net-6"&gt;Adding validation to strongly typed configuration objects in .NET 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/adding-validation-to-strongly-typed-configuration-objects-in-dotnet-6/"&gt;https://andrewlock.net/adding-validation-to-strongly-typed-configuration-objects-in-dotnet-6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 の Microsoft.Extensions.Configuration で厳密に型指定された構成オブジェクトに検証を追加する方法についての記事。&lt;/p&gt;
&lt;h3 id="opentelemetry.net-8-azure-service-bus"&gt;OpenTelemetry .NETを理解する (8) 手動でのトレースの接続例: Azure Service Busを経由したアプリ間でトレースをつなげる - 銀の光と碧い空&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://tech.tanaka733.net/entry/2022/10/opentelemetry-dotnet-08"&gt;https://tech.tanaka733.net/entry/2022/10/opentelemetry-dotnet-08&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure Service Bus を使用したサービス間でのリクエストのトレースを繋げる方法についての記事。&lt;/p&gt;
&lt;h3 id="using.net-7s-blazor-custom-elements-to-render-dynamic-content"&gt;Using .NET 7's Blazor Custom Elements to render dynamic content&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://jonhilton.net/blazor-custom-elements/"&gt;https://jonhilton.net/blazor-custom-elements/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Custom Elements を使用して Blazor で動的な要素を構築する方法についての記事。&lt;/p&gt;
&lt;h3 id="how-we-achieved-5x-faster-pipeline-execution-by-removing-closure-allocations"&gt;How we achieved 5X faster pipeline execution by removing closure allocations&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://particular.net/blog/pipeline-and-closure-allocations"&gt;https://particular.net/blog/pipeline-and-closure-allocations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NServiceBus でラムダのキャプチャー(アロケーション)を削減することでパフォーマンスを改善したという記事。&lt;/p&gt;
&lt;h3 id="net-mauiandroid"&gt;.NET MAUIだってキーボード開きたい！(Android)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/test_myname/articles/d982b67cf0615f"&gt;https://zenn.dev/test_myname/articles/d982b67cf0615f&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI で Android のスクリーンキーボードを表示/非表示にする方法についての記事。&lt;/p&gt;
&lt;h3 id="blazor-wasm-custom-404-page-on-gh-pages"&gt;Blazor WASM Custom 404 Page on GH Pages&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/dotnet/blazor-wasm-custom-404-page-on-gh-pages-1o99"&gt;https://dev.to/dotnet/blazor-wasm-custom-404-page-on-gh-pages-1o99&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor WebAssembly を GitHub Pages でホストしたときに存在しないページへのアクセス時にカスタムのエラーページを表示する方法についての記事。&lt;/p&gt;
&lt;h3 id="from-junior-to-genius-an-optimization-story-by-israel-lot-oct-2022-itnext"&gt;From Junior to Genius: an optimization story | by Israel Lot | Oct, 2022 | ITNEXT&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://itnext.io/from-junior-to-genius-an-optimization-story-ab20afc8159d"&gt;https://itnext.io/from-junior-to-genius-an-optimization-story-ab20afc8159d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;32bit チェックサムを計算するコードを元に様々な段階を追ってチューニングしていくという記事。&lt;/p&gt;
&lt;p&gt;記事では素朴な実装から unsafe な実装へ、トリッキーな実装やシンプルな実装、SIMD を使用した実装へと進んで最終的に85倍の高速化を行っている。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="github-xoofxantlr4ast-antlr4ast-is-a.net-library-that-provides-a-parser-and-abstract-syntax-tree-ast-for-antlr4g4-files"&gt;GitHub - xoofx/Antlr4Ast: Antlr4Ast is a .NET library that provides a parser and abstract syntax tree (AST) for ANTLR4/g4 files.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/xoofx/Antlr4Ast"&gt;https://github.com/xoofx/Antlr4Ast&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ANTLR4/g4 ファイルのパースを行って AST を作るライブラリー。&lt;/p&gt;
&lt;!-- https://twitter.com/xoofx/status/1579135102885715969?s=12&amp;t=sNYyiHhZFM_OqXNzHAwD7A --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Hey .NET folks, it&amp;#39;s a rainy Sunday here so I just released a new .NET library &lt;a href="https://t.co/3tlFpUlJnt"&gt;https://t.co/3tlFpUlJnt&lt;/a&gt; to parse ANTLR4/g4 files into a lightweight AST useful for codegen scenarios.&lt;br&gt;I&amp;#39;ll use this library for &lt;a href="https://twitter.com/hashtag/starklang?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#starklang&lt;/a&gt; to generate the data oriented syntax from an ANTLR g4 spec! 🏎️&lt;/p&gt;&amp;mdash; Alexandre Mutel (&amp;#64;xoofx) &lt;a href="https://twitter.com/xoofx/status/1579135102885715969?ref_src=twsrc%5Etfw"&gt;October 9, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="disruptor-netdisruptor-net-port-of-lmax-disruptor-to.net"&gt;disruptor-net/Disruptor-net: Port of LMAX Disruptor to .NET&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/disruptor-net/Disruptor-net"&gt;https://github.com/disruptor-net/Disruptor-net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ハイパフォーマンスなスレッド間のメッセージパッシングフレームワークライブラリー。&lt;/p&gt;
&lt;h3 id="bchavezbogus-a-simple-fake-data-generator-for-c-f-and-vb.net.based-on-and-ported-from-the-famed-faker.js"&gt;bchavez/Bogus: A simple fake data generator for C#, F#, and VB.NET. Based on and ported from the famed faker.js.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/bchavez/Bogus"&gt;https://github.com/bchavez/Bogus&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;faker.js を移植した疑似データ生成ライブラリー。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://juldhais.net/generating-random-dummy-data-using-bogus-e1f57eecf90b"&gt;Generating Random Dummy Data using Bogus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/linqpad/status/1576879508078366720?s=12&amp;t=HKDKQV9LxTi47JU-CPxyEg --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Performance-testing with the industrial-grade &lt;a href="https://twitter.com/hashtag/BenchmarkDotNet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#BenchmarkDotNet&lt;/a&gt; in LINQPad is now as simple as selecting your code and pressing Ctrl+Shift+B. Full integration, with customizable real-time output! &lt;a href="https://t.co/5mvykpZBX2"&gt;https://t.co/5mvykpZBX2&lt;/a&gt; &lt;a href="https://t.co/PaleWcQBUd"&gt;pic.twitter.com/PaleWcQBUd&lt;/a&gt;&lt;/p&gt;&amp;mdash; LINQPad·Joe Albahari (&amp;#64;linqpad) &lt;a href="https://twitter.com/linqpad/status/1576879508078366720?ref_src=twsrc%5Etfw"&gt;October 3, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;LINQPad 上で Ctrl+Shift+B を押すことで BenchmarkDotNet で即ベンチマークを取れるという統合機能が導入されるという話。&lt;/p&gt;
&lt;!-- https://twitter.com/egorbo/status/1579474949152313347?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Some pieces of FOH (Frozen Object Heap) were already merged to .NET 8.0. In this example we bake a direct reference to typeof(x) object in jit codegen and omit the write-barrier 🥳 &lt;a href="https://t.co/qNArNRxhYC"&gt;pic.twitter.com/qNArNRxhYC&lt;/a&gt;&lt;/p&gt;&amp;mdash; Egor Bogatov (&amp;#64;EgorBo) &lt;a href="https://twitter.com/EgorBo/status/1579474949152313347?ref_src=twsrc%5Etfw"&gt;October 10, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;FOH (Frozen Object Heap) のいくつの部分が .NET 8 にマージされ、&lt;code&gt;typeof(x)&lt;/code&gt; のようなものは JIT のコード生成時にライトバリアなしに直接参照を扱えるようになれるという話。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="initial-green-thread-prototype-by-davidwrighton-pull-request-2002-dotnetruntimelab"&gt;Initial green thread prototype by davidwrighton · Pull Request #2002 · dotnet/runtimelab&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtimelab/pull/2002"&gt;https://github.com/dotnet/runtimelab/pull/2002&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;runtimelab におけるグリーンスレッドのプロトタイプ実装の PR。&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2022-10-03: Experimental WebTransport over HTTP/3 support, .NET 6 Migration Journeys</title>
			<link>/2022/10/03/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2022/10/03/updates</guid>
			<pubDate>Mon, 03 Oct 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="experimental-webtransport-over-http3-support-in-kestrel.net-blog"&gt;Experimental WebTransport over HTTP/3 support in Kestrel - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/experimental-webtransport-over-http-3-support-in-kestrel/"&gt;https://devblogs.microsoft.com/dotnet/experimental-webtransport-over-http-3-support-in-kestrel/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Kestrel での WebTransport over HTTP/3 の実験的サポートについての記事。&lt;/p&gt;
&lt;p&gt;.NET 7 RC 1 の Kestrel で WebTransport over HTTP/3 の実験的サポートが導入された。WebTransport は UDP を使用する QUIC と HTTP/3 に基づいたストリーミング接続で、従来までの HTTP/2 での一つの接続による WebSocket の複数ストリームと異なり、あるストリームがパケットドロップ等の理由でブロックされた場合でも他のストリームがブロックされるといったことを避けられるといったメリットがある。&lt;/p&gt;
&lt;p&gt;WebTransport を有効にするにはプロジェクトファイル (.csproj) で実験的機能の設定を有効化と、WebHost で HTTP/3 をリッスンする必要がある。&lt;/p&gt;
&lt;h3 id="microsoft-teams-infrastructure-and-azure-communication-services-journey-to.net-6.net-blog"&gt;Microsoft Teams’ Infrastructure and Azure Communication Services’ Journey to .NET 6 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/microsoft-teams-infrastructure-and-azure-communication-services-journey-to-dotnet-6/"&gt;https://devblogs.microsoft.com/dotnet/microsoft-teams-infrastructure-and-azure-communication-services-journey-to-dotnet-6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoft Teams と Intelligent Conversation and Communications Cloud (IC3) と呼ばれるリアルタイム通信会話の基盤を .NET Framework から .NET 6 へと移行した事例の紹介。&lt;/p&gt;
&lt;p&gt;動機として Azure のコスト削減、パフォーマンス向上、サービスとネットワークのモダナイゼーション、エンジニアリングの生産性の向上をあげている。&lt;/p&gt;
&lt;p&gt;IC3 は200を超えるマイクロサービスで構成され、現在は1/3以上のサービスが .NET 6 で実行されている。以降のアプローチとして2つのマイクロサービスでアプローチの構築と検証、基盤のサポートとライブラリーの更新を行い、前提と移行手順を検証したのち、残りのサービスに展開した。&lt;/p&gt;
&lt;p&gt;その際効率の向上の測定のため Q-Factor 分析を行ったとのこと。Q-Factor とは &lt;code&gt;Q=(合計作業量)/(合計使用率)&lt;/code&gt; で導き出される値で、インスタンスが一定期間の使用率あたりに可能な仕事量を表すもので、ここでは CPU を使用率として、リクエスト数を作業量として定義して計測している(つまり 1,000 reqs を CPU 50% で処理した場合は Q = 2,000 で、2,000 reqs を CPU 50% で処理できれば Q = 4,000 となる、といった形で比較できる)。&lt;/p&gt;
&lt;p&gt;記事ではマイクロサービスのいくつかのドメインでの結果を紹介している。&lt;/p&gt;
&lt;p&gt;メッセージングドメインの API サービスを .NET 6 に移行した際の結果としては大きくは CPU 使用率の削減、Azure の支出の削減、Azure のコンピューティングのコストの削減の効果があった。現在 Dynamic PGO を適用してさらなるコスト削減を目指しているところ。&lt;/p&gt;
&lt;p&gt;次に通話ドメインのブローカーサービスを .NET 6 に移行した結果の紹介で同様に CPU コアの削減と Azure の支出の削減、API レイテンシーの向上の効果があった。CPU 使用率の削減は当初は .NET Core 3.1 と .NET Framework でのベンチマークの結果、.NET Core のほうが高かったがいくつかの最適化を行うことで .NET Core でより良いパフォーマンスが得られ、.NET 6 へ移行しボトルネックを特定できる仕組みなどを用意した結果、最終的に大幅な改善が得られた。レイテンシーは API によっては 10ms 前後から 5ms 前後へと平均 55% の改善が得られたとのこと。&lt;/p&gt;
&lt;p&gt;最後は会議ドメインについて。会議仮想アシスタントと会議自動応答サービスが .NET 6 へと移行され、会議自動応答サービスでの結果を紹介している。ここでも CPU コアの大きな削減 (98%) や Azure の支出の削減、CPU 使用率の削減や応答時間の短縮といった効果があったとのこと。&lt;/p&gt;
&lt;h3 id="microsoft-commerces.net-6-migration-journey.net-blog"&gt;Microsoft Commerce's .NET 6 Migration Journey - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/microsoft-commerce-dotnet-6-migration-journey/"&gt;https://devblogs.microsoft.com/dotnet/microsoft-commerce-dotnet-6-migration-journey/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoft Commerce という製品やサービスのカタログからライセンス情報の保持、税額の計算などビジネス、コンシューマー問わず Microsoft の取引にかかわるサービスのセットで .NET 6 の移行を行った事例紹介。&lt;/p&gt;
&lt;p&gt;記事では Microsoft Commerce のグローバルルックアップサービス (GLS)と呼ばれる、サービスを分割し、ユーザーのデータの場所を近さに応じてマッピングするサービスを移行した例を紹介している。&lt;/p&gt;
&lt;p&gt;移行には .NET Framework から .NET Core に加え、実行プラットフォームを Windows から Linux (Kubernetes) へ移す必要になった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows から Linux&lt;/li&gt;
&lt;li&gt;.NET Framework から .NET Core (3.1 あるいは .NET 5、現在は .NET 6)&lt;/li&gt;
&lt;li&gt;コンテナーと Kubernetes へのプラットフォームシフト (VM からの脱却)&lt;/li&gt;
&lt;li&gt;ビルドとリリースシステムの変更によりセキュリティーおよびコンプライアンスの向上、コンテナー化されたアプリケーションをサポート&lt;/li&gt;
&lt;li&gt;移行に伴うプラットフォームと .NET の拡張と改善の利用とパートナーの依存関係を含むメリットの享受&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;移行の結果として大きなコストの削減と CPU コアの削減といったコストの削減があったが、.NET 以外の様々な変更も含むため、より具体的な .NET Framework から .NET Core への移行による効果例を探した結果、サービスの待ち時間の大幅な短縮といった効果が見られたとしている。&lt;/p&gt;
&lt;p&gt;さらに .NET 5 から 6 への移行も行われ、スレッドプールの改善、接続管理の改善、ランタイム内部の例外の削減といった効果が見られたとのこと。&lt;/p&gt;
&lt;p&gt;記事では移行に関する知見がいくつか紹介されている。&lt;/p&gt;
&lt;p&gt;依存関係のマッピングと移行経路の評価(.NET 機能への置き換え、新しい依存関係への置き換え、依存関係を使用しての移行、独自の実装への置き換え)には広範囲の作業が必要となり時間をかけている。&lt;/p&gt;
&lt;p&gt;また移行時に独自ソリューションを .NET のベストプラクティスへの置き換えを試みたこと。例えばオブジェクトプーリングの機構は ObjectPool クラスを使用する、RecyclableMemoryStream ライブラリーを使用するといった形で独自実装からの置き換えを、APM ベースの非同期モデルは TAP へと変換するといった形での対応を行った。&lt;/p&gt;
&lt;p&gt;サービスは .NET Core へと移行して、Windows から Linux に移行することで Linux で動作させるために必要な対応が必要となった。&amp;quot;Windows 前提&amp;quot; であることはビルド、ツール、監視やトラブルシューティングといった部分でもぐりこむことがある。例えばフォルダーのスラッシュ(&lt;code&gt;/&lt;/code&gt; と &lt;code&gt;\&lt;/code&gt;) や COM の依存、Windows API の使用といった様々であり、これらはプラットフォーム依存しない形に変更する必要がある。サービスを複数のプラットフォームで End-to-End で早期にテストすることで見つけ出すことが重要であること。&lt;/p&gt;
&lt;p&gt;HTTP.sys から Kestrel への移行により Linux と Kubernetes での動作とクリーンなコードへと代わり、インメモリーキャッシュのために Win32 ファイル API を使用してファイルシステムへの読み書きを行っていたコードを UnmanagedMemoryStream へと置き換えるといったことをしている。&lt;/p&gt;
&lt;p&gt;最後にクロスプラットフォームによるツーリングについて。使い慣れた Windows のデバッグや調査のためのツールが .NET Core や Linux でも動作するわけではないことから、 .NET の標準ツール (&lt;code&gt;dotnet counters&lt;/code&gt;, &lt;code&gt;dotnet dump&lt;/code&gt;, &lt;code&gt;dotnet trace&lt;/code&gt; など) に関する知識を溜めたとのこと。新しく使えるようになったツールとして .NET メトリクスサイドカーがあり、.NET 6 移行の &lt;code&gt;dotnet monitor&lt;/code&gt; を Docker イメージに含めサイドカーとして動作させることで稼働中のプロセスのメトリクスやダンプ、トレースの取得が可能となった。&lt;/p&gt;
&lt;h3 id="fall-2022-updates-for-xamarin-hello-ios-16-and-android-13-xamarin-blog"&gt;Fall 2022 Updates for Xamarin, Hello iOS 16 and Android 13 - Xamarin Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/xamarin/xamarin-ios-16-android-13-updates/"&gt;https://devblogs.microsoft.com/xamarin/xamarin-ios-16-android-13-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Xamarin の2022年秋のアップデートのアナウンス。&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.3.5 と Visual Studio for Mac 2022 17.3.6 で Xamarin が iOS 16 と Android 13 に対応した。&lt;/p&gt;
&lt;p&gt;Xamarin SDK は2024年5月1日までのサポートとなり、最終的なプラットフォームバージョンは iOS 16 と Android 13 となる。これ以降のバージョンについては .NET の一部として提供されるため移行が必要となる。&lt;/p&gt;
&lt;p&gt;記事では .NET 6 へのアップグレードについてとロードマップを改めて紹介している。&lt;/p&gt;
&lt;h3 id="visual-studio-for-mac-17.4-preview-2.1-is-now-available-visual-studio-blog"&gt;Visual Studio for Mac 17.4 Preview 2.1 is now available - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-for-mac-17-4-preview-2-1-is-now-available/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-for-mac-17-4-preview-2-1-is-now-available/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio for Mac 17.4 Preview 2.1 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースではデバッグ中のワンクリックでのリスタート、エディターのドラッグアンドドロップによるサイドバイサイドのようなシェル体験の改善、エディターの C# 11 に関する機能のサポートやハイライティング、行間設定といった改善のほか、Apple Silicon 環境へのインストールに Rosetta が不要となった。&lt;/p&gt;
&lt;h3 id="use.net-from-any-javascript-app-in.net-7.net-blog"&gt;Use .NET from any JavaScript app in .NET 7 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/use-net-7-from-any-javascript-app-in-net-7/"&gt;https://devblogs.microsoft.com/dotnet/use-net-7-from-any-javascript-app-in-net-7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 で対応する JavaScript ベースのアプリケーションから .NET を WebAssembly のアプリケーションとして利用できるようになる仕組みについての記事。&lt;/p&gt;
&lt;p&gt;記事では JavaScript のサンプルプロジェクト TodoMVC に .NET WebAssembly で一部実装を置き換えるという例を紹介している。&lt;/p&gt;
&lt;h3 id="rider-2022.3-early-access-program-is-now-open-the.net-tools-blog"&gt;Rider 2022.3 Early Access Program Is Now Open | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/09/26/rider-2022-3-early-access-program/"&gt;https://blog.jetbrains.com/dotnet/2022/09/26/rider-2022-3-early-access-program/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider 2022.3 EAP が公開された。&lt;/p&gt;
&lt;p&gt;このリリースでは起動パフォーマンスの改善や C# での Language Injection のサポートの強化、NuGet Central Package Management のサポートやホットリロードの改善、IL Viewer や UI/UX の改善などが含まれる。&lt;/p&gt;
&lt;h3 id="resharper-2022.3-early-access-program-is-open-the.net-tools-blog"&gt;ReSharper 2022.3 Early Access Program Is Open! | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/09/26/resharper-2022-3-early-access-program/"&gt;https://blog.jetbrains.com/dotnet/2022/09/26/resharper-2022-3-early-access-program/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper 2022.3 EAP が公開された。&lt;/p&gt;
&lt;p&gt;このリリースでは C# 11 の Raw String リテラル無いの Language Injection のサポートなどが追加されている。&lt;/p&gt;
&lt;h3 id="release-v12.0.0-automapperautomapper"&gt;Release v12.0.0 · AutoMapper/AutoMapper&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/AutoMapper/AutoMapper/releases/tag/v12.0.0"&gt;https://github.com/AutoMapper/AutoMapper/releases/tag/v12.0.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AutoMapper v12.0.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;いくつかの不具合の修正と改善が行われている。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="nuget-season-of-giving-the-nuget-blog"&gt;NuGet Season of Giving - The NuGet Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/nuget/nuget-season-of-giving/"&gt;https://devblogs.microsoft.com/nuget/nuget-season-of-giving/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NuGet リポジトリーに貢献を待っているという記事。&lt;/p&gt;
&lt;p&gt;10月は Hacktoberfest が開催され、NuGet も参加しているためコミュニティーからの貢献を呼び掛けている。&lt;/p&gt;
&lt;h3 id="net-core-3.1-windows-update-at-se"&gt;.NET Core 3.1 以降を Windows Update の更新対象とする at SE の雑記&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.engineer-memo.com/2022/09/28/net-core-3-1-%E4%BB%A5%E9%99%8D%E3%82%92-windows-update-%E3%81%AE%E6%9B%B4%E6%96%B0%E5%AF%BE%E8%B1%A1%E3%81%A8%E3%81%99%E3%82%8B/"&gt;https://blog.engineer-memo.com/2022/09/28/net-core-3-1-%e4%bb%a5%e9%99%8d%e3%82%92-windows-update-%e3%81%ae%e6%9b%b4%e6%96%b0%e5%af%be%e8%b1%a1%e3%81%a8%e3%81%99%e3%82%8b/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows Server で .NET Core 3.1 または .NET 5 以降の更新を Windows Update から受け取る設定についての記事。&lt;/p&gt;
&lt;h3 id="netcore-qiita"&gt;.NETCoreでマルチプラットフォームを対象にした画像処理 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/karuakun/items/319b78a41cd0e9fa5f07"&gt;https://qiita.com/karuakun/items/319b78a41cd0e9fa5f07&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Core 以降で画像処理を行うためのライブラリーを紹介している記事。&lt;/p&gt;
&lt;p&gt;記事では System.Drawing.Common, ImageSharp, SkiaSharp の3つを紹介している。&lt;/p&gt;
&lt;h3 id="migrating-from-asp.net-to-asp.net-core-part-4.net-blog"&gt;Migrating from ASP.NET to ASP.NET Core (Part 4) - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/migrating-from-asp-net-to-asp-net-core-part-4/"&gt;https://devblogs.microsoft.com/dotnet/migrating-from-asp-net-to-asp-net-core-part-4/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET を ASP.NET Core に移行するシリーズの Part 4 記事。&lt;/p&gt;
&lt;p&gt;記事では Visual Studio のプロジェクト移行拡張ツールの更新についてと System.Web アダプターの更新について触れている。&lt;/p&gt;
&lt;h3 id="net6-enityframework-chocolategraphql"&gt;.NET6 + EnityFramework + ChocolateでGraphQLサーバーを作る&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/noripi10/articles/2db7fb619f588d"&gt;https://zenn.dev/noripi10/articles/2db7fb619f588d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 と Enity Framework Core、Chocolate GraphQL を組み合わせて GraphQL を作ってみるという記事。&lt;/p&gt;
&lt;h3 id="advanced-signalr-configuration-fine-tuning-the-server-side-hub-and-all-supported-client-types"&gt;Advanced SignalR configuration: fine-tuning the server-side hub and all supported client types&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;f.sazanavets/advanced-signalr-configuration-fine-tuning-the-server-side-hub-and-all-supported-client-types-a3de4858fc71"&gt;https://medium.com/&amp;#64;f.sazanavets/advanced-signalr-configuration-fine-tuning-the-server-side-hub-and-all-supported-client-types-a3de4858fc71&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SignalR のサーバーサイドとクライアントと様々な設定について解説している記事。&lt;/p&gt;
&lt;h3 id="c-qiita"&gt;C#でクラス新規作成時のテンプレートを編集する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/alicial/items/1bc992e8787c8211d91d"&gt;https://qiita.com/alicial/items/1bc992e8787c8211d91d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio で C# の新しいクラスを作成するときのテンプレートをカスタマイズする方法についての記事。&lt;/p&gt;
&lt;h3 id="sorting-in-c-orderby.orderby-or-orderby.thenby-whats-more-effective-and-why"&gt;Sorting in C#: OrderBy.OrderBy or OrderBy.ThenBy? What’s more effective and why?&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/c-sharp-progarmming/sorting-in-c-orderby-orderby-or-orderby-thenby-whats-more-effective-and-why-f9545ee2265f"&gt;https://medium.com/c-sharp-progarmming/sorting-in-c-orderby-orderby-or-orderby-thenby-whats-more-effective-and-why-f9545ee2265f&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;二つの並び替え軸がある場合に OrderBy.OrderBy と OrderBy.ThenBy のそれぞれでの処理の違いを内部についても含めて解説している記事。&lt;/p&gt;
&lt;h3 id="streaming-in-signalr-scientific-programmer"&gt;Streaming in SignalR - Scientific Programmer&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://scientificprogrammer.net/2022/09/26/streaming-in-signalr/"&gt;https://scientificprogrammer.net/2022/09/26/streaming-in-signalr/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SignalR でメッセージのストリーミングを行う方法についての記事。&lt;/p&gt;
&lt;h3 id="asp.net-core-rate-limiting-middleware-in.net-7-maarten-balliauw" blog=""&gt;ASP.NET Core rate limiting middleware in .NET 7 - Maarten Balliauw&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.maartenballiauw.be/post/2022/09/26/aspnet-core-rate-limiting-middleware.html"&gt;https://blog.maartenballiauw.be/post/2022/09/26/aspnet-core-rate-limiting-middleware.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 の ASP.NET Core のレートリミットミドルウェアの使い方についての記事。&lt;/p&gt;
&lt;p&gt;記事ではレート制限時の挙動のカスタマイズやポリシーの構成、YARP との組み合わせといったものを説明している。&lt;/p&gt;
&lt;h3 id="understanding-identity-in.net"&gt;Understanding identity in .NET&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/pbouillon/understanding-identity-in-net-2169"&gt;https://dev.to/pbouillon/understanding-identity-in-net-2169&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET のアイデンティティ (Claim) についての基礎を解説している記事。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="nifanfamoos-c-x64-operating-system-programming-with-the.net-native-ahead-of-time-compilation-technology"&gt;nifanfa/MOOS: C# x64 operating system programming with the .NET native ahead-of-time compilation technology.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/nifanfa/MOOS"&gt;https://github.com/nifanfa/MOOS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 の NativeAOT を使用して C# で OS を作るというプロジェクト。&lt;/p&gt;
&lt;h3 id="pg-itodotnet_ffi-invoke-c-managed-code-from-php"&gt;pg-ito/dotnet_ffi: invoke C# managed code from php&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/pg-ito/dotnet_ffi"&gt;https://github.com/pg-ito/dotnet_ffi&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PHP の拡張で .NET ランタイムをホストして C# のライブラリーを呼び出せるようにする仕組み。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/pgito/phpkarac-number-noraiburariwohu-beruyounisitadotnet-ffiwoqu-wei-detukututemita"&gt;PHPからC#のライブラリを呼べるようにしたdotnet_ffiを趣味でつくってみた&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="mathnetmathnet-numerics-math.net-numerics"&gt;mathnet/mathnet-numerics: Math.NET Numerics&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/mathnet/mathnet-numerics"&gt;https://github.com/mathnet/mathnet-numerics&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;数値計算ライブラリー。特殊関数、線形代数、確率モデル、乱数、統計、補間、積分、回帰、曲線フィッティング、積分変換 (FFT) などが含まれる。&lt;/p&gt;
&lt;p&gt;-&lt;a href="https://qiita.com/higege-amdeker/items/f424267279bb078ec435"&gt;「ちょっと午後までに標準偏差表示しといて」～C# での最速標準偏差～ - Qiita&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="cysharpmemorypack-zero-encoding-extreme-performance-binary-serializer-for-c"&gt;Cysharp/MemoryPack: Zero encoding extreme performance binary serializer for C#.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/Cysharp/MemoryPack"&gt;https://github.com/Cysharp/MemoryPack&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# / .NET に特化したバイナリー形式(メモリー表現のまま)のシリアライズを行うハイパフォーマンスなシリアライザー。&lt;/p&gt;
&lt;p&gt;.NET 7 を前提とした実装と Incremental Source Generator による事前コード生成などの特徴を持っている。&lt;/p&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="asp.net-core-in-action-version-3-is-now-available"&gt;ASP.NET Core in Action, version 3, is now available&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/asp-dotnet-core-in-action-version-3-is-now-available/"&gt;https://andrewlock.net/asp-dotnet-core-in-action-version-3-is-now-available/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core in Action 第3版が Early Access で発売された。&lt;/p&gt;
&lt;p&gt;この新版では Minimal APIs を含む .NET 7 に対応した形に更新されているとのこと。記事では10月13日まで40%オフで入手できるクーポンを公開している。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="linq-usage-survey-issue-76205-dotnetruntime"&gt;LINQ Usage Survey · Issue #76205 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/issues/76205"&gt;https://github.com/dotnet/runtime/issues/76205&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LINQ の利用調査。メソッド構文かクエリー式か、どのようなケースで使用するか、どのようなケースで避けているか。&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2022-09-26: .NET 7 Release Candidate 1, Visual Studio 2022 17.4 Preview 2, Uno Platform 4.5</title>
			<link>/2022/09/26/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2022/09/26/updates</guid>
			<pubDate>Mon, 26 Sep 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="announcing.net-7-release-candidate-1.net-blog"&gt;Announcing .NET 7 Release Candidate 1 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-dotnet-7-rc-1/"&gt;https://devblogs.microsoft.com/dotnet/announcing-dotnet-7-rc-1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 RC 1 がリリースされた。&lt;/p&gt;
&lt;p&gt;.NET 7 の運用環境での利用がサポートされた初めてのリリース候補となっている(10月に RC 2 がリリース予定)。Preview からの変更点は不具合や継続的な改善が主となる。Visual Studio を使用する場合には Preview Channel での利用が推奨される。&lt;/p&gt;
&lt;p&gt;記事では今までの Preview での改善などについての記事へのリンクやコントリビューターにスポットライトを当てて紹介している。&lt;/p&gt;
&lt;h3 id="announcing-entity-framework-7-release-candidate-1.net-blog"&gt;Announcing Entity Framework 7 Release Candidate 1 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-ef7-rc1/"&gt;https://devblogs.microsoft.com/dotnet/announcing-ef7-rc1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework 7 RC 1 がリリースされた。&lt;/p&gt;
&lt;p&gt;各種修正や改善、API の変更 (Trigger の API の移動や Raw SQL の FormattableString の受け取りなど)の確定といったものが含まれている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/efcore/issues?q=milestone%3A7.0.0-rc1"&gt;milestone:7.0.0-rc1 - Issues · dotnet/efcore&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asp.net-core-updates-in.net-7-release-candidate-1.net-blog"&gt;ASP.NET Core updates in .NET 7 Release Candidate 1 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-7-rc-1/"&gt;https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-7-rc-1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 RC 1 での ASP.NET Core のアップデートについての記事。&lt;/p&gt;
&lt;p&gt;RC 1 では次の新機能や改善が含まれていることを紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Blazor WebAssembly でのダイナミックな認証リクエスト&lt;/li&gt;
&lt;li&gt;location の変更イベントのハンドリング&lt;/li&gt;
&lt;li&gt;Blazor WebAssembly のデバッグ改善&lt;/li&gt;
&lt;li&gt;.NET 6 プロジェクトのための .NET WebAssembly ビルドツール&lt;/li&gt;
&lt;li&gt;WebAssembly 上の .NET JavaScript 相互運用&lt;/li&gt;
&lt;li&gt;Kestrel のフル証明書チェインの改善&lt;/li&gt;
&lt;li&gt;HTTP/2 アップロードの高速化&lt;/li&gt;
&lt;li&gt;HTTP/3 の改善&lt;/li&gt;
&lt;li&gt;Kestrel での WebTransport over HTTP/3 の実験的サポート&lt;/li&gt;
&lt;li&gt;gRPC JSON トランスコーディングの OpenAPI 実験的サポート&lt;/li&gt;
&lt;li&gt;レートリミットミドルウェアの改善&lt;/li&gt;
&lt;li&gt;macOS の開発証明書の改善&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="visual-studio-2022-17.4-preview-2-visual-studio-blog"&gt;Visual Studio 2022 17.4 Preview 2 - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2022-17-4-preview-2/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-2022-17-4-preview-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.4 Preview 2 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースではエンタープライズ向けのサポートとして Windows Update for Business を使用した AAD 参加型デバイスでのセキュリティー更新の受け取り、ARM64 開発での Visual Studio 拡張機能開発と C++ ゲーム開発、JavaScript 開発のサポートの追加、マルチリポジトリーの操作の改善、ブランチ切り替えパフォーマンスの向上、Microsoft Teams ツールキットの追加、Markdown 編集サポートの追加など。&lt;/p&gt;
&lt;p&gt;.NET 開発では .NET 7 RC 1 と MAUI のサポート、インラインリネーム機能の追加などが行われている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/visualstudio/releases/2022/release-notes-preview#1740-pre20--visual-studio-2022-version-174-preview-2"&gt;Visual Studio 2022 17.4 Preview 2 - Visual Studio 2022 Preview Release Notes | Microsoft Learn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="net-maui-in.net-7-release-candidate-1.net-blog"&gt;.NET MAUI in .NET 7 Release Candidate 1 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-maui-in-dotnet-7-rc1/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-maui-in-dotnet-7-rc1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 RC 1 での .NET MAUI のアップデートについての記事。&lt;/p&gt;
&lt;p&gt;このリリースでは Map コントロールの追加 (Windows は WinUI 3 が Map を持たないため未サポート)、コンテキストメニューやツールチップ、ジェスチャー、ウィンドウサイズと位置といったデスクトップ向けの改善が含まれている。&lt;/p&gt;
&lt;h3 id="rider-2022.3-roadmap-the.net-tools-blog"&gt;Rider 2022.3 Roadmap | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/09/15/rider-2022-3-roadmap/"&gt;https://blog.jetbrains.com/dotnet/2022/09/15/rider-2022-3-roadmap/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider 2022.3 のロードマップについての記事。&lt;/p&gt;
&lt;p&gt;C# 11 のサポートや起動パフォーマンスの向上、日本語を含むローカライズ、各種 UI の改善、WSL サポートや Linux の ARM64 サポート、Unity の Input System 対応、Blazor と Razor のホットリロードやフォーマッターの再実装など。&lt;/p&gt;
&lt;h3 id="resharper-2022.3-roadmap-the.net-tools-blog"&gt;ReSharper 2022.3 Roadmap | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/09/15/resharper-2022-3-roadmap/"&gt;https://blog.jetbrains.com/dotnet/2022/09/15/resharper-2022-3-roadmap/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper 2022.3 のロードマップについての記事。&lt;/p&gt;
&lt;p&gt;C# 11 のサポートや Razor のフォーマッターの再実装、コードのハイライトのオーバーホール、Out-of-Process 移行など。&lt;/p&gt;
&lt;h3 id="uno-platform-4.5-uno-islands-4-new-controls-linux-framebuffer-and-much-more"&gt;Uno Platform 4.5: Uno Islands, 4 New Controls, Linux Framebuffer and MUCH more&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://platform.uno/blog/uno-platform-4-5-uno-islands-4-new-controls-linux-framebuffer-and-much-more/"&gt;https://platform.uno/blog/uno-platform-4-5-uno-islands-4-new-controls-linux-framebuffer-and-much-more/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Uno Platform 4.5 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは WPF 上に Uno (WinUI) をホストする Uno Island が導入され、Breadcrumb や PipsPager、Pull to Refresh といった新しいコントロールの追加、Linux のフレームバッファー DPI とスケーリング、16-bit モードのサポートが追加されている。Uno Toolkit にはセーフエリアやステータスバー、入力を扱う機能が追加された。&lt;/p&gt;
&lt;p&gt;その他 Uno.Extensions の機能追加や iOS 16 の対応、Android でのパフォーマンスの向上などの対応も行われている。&lt;/p&gt;
&lt;h3 id="build-skills-that-open-doorswith-microsoft-learn"&gt;Build skills that open doors—with Microsoft Learn&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://techcommunity.microsoft.com/t5/microsoft-learn-blog/build-skills-that-open-doors-with-microsoft-learn/ba-p/3614011"&gt;https://techcommunity.microsoft.com/t5/microsoft-learn-blog/build-skills-that-open-doors-with-microsoft-learn/ba-p/3614011&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoft の技術系のリソースが Microsoft Learn ファミリーに統合されるというアナウンス。&lt;/p&gt;
&lt;p&gt;これに伴いドキュメンテーションである docs.microsoft.com も learn.microsoft.com へと移行され、リダイレクトされるようになっている。&lt;/p&gt;
&lt;h3 id="now-introducing-arm64-support-for-vs-extensions"&gt;Now Introducing Arm64 Support for VS Extensions!&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/now-introducing-arm64-support-for-vs-extensions/"&gt;https://devblogs.microsoft.com/visualstudio/now-introducing-arm64-support-for-vs-extensions/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 の ARM64 版向けの拡張機能がサポートされたというアナウンス。&lt;/p&gt;
&lt;p&gt;記事では拡張機能を ARM64 対応にする方法と、Marketplace へのアップロードについて触れている。&lt;/p&gt;
&lt;h3 id="net-framework-september-2022-cumulative-update-preview"&gt;.NET Framework September 2022 Cumulative Update Preview&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-framework-september-2022-cumulative-update-preview/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-framework-september-2022-cumulative-update-preview/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework の2022年9月の累積アップデートのプレビューがリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは新しいセキュリティー更新はなく、WPF や WinForms、Workflow、ランタイムとネットワーキングに関する修正が含まれている。&lt;/p&gt;
&lt;h3 id="release-2.2.0-beta.1-mysql-netmysqlconnector"&gt;Release 2.2.0-beta.1 · mysql-net/MySqlConnector&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/mysql-net/MySqlConnector/releases/tag/2.2.0-beta.1"&gt;https://github.com/mysql-net/MySqlConnector/releases/tag/2.2.0-beta.1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Async MySqlConnector 2.2.0-beta.1 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは .NET 7 への対応や DNS チェックの間隔指定の追加されている。&lt;/p&gt;
&lt;p&gt;また破壊的変更となる可能性として接続文字列ビルダーでのキーの並び順の正規化により接続文字列が変わる可能性や .NET 4.5 のサポート削除などがあるとしている。&lt;/p&gt;
&lt;h3 id="microsoft-teams-assignments-services-journey-to.net-6"&gt;Microsoft Teams Assignments Service's Journey to .NET 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/microsoft-teams-assignments-service-dotnet-6-journey/"&gt;https://devblogs.microsoft.com/dotnet/microsoft-teams-assignments-service-dotnet-6-journey/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoft Teams Assignments Service を .NET Framework 4.7.2 (ASP.NET Web API) から .NET 6 へ移行した事例。&lt;/p&gt;
&lt;p&gt;移行は依存のライブラリーから更新、移植を行い、その後 ASP.NET から ASP.NET Core に移行した。その結果として CPU や待機時間といったものが改善されたが、特に一貫して改善されたのがメモリー使用量だったとのこと。&lt;/p&gt;
&lt;p&gt;記事では具体的なワークロードに対するレイテンシーとメモリー使用量の変化を紹介している。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="austin-wise-the-threadpool-in.net-7-nativeaot-uses-the-windows-thread-pool"&gt;Austin Wise - The ThreadPool in .NET 7 NativeAOT uses the Windows thread pool&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.awise.us/2022/09/18/dotnet-nativeaot-windows-threadpool.html"&gt;https://www.awise.us/2022/09/18/dotnet-nativeaot-windows-threadpool.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 でスレッドプールが C# によるマネージド実装へと変わったが、.NET 7 時点では Windows 上の NativeAOT ビルドでは OS のスレッドプールが使われることについての記事。&lt;/p&gt;
&lt;p&gt;ただしこれは現時点でそうなっているだけ(.NET 7 の時点では検討する時間がなかった)であって将来的にどうなるかはまたわからないとのこと。&lt;/p&gt;
&lt;!-- https://twitter.com/MStrehovsky/status/1571741674438787073 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;The common C# implementation was originally written for NativeAOT on Unix (&lt;a href="https://t.co/bxNNQEcOrC"&gt;https://t.co/bxNNQEcOrC&lt;/a&gt;). At that time NativeAOT already had the OS-provided Win32 threadpool implementation. Nobody is bothered by it too much because it&amp;#39;s not C code we need to maintain - the OS does it&lt;/p&gt;&amp;mdash; Michal Strehovský (&amp;#64;MStrehovsky) &lt;a href="https://twitter.com/MStrehovsky/status/1571741674438787073?ref_src=twsrc%5Etfw"&gt;September 19, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="counting-the-leading-zeroes-in-a-binary-number-with-c"&gt;Counting the leading zeroes in a binary number with C#&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/counting-the-leading-zeroes-in-a-binary-number/"&gt;https://andrewlock.net/counting-the-leading-zeroes-in-a-binary-number/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;指定した数値をビットで見た時、先頭から続く 0 の数をカウントする方法についての記事。&lt;/p&gt;
&lt;p&gt;.NET Core 3.0 以降であれば &lt;code&gt;BitOperations.LeadingZeroCount&lt;/code&gt; メソッドを利用でき、常に最速であるが、それ以前のランタイムをサポートする必要がある場合は自前で実装する必要があるのでそれを実装するという話。&lt;/p&gt;
&lt;h3 id="c-obsolete"&gt;(C#) Obsolete によるコンパイルエラーを無視する - ネコのために鐘は鳴る&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ikorin2.hatenablog.jp/entry/2022/09/19/130307"&gt;https://ikorin2.hatenablog.jp/entry/2022/09/19/130307&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Obsolete&lt;/code&gt; 属性の第二引数 &lt;code&gt;error&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; となっている場合でもコンパイルエラーにせず呼び出す方法についての記事。&lt;/p&gt;
&lt;h3 id="unity2020.1-rider-qiita"&gt;Unity2020.1~ と Rider を使うとこういう罠を踏むかも - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/divideby_zero/items/1aa3c7bedf30e742cdc1"&gt;https://qiita.com/divideby_zero/items/1aa3c7bedf30e742cdc1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unity 2020.1 以降では &lt;code&gt; Suppress Common Warnings&lt;/code&gt; というよくある警告を抑制する機能があり、その結果未初期化のプライベート変数に関する警告が抑制され、Rider で &lt;code&gt;Initialize field from constructor&lt;/code&gt; クイックアクションがうまく発動できないという話。&lt;/p&gt;
&lt;h3 id="roslyn"&gt;Roslyn とその活用法&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://speakerdeck.com/nenonaninu/roslyn-tosonohuo-yong-fa"&gt;https://speakerdeck.com/nenonaninu/roslyn-tosonohuo-yong-fa&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Roslyn の役割の説明と Roslyn を使用して C# から TypeScript の型定義ファイルを生成するツール (Source Generator) を作ったというスライド。&lt;/p&gt;
&lt;h3 id="net-security-code-scan"&gt;.NET で静的セキュリティコード検査 (Security Code Scan 編)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/masakura/articles/5d8525f9ffcf3e"&gt;https://zenn.dev/masakura/articles/5d8525f9ffcf3e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Security Code Scan というオープンソースの静的コード脆弱性診断ツールで C# のコードをスキャンしたり、カスタマイズしたりする方法についての記事。&lt;/p&gt;
&lt;h3 id="blazorbindings.maui-preview-9"&gt;BlazorBindings.Maui - Preview 9&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/dreamescaper/blazorbindingsmaui-preview-9-4iob"&gt;https://dev.to/dreamescaper/blazorbindingsmaui-preview-9-4iob&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MobileBlazorBindings を元にした MAUI 向けの Blazor の形でアプリケーションを実装する BlazorBindings.Maui の Preview 9 がリリースされた。&lt;/p&gt;
&lt;p&gt;サードパーティーのコントロールからコードを生成する Component Generator 、影やジェスチャーのサポートの追加が行われている。&lt;/p&gt;
&lt;h3 id="c-using-gc.keepalive-in-async-methods"&gt;[C#] Using GC.KeepAlive in async methods&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://minidump.net/c-using-gc-keepalive-in-async-methods-8d20fd79f0a0"&gt;https://minidump.net/c-using-gc-keepalive-in-async-methods-8d20fd79f0a0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;非同期メソッドで &lt;code&gt;GC.KeepAlive&lt;/code&gt; を使用しても GC に改修されてしまうケースがあることについての記事。&lt;/p&gt;
&lt;p&gt;非同期メソッドはステートマシンに変換されるが、デリゲートをネイティブメソッドに渡している場合にネイティブメソッドの呼び出し中に GC が発生するとオブジェクトが回収されてしまうパターンがある。&lt;code&gt;GC.KeepAlive&lt;/code&gt; を呼び出していてもコード的にはわかれてしまうので防げず、これを防ぐには &lt;code&gt;GCHandle.Alloc&lt;/code&gt; で保持する必要がある。&lt;/p&gt;
&lt;h3 id="c1"&gt;C#におけるベクトル的データ構造のパフォーマンス比較①&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/ysaki51/articles/45d180e3755410"&gt;https://zenn.dev/ysaki51/articles/45d180e3755410&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# (.NET) でのベクトル演算を行ういくつかの方法についてパフォーマンスを比較している記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/ysaki51/articles/47122564898e5d"&gt;C#におけるベクトル的データ構造のパフォーマンス比較②&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="realtime-database-with-firebase-in.net-maui"&gt;Realtime Database with Firebase in .NET MAUI&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://cedricgabrang.medium.com/realtime-database-with-firebase-in-net-maui-60323460ef7e"&gt;https://cedricgabrang.medium.com/realtime-database-with-firebase-in-net-maui-60323460ef7e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Firebase Realtime Database を .NET MAUI で使用する方法についての記事。&lt;/p&gt;
&lt;h3 id="moq-vs-nsubstitute-syntax-cheat-sheet"&gt;Moq vs NSubstitute: syntax cheat sheet&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/bellonedavide/moq-vs-nsubstitute-syntax-cheat-sheet-kkf"&gt;https://dev.to/bellonedavide/moq-vs-nsubstitute-syntax-cheat-sheet-kkf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;モックライブラリの Moq と NSubstitute で実現したいことごとにそれぞれのライブラリーでの記述を紹介している記事。&lt;/p&gt;
&lt;h3 id="netwin32apidllimporttextout-qiita"&gt;.NETの環境でwin32apiのdllimportを使用して、非スムージングなテキストレンダリングのTextOutを実装する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/belre/items/9c6fb4f4c0340296f451"&gt;https://qiita.com/belre/items/9c6fb4f4c0340296f451&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;昔ながらのアンチエイリアスのかかっていないテキストを GDI でレンダリングするという記事。&lt;/p&gt;
&lt;h3 id="asp.net-core-blazor"&gt;ASP.NET Core Blazor のイベント ハンドリングをカスタマイズする&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/okazuki/articles/customize-eventhandlelogic-on-blazor"&gt;https://zenn.dev/okazuki/articles/customize-eventhandlelogic-on-blazor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor のイベントハンドリング処理をカスタマイズする方法についての記事。&lt;/p&gt;
&lt;h3 id="join-us-for-jetbrains.net-days-gamedev-day-online-2022-the.net-tools-blog"&gt;Join us for JetBrains .NET Days + GameDev Day Online 2022 | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/09/19/join-us-for-dotnet-days-and-gamedev-day-online-2022/"&gt;https://blog.jetbrains.com/dotnet/2022/09/19/join-us-for-dotnet-days-and-gamedev-day-online-2022/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;10/25-27 で JetBrains が .NET とゲーム開発に関するオンラインイベントを行うというアナウンス。&lt;/p&gt;
&lt;p&gt;10/25, 26 が .NET Days、10/27 が GameDev Day となっている。&lt;/p&gt;
&lt;h3 id="net-diagnostic-ipc-protocol-the-c-way"&gt;.NET Diagnostic IPC protocol: the C++ way&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://chnasarre.medium.com/net-diagnostic-ipc-protocol-the-c-way-ea5b8024d8d0"&gt;https://chnasarre.medium.com/net-diagnostic-ipc-protocol-the-c-way-ea5b8024d8d0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET の診断 IPC プロトコルを C++ から扱うという記事。&lt;/p&gt;
&lt;p&gt;記事では通信方法やプロトコルの内容について触れている。&lt;/p&gt;
&lt;h3 id="clearscript-f-interactive-javascript-qiita"&gt;[ClearScript] F# Interactive から JavaScript を扱う - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/Mt_SQ/items/d41f8625565a8841bd68"&gt;https://qiita.com/Mt_SQ/items/d41f8625565a8841bd68&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;F# Interactive から ClearScript (JavaScript エンジンブリッジ) を使用して JavaScript を扱うことについての記事。&lt;/p&gt;
&lt;h3 id="firebase-push-notifications-in.net-maui-ios"&gt;Firebase Push Notifications in .NET MAUI (iOS)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://cedricgabrang.medium.com/firebase-push-notifications-in-net-maui-ios-2f4388bf1ac"&gt;https://cedricgabrang.medium.com/firebase-push-notifications-in-net-maui-ios-2f4388bf1ac&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;iOS 上の .NET MAUI アプリケーションで Firebase Push Notifications を扱うことについての記事。&lt;/p&gt;
&lt;h3 id="net-7.net-javascript-interop-on-webassembly-qiita"&gt;.NET 7の.NET JavaScript interop on WebAssemblyを試す - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/yamachu/items/f070ef516c6792ac7e67"&gt;https://qiita.com/yamachu/items/f070ef516c6792ac7e67&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 で導入される .NET JavaScript interop on WebAssembly という WebAssembly のみを使用する (Non-ブラウザー; 非 Blazor) 仕組みについての記事。&lt;/p&gt;
&lt;p&gt;記事では導入とビルドの方法、実際に C# から JavaScript と JavaScript から C# のコードを呼び出す例を Node.js で実行している。&lt;/p&gt;
&lt;h3 id="c-scripting-engine-part-1-introduction-kah-wei-tng"&gt;C# Scripting Engine Part 1 – Introduction – Kah Wei, Tng&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://kahwei.xyz/2022/05/07/c-scripting-engine-part-1-introduction/"&gt;https://kahwei.xyz/2022/05/07/c-scripting-engine-part-1-introduction/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET をホストして C# で実装できるゲームエンジンを作っていくという記事シリーズ。&lt;/p&gt;
&lt;h3 id="architecture-of-a.net-application-case-studies-ndepend"&gt;Architecture of a .NET Application: Case Studies - NDepend&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.ndepend.com/architecture-of-a-net-application-case-studies"&gt;https://blog.ndepend.com/architecture-of-a-net-application-case-studies&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NDepend でいくつかのライブラリーやプロダクトから実際に依存関係を出してみたという記事。&lt;/p&gt;
&lt;h3 id="datatable-visualizer-improvements"&gt;DataTable Visualizer Improvements&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/datatable-visualizer-improvements/"&gt;https://devblogs.microsoft.com/visualstudio/datatable-visualizer-improvements/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.4 Preview 2 での DataTable ビジュアライザーの改善について。&lt;/p&gt;
&lt;p&gt;IEnumerable ビジュアライザー同様に並べ替えやフィルター、エクスポートとテーマ設定をサポートしている。&lt;/p&gt;
&lt;h3 id="its-finally-here.bicep-is-in-visual-studio"&gt;It’s finally here. Bicep is in Visual Studio!&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/bicepforvs/"&gt;https://devblogs.microsoft.com/visualstudio/bicepforvs/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio で Bicep をサポートしたというアナウンス。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-azuretools.visualstudiobicep"&gt;Bicep for Visual Studio - Visual Studio Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="jsuarezruizfigma-to-maui-graphics-figmasharp.maui.graphics-turns-your-figma-design-into.net-maui-graphics-code"&gt;jsuarezruiz/figma-to-maui-graphics: FigmaSharp.Maui.Graphics turns your Figma design into .NET MAUI Graphics code&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/jsuarezruiz/figma-to-maui-graphics"&gt;https://github.com/jsuarezruiz/figma-to-maui-graphics&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Figma のデザインを .NET MAUI のコードに変換するツール。&lt;/p&gt;
&lt;h3 id="testcontainerstestcontainers-dotnet-a-library-to-support-tests-with-throwaway-instances-of-docker-containers-for-all-compatible.net-standard-versions"&gt;testcontainers/testcontainers-dotnet: 🐋 A library to support tests with throwaway instances of Docker containers for all compatible .NET Standard versions.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/testcontainers/testcontainers-dotnet"&gt;https://github.com/testcontainers/testcontainers-dotnet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;テスト実行用の使い捨てコンテナー (データベースや Redis など) を取り扱う TestContainers の .NET 向けライブラリー。&lt;/p&gt;
&lt;p&gt;README の下記のような形で一時的なコンテナーを作り、そこにアクセスするといったことが簡単にできるようになる。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var testcontainersBuilder = new TestcontainersBuilder&amp;lt;TestcontainersContainer&amp;gt;()
  .WithImage(&amp;quot;nginx&amp;quot;)
  .WithName(&amp;quot;nginx&amp;quot;)
  .WithPortBinding(80)
  .WithWaitStrategy(Wait.ForUnixContainer().UntilPortIsAvailable(80));

await using (var testcontainers = testcontainersBuilder.Build())
{
  await testcontainers.StartAsync();
  _ = WebRequest.Create(&amp;quot;http://localhost:80&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/davidfowl/status/1572096059593338882?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;I&amp;#39;ve been meaning to give a deep dive talk on minimal APIs. Lots of dynamic code generation tricks to make it very efficient &lt;a href="https://t.co/V5KJcbvVX2"&gt;https://t.co/V5KJcbvVX2&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/aspnetcore?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#aspnetcore&lt;/a&gt;&lt;/p&gt;&amp;mdash; David Fowler 🇧🇧🇺🇸 (&amp;#64;davidfowl) &lt;a href="https://twitter.com/davidfowl/status/1572096059593338882?ref_src=twsrc%5Etfw"&gt;September 20, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Minimal APIs では任意の &lt;code&gt;Delegate&lt;/code&gt; を渡しているけどどうやって &lt;code&gt;RequestDelegate&lt;/code&gt; にしているの、の回答。&lt;code&gt;RequestDelegateFactory&lt;/code&gt; が頑張って動的に生成していますという話。&lt;/p&gt;
&lt;!-- https://twitter.com/fonssonnemans/status/1573274358910525442 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;In .NET 7 you don&amp;#39;t need to use the Math and MathF static classes anymore. You can use the Math methods on the numeric types. &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/GenericMath?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#GenericMath&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/csharp?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#csharp&lt;/a&gt; &lt;a href="https://t.co/eaWx1PGvBT"&gt;pic.twitter.com/eaWx1PGvBT&lt;/a&gt;&lt;/p&gt;&amp;mdash; Fons Sonnemans 🇳🇱 💙💛 (&amp;#64;fonssonnemans) &lt;a href="https://twitter.com/fonssonnemans/status/1573274358910525442?ref_src=twsrc%5Etfw"&gt;September 23, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Generic Math でいろいろなメソッドが直接生えているので &lt;code&gt;Math&lt;/code&gt; / &lt;code&gt;MathF&lt;/code&gt; を使うことなく &lt;code&gt;int.Abs&lt;/code&gt; のような形で呼び出せるようになったという話。&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
	</channel>
</rss>